{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6f899706c7f47994e01e99fe34b172e9a7415432","modified":1617847917146},{"_id":"source/_posts/FFT学习笔记.md","hash":"10fe581e7f41edec8db314845850cff54667c42c","modified":1615030474850},{"_id":"source/_posts/Lucas定理.md","hash":"bc0f0fa1c64778a165f448556b0fc9b490b79843","modified":1616596932824},{"_id":"source/_posts/draft/temp.tex","hash":"27c83935decc73d08f3c2a8d21eabc3f65e3415d","modified":1621054537664},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1615030474850},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1615030474850},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1615030474850},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1615030474850},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1615030474850},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1615030474850},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1615030474850},{"_id":"themes/next/config.yml","hash":"041395164e701dfa80e66abbe6dd86d2f3eadc9b","modified":1617847028013},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1615030474850},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1615030474850},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1615030474850},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1615030474853},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1615030474850},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1615030474850},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1615030474850},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1615030474850},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1615030474850},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1615030474850},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1615030474850},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1615030474850},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1615030474850},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1615030474850},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1615030474850},{"_id":"themes/next/_config.yml","hash":"8e937d86b3a8ef5f9323c94df0e63c46b1dac527","modified":1615030474850},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1615030474850},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1615030474850},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1615030474850},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1615030474850},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1615030474850},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1615030474850},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1615030474850},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1615030474853},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1615030474850},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1615030474850},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1615030474853},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1615030474853},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1615030474853},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1615030474853},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1615030474853},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1615030474850},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1615030474853},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1615030474850},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1615030474850},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1615030474850},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1615030474850},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1615030474850},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1615030474853},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1615030474853},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1615030474853},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1615030474853},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1615030474853},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1615030474853},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1615030474853},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1615030474853},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1615030474853},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1615030474853},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1615030474853},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1615030474853},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1615030474853},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1615030474853},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1615030474853},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1615030474853},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1615030474853},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1615030474850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1615030474850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1615030474850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1615030474850},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1615030474850},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1615030474850},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1615030474850},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1615030474850},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1615030474853},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1615030474853},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1615030474853},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1615030474853},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1615030474853},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1615030474853},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1615030474853},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1615030474853},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1615030474853},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1615030474853},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1615030474853},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1615030474853},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1615030474853},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1615030474853},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1615030474853},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1615030474853},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1615030474853},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1615030474853},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1615030474853},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1615030474853},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1615030474853},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1615030474853},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1615030474853},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1615030474853},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1615030474853},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1615030474853},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1615030474853},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1615030474853},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1615030474853},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1615030474853},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1615030474853},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1615030474853},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1615030474853},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1615030474853},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1615030474853},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1615030474853},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1615030474853},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1615030474857},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1615030474857},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1615030474853},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1615030474857},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1615030474857},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1615030474857},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1615030474857},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1615030474857},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1615030474857},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1615030474857},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1615030474857},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1615030474857},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1615030474857},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1615030474857},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1615030474857},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1615030474857},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1615030474857},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1615030474857},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1615030474853},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1615030474853},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1615030474853},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1615030474853},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1615030474853},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1615030474853},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1615030474853},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1615030474853},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1615030474853},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1615030474853},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1615030474853},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1615030474853},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1615030474853},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1615030474853},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1615030474853},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1615030474853},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1615030474853},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1615030474853},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1615030474853},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1615030474853},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1615030474853},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1615030474853},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1615030474857},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1615030474857},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1615030474857},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1615030474857},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1615030474857},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1615030474857},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1615030474857},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1615030474860},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1615030474860},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1615030474853},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1615030474857},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1615030474853},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1615030474857},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1615030474853},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1615030474857},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1615030474853},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1615030474857},{"_id":"public/archives/index.html","hash":"883965008616960267971b809649f3bb780cb520","modified":1623844061668},{"_id":"public/archives/2021/index.html","hash":"417115e14b3a9ec22d2a0da8ef55a67683e17985","modified":1623844061668},{"_id":"public/archives/2021/01/index.html","hash":"e48ddf6f6a91aaee4301dceba692be43ab1f0e70","modified":1623844061668},{"_id":"public/archives/2021/03/index.html","hash":"cc02ca80b75ec8e6f298d927125b95464b75da02","modified":1623844061668},{"_id":"public/2021/03/06/Lucas定理/index.html","hash":"d66bc6b6c097e0bd74ec0f49c2915ec7a337af33","modified":1623844061668},{"_id":"public/2021/01/28/FFT学习笔记/index.html","hash":"821f763d9f4b58a67ce6d73088ea44789c9627ab","modified":1623844061668},{"_id":"public/index.html","hash":"32c2cdd3dba07e2db7f812f357bdc578d2c64191","modified":1623844061668},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1617847997827},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1617847997827},{"_id":"public/CNAME","hash":"6f899706c7f47994e01e99fe34b172e9a7415432","modified":1617847997827},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1617847997827},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1617847997827},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1617847997827},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1617847997827},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1617847997827},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1617847997827},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1617847997827},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1617847997827},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1617847997827},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1617847997827},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1617847997827},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1617847997827},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1617847997827},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1617847997827},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1617847997827},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1617847997827},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1617847997827},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1617847997827},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1617847997827},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1617847997827},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1617847997827},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1617847997827},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1617847997827},{"_id":"public/css/main.css","hash":"1ccc7ebe2f2ea2b11bfb2ce998a6f47953f63378","modified":1617847997827},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1617847997827},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1617847997827},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1617847997827},{"_id":"source/_posts/算法模板.md","hash":"1b4c55524566b0325fe08fe7f01a3b271601b220","modified":1623509555815},{"_id":"public/archives/2021/05/index.html","hash":"fb5ceb427cebf352b5b91441a593c56714f07567","modified":1623844061668},{"_id":"public/2021/05/06/算法模板/index.html","hash":"82b7496428bc823cc52a4741145a6058e1d4056c","modified":1620316186123},{"_id":"source/_posts/draft/算法模板.md","hash":"389f1f96c3e07ac78c61944ea7465f0fb81ef25c","modified":1620831514035},{"_id":"public/2021/05/12/算法模板/index.html","hash":"7616feb8918ba25e11460c44ecad2682af34a3f3","modified":1623509560628},{"_id":"public/2021/05/08/draft/算法模板/index.html","hash":"3dfb085e41db4440a8255828a73072a2ae9e0fab","modified":1620831559030},{"_id":"source/_posts/.~test.docx","hash":"d963f5aefac276f51a53694148c7524adcde3e92","modified":1620990915551},{"_id":"source/_posts/test.docx","hash":"66a0587b4fc901c6433b49c37f320863721b551b","modified":1620990915551},{"_id":"source/_posts/算法模板_.md","hash":"cb395a77d0a03f3a651a6c83e2fbf5a6ef47c84b","modified":1620985096724},{"_id":"source/_posts/test.pdf","hash":"6c53c149325972fd5a0178d325a264d428810318","modified":1622725978958},{"_id":"source/_posts/算法模板.pdf","hash":"cbbd8eab5737147ba832c73429fb1d79827955f0","modified":1620985655287},{"_id":"public/2021/05/12/算法模板_/index.html","hash":"c2a1bdcffcc9e2d74dd3987578bdd511db78697c","modified":1620992695553},{"_id":"source/_posts/同济校赛2021E题“不平衡的字符串”题解.md","hash":"028f232dde0b68f356a4999d0fa2e15a9a97b897","modified":1622808500776},{"_id":"public/2021/05/29/同济校赛2021E题“不平衡的字符串”题解/index.html","hash":"18bbd1d7c094ea512eebf23dc21e225551ded202","modified":1623844061668},{"_id":"source/_posts/两道CF题.md","hash":"11a5224f1272d114b2eeb5b3989b851e56579c68","modified":1625485379693},{"_id":"source/_posts/729D.jpg","hash":"a311b372df8362506fafd288d0290620c54f369d","modified":1625400712371},{"_id":"source/_posts/728D.jpg","hash":"83adebf6b35469af2b8daee472c4aa59ba846911","modified":1625400711391},{"_id":"source/_posts/两道CF题/729D.jpg","hash":"a311b372df8362506fafd288d0290620c54f369d","modified":1625485690012},{"_id":"source/_posts/两道CF题/728D.jpg","hash":"83adebf6b35469af2b8daee472c4aa59ba846911","modified":1625485689922}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FFT学习笔记","mathjax":true,"date":"2021-01-28T05:04:48.000Z","_content":"\n# 多项式\n\n### 系数表达\n$$A(x) = \\sum_{i=0}^{n-1}a_ix^i$$  \n### 点值表达\n$$ \\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\} $$\n\n# 算法概括\nFFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。  \n主要过程为：\n1. 计算原有两个多项式在单位复数根下的点值。（DFT）\n2. 将两个多项式的点值相乘。得到乘积的点值。\n3. 将点值还原为系数表达。（IDFT）\n\n# 单位复数根\n\n### $n$次单位复数根\n$$w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1$$\n\n### 单位根的性质\n\n#### 消去定理\n$$w_{2n}^{2k} = w_n^k $$\n#### 折半定理\n$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。\n\n#### 其它\n$$w_n^{k+n/2} = -w_n^k  $$\n$$w_n^{k+n} = w_n^{k}  $$\n\n\n# 离散傅利叶变换（DFT）\n设多项式$$A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}$$\n他的所有的偶数次项系数组成新多项式  \n$$A_0(x) = a_0 + a_2x + a_4x^2 + ... $$\n$$A_1(x) = a_1 + a_3x + a_4x^2 + ... $$\n则显然有$$A(x) = A_0(x^2)+xA_1(x^2) $$\n$$A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k}) $$ \n\n$$A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k}) $$\n\n利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，\n递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。\n总时间复杂度为$O(nlogn)$\n\n## 伪代码\n\n### 递归实现\n``` \nDFT(A,n) //A为系数数组，n为项数，且n为2的整数次幂（可在）\nif n = 1\n    return\n\nm = n/2\nfor i = 0 to m\n    A0[i] = A[2*i]\n    A1[i] = A[2*i+1]\n\nDFT(A0,n)\nDFT(A1,n)\n\nw = 1\nwn = cos(2pi/n) + i*sin(2pi/n)\nfor i = 0 to m-1\n    A[i] = A0[i] + w*A1[i]\n    A[i+m] = A0[i] - w*A1[i]\n    w = w*wn\nreturn\n```\n\n### 迭代实现  \n将系数数组排成$log_2n$次奇偶分离操作后的顺序  \n这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列\n每个数翻转后的数可以递推求出。\nC++代码:\n``` cpp\n\nstruct Complex{}//实现复数类，此外省略\n\n//1. rev 的计算 （放在main函数中）\nfor(int i = 0;i<n;i++)\n    rev[i] = (rev[i>>1]>>1) | ((i&1) >> l-1)\n\nvoid DFT(Complex *A,int n ){\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = a[j+i];\n                Complex v = a[j+i+m];\n                a[j+i] = u + w*v;\n                a[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n```\n\n# 离散傅利叶逆变换（IDFT）\n\n将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。\n代码可以与DFT合并 \n\n``` cpp\nvoid FFT(Complex *A,int n ,int type){\n    //type = 1表示DFT\n    //type = -1 表示IDFT\n\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n\n```\n\n\n# 完整代码\n``` cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 10000000+100;\nconst double pi = acos(-1);\n\n//实现复数类\nstruct Complex{\n    double r,v;//实部和虚部\n    Complex(){\n        r = v = 0;\n    }\n    Complex(double a,double b){\n        r = a; v = b;\n    }\n    \n    Complex operator+(const Complex &p) const{\n        return Complex(r+p.r,v+p.v);\n    }\n    Complex operator-(const Complex &p) const{\n        return Complex(r-p.r,v-p.v);\n    }\n    Complex operator*(const Complex &p) const{\n        return Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); \n    }\n    \n};\n\nComplex a[maxn],b[maxn];\n\nint rev[maxn];\n\n//DFT和IDFT\nvoid fft(Complex * A,int n,int type){\n    \n    for(int i = 0;i<n;i++)\n        if(rev[i] < i ) swap(A[i],A[rev[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){//the length of doing \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){\n            int m = len>>1;\n            \n            Complex w(1,0);\n            \n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;\n                w = w*wn; \n            }\n            \n        }\n    }\n}\n\n//读入优化\ninline int read(){\n    int x = 0;\n    char c =getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0' && c<='9' ){\n        x = x*10 + c-'0';\n        c = getchar();\n    }\n    return x;\n    \n}\n\nint main(){\n    int n,m;\n    n =  read();\n    m = read();\n\n    for(int i = 0;i<=n;i++){\n        a[i].r = read();\n    }\n    \n    for(int i = 0;i<=m;i++){\n        b[i].r = read();\n    }\n    \n    \n    //将项数补齐到2的整数次幂\n    \n    int N = 1;\n    int l = 0;\n    while(N<=n+m) N <<= 1,l++;\n    \n    //求rev\n    for(int i =0;i<N;i++)\n        rev[i] = (rev[i>>1]>>1) | ((i&1) << (l-1) );\n    \n    fft(a,N,1);\n    fft(b,N,1);\n    \n    for(int i = 0;i<N;i++)\n        a[i] = a[i]*b[i];\n    fft(a,N,-1);\n    \n    for(int i =0;i<=n+m;i++)\n        printf(\"%d \",(int)(a[i].r/N+0.5));//+0.5实现四舍五入\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n\n\n","source":"_posts/FFT学习笔记.md","raw":"---\ntitle: FFT学习笔记\nmathjax: true\ndate: 2021-01-28 13:04:48\ntags:\n---\n\n# 多项式\n\n### 系数表达\n$$A(x) = \\sum_{i=0}^{n-1}a_ix^i$$  \n### 点值表达\n$$ \\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\} $$\n\n# 算法概括\nFFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。  \n主要过程为：\n1. 计算原有两个多项式在单位复数根下的点值。（DFT）\n2. 将两个多项式的点值相乘。得到乘积的点值。\n3. 将点值还原为系数表达。（IDFT）\n\n# 单位复数根\n\n### $n$次单位复数根\n$$w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1$$\n\n### 单位根的性质\n\n#### 消去定理\n$$w_{2n}^{2k} = w_n^k $$\n#### 折半定理\n$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。\n\n#### 其它\n$$w_n^{k+n/2} = -w_n^k  $$\n$$w_n^{k+n} = w_n^{k}  $$\n\n\n# 离散傅利叶变换（DFT）\n设多项式$$A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}$$\n他的所有的偶数次项系数组成新多项式  \n$$A_0(x) = a_0 + a_2x + a_4x^2 + ... $$\n$$A_1(x) = a_1 + a_3x + a_4x^2 + ... $$\n则显然有$$A(x) = A_0(x^2)+xA_1(x^2) $$\n$$A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k}) $$ \n\n$$A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k}) $$\n\n利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，\n递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。\n总时间复杂度为$O(nlogn)$\n\n## 伪代码\n\n### 递归实现\n``` \nDFT(A,n) //A为系数数组，n为项数，且n为2的整数次幂（可在）\nif n = 1\n    return\n\nm = n/2\nfor i = 0 to m\n    A0[i] = A[2*i]\n    A1[i] = A[2*i+1]\n\nDFT(A0,n)\nDFT(A1,n)\n\nw = 1\nwn = cos(2pi/n) + i*sin(2pi/n)\nfor i = 0 to m-1\n    A[i] = A0[i] + w*A1[i]\n    A[i+m] = A0[i] - w*A1[i]\n    w = w*wn\nreturn\n```\n\n### 迭代实现  \n将系数数组排成$log_2n$次奇偶分离操作后的顺序  \n这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列\n每个数翻转后的数可以递推求出。\nC++代码:\n``` cpp\n\nstruct Complex{}//实现复数类，此外省略\n\n//1. rev 的计算 （放在main函数中）\nfor(int i = 0;i<n;i++)\n    rev[i] = (rev[i>>1]>>1) | ((i&1) >> l-1)\n\nvoid DFT(Complex *A,int n ){\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = a[j+i];\n                Complex v = a[j+i+m];\n                a[j+i] = u + w*v;\n                a[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n```\n\n# 离散傅利叶逆变换（IDFT）\n\n将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。\n代码可以与DFT合并 \n\n``` cpp\nvoid FFT(Complex *A,int n ,int type){\n    //type = 1表示DFT\n    //type = -1 表示IDFT\n\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n\n```\n\n\n# 完整代码\n``` cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 10000000+100;\nconst double pi = acos(-1);\n\n//实现复数类\nstruct Complex{\n    double r,v;//实部和虚部\n    Complex(){\n        r = v = 0;\n    }\n    Complex(double a,double b){\n        r = a; v = b;\n    }\n    \n    Complex operator+(const Complex &p) const{\n        return Complex(r+p.r,v+p.v);\n    }\n    Complex operator-(const Complex &p) const{\n        return Complex(r-p.r,v-p.v);\n    }\n    Complex operator*(const Complex &p) const{\n        return Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); \n    }\n    \n};\n\nComplex a[maxn],b[maxn];\n\nint rev[maxn];\n\n//DFT和IDFT\nvoid fft(Complex * A,int n,int type){\n    \n    for(int i = 0;i<n;i++)\n        if(rev[i] < i ) swap(A[i],A[rev[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){//the length of doing \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){\n            int m = len>>1;\n            \n            Complex w(1,0);\n            \n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;\n                w = w*wn; \n            }\n            \n        }\n    }\n}\n\n//读入优化\ninline int read(){\n    int x = 0;\n    char c =getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0' && c<='9' ){\n        x = x*10 + c-'0';\n        c = getchar();\n    }\n    return x;\n    \n}\n\nint main(){\n    int n,m;\n    n =  read();\n    m = read();\n\n    for(int i = 0;i<=n;i++){\n        a[i].r = read();\n    }\n    \n    for(int i = 0;i<=m;i++){\n        b[i].r = read();\n    }\n    \n    \n    //将项数补齐到2的整数次幂\n    \n    int N = 1;\n    int l = 0;\n    while(N<=n+m) N <<= 1,l++;\n    \n    //求rev\n    for(int i =0;i<N;i++)\n        rev[i] = (rev[i>>1]>>1) | ((i&1) << (l-1) );\n    \n    fft(a,N,1);\n    fft(b,N,1);\n    \n    for(int i = 0;i<N;i++)\n        a[i] = a[i]*b[i];\n    fft(a,N,-1);\n    \n    for(int i =0;i<=n+m;i++)\n        printf(\"%d \",(int)(a[i].r/N+0.5));//+0.5实现四舍五入\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n\n\n","slug":"FFT学习笔记","published":1,"updated":"2021-03-06T11:34:34.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn88xcoi00006zwn0sw82fei","content":"<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h3 id=\"系数表达\"><a href=\"#系数表达\" class=\"headerlink\" title=\"系数表达\"></a>系数表达</h3><script type=\"math/tex; mode=display\">A(x) = \\sum_{i=0}^{n-1}a_ix^i</script><h3 id=\"点值表达\"><a href=\"#点值表达\" class=\"headerlink\" title=\"点值表达\"></a>点值表达</h3><script type=\"math/tex; mode=display\">\\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\}</script><h1 id=\"算法概括\"><a href=\"#算法概括\" class=\"headerlink\" title=\"算法概括\"></a>算法概括</h1><p>FFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。<br>主要过程为：</p>\n<ol>\n<li>计算原有两个多项式在单位复数根下的点值。（DFT）</li>\n<li>将两个多项式的点值相乘。得到乘积的点值。</li>\n<li>将点值还原为系数表达。（IDFT）</li>\n</ol>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h3 id=\"n-次单位复数根\"><a href=\"#n-次单位复数根\" class=\"headerlink\" title=\"$n$次单位复数根\"></a>$n$次单位复数根</h3><script type=\"math/tex; mode=display\">w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1</script><h3 id=\"单位根的性质\"><a href=\"#单位根的性质\" class=\"headerlink\" title=\"单位根的性质\"></a>单位根的性质</h3><h4 id=\"消去定理\"><a href=\"#消去定理\" class=\"headerlink\" title=\"消去定理\"></a>消去定理</h4><script type=\"math/tex; mode=display\">w_{2n}^{2k} = w_n^k</script><h4 id=\"折半定理\"><a href=\"#折半定理\" class=\"headerlink\" title=\"折半定理\"></a>折半定理</h4><p>$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。</p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><script type=\"math/tex; mode=display\">w_n^{k+n/2} = -w_n^k</script><script type=\"math/tex; mode=display\">w_n^{k+n} = w_n^{k}</script><h1 id=\"离散傅利叶变换（DFT）\"><a href=\"#离散傅利叶变换（DFT）\" class=\"headerlink\" title=\"离散傅利叶变换（DFT）\"></a>离散傅利叶变换（DFT）</h1><p>设多项式<script type=\"math/tex\">A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}</script><br>他的所有的偶数次项系数组成新多项式  </p>\n<script type=\"math/tex; mode=display\">A_0(x) = a_0 + a_2x + a_4x^2 + ...</script><script type=\"math/tex; mode=display\">A_1(x) = a_1 + a_3x + a_4x^2 + ...</script><p>则显然有<script type=\"math/tex\">A(x) = A_0(x^2)+xA_1(x^2)</script></p>\n<script type=\"math/tex; mode=display\">A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k})</script><script type=\"math/tex; mode=display\">A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k})</script><p>利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，<br>递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。<br>总时间复杂度为$O(nlogn)$</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DFT(A,n) &#x2F;&#x2F;A为系数数组，n为项数，且n为2的整数次幂（可在）</span><br><span class=\"line\">if n &#x3D; 1</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">m &#x3D; n&#x2F;2</span><br><span class=\"line\">for i &#x3D; 0 to m</span><br><span class=\"line\">    A0[i] &#x3D; A[2*i]</span><br><span class=\"line\">    A1[i] &#x3D; A[2*i+1]</span><br><span class=\"line\"></span><br><span class=\"line\">DFT(A0,n)</span><br><span class=\"line\">DFT(A1,n)</span><br><span class=\"line\"></span><br><span class=\"line\">w &#x3D; 1</span><br><span class=\"line\">wn &#x3D; cos(2pi&#x2F;n) + i*sin(2pi&#x2F;n)</span><br><span class=\"line\">for i &#x3D; 0 to m-1</span><br><span class=\"line\">    A[i] &#x3D; A0[i] + w*A1[i]</span><br><span class=\"line\">    A[i+m] &#x3D; A0[i] - w*A1[i]</span><br><span class=\"line\">    w &#x3D; w*wn</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h3><p>将系数数组排成$log_2n$次奇偶分离操作后的顺序<br>这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列<br>每个数翻转后的数可以递推求出。<br>C++代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span>&#125;<span class=\"comment\">//实现复数类，此外省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. rev 的计算 （放在main函数中）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &gt;&gt; l<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> DFT(Complex *A,<span class=\"keyword\">int</span> n )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = a[j+i];</span><br><span class=\"line\">                Complex v = a[j+i+m];</span><br><span class=\"line\">                a[j+i] = u + w*v;</span><br><span class=\"line\">                a[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"离散傅利叶逆变换（IDFT）\"><a href=\"#离散傅利叶逆变换（IDFT）\" class=\"headerlink\" title=\"离散傅利叶逆变换（IDFT）\"></a>离散傅利叶逆变换（IDFT）</h1><p>将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。<br>代码可以与DFT合并 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex *A,<span class=\"keyword\">int</span> n ,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//type = 1表示DFT</span></span><br><span class=\"line\">    <span class=\"comment\">//type = -1 表示IDFT</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000000</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现复数类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r,v;<span class=\"comment\">//实部和虚部</span></span><br><span class=\"line\">    Complex()&#123;</span><br><span class=\"line\">        r = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> a,<span class=\"keyword\">double</span> b)&#123;</span><br><span class=\"line\">        r = a; v = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r+p.r,v+p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r-p.r,v-p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DFT和IDFT</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex * A,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rev[i] &lt; i ) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123;<span class=\"comment\">//the length of doing </span></span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;</span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读入优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c =getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>) c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class=\"string\">&#x27;9&#x27;</span> )&#123;</span><br><span class=\"line\">        x = x*<span class=\"number\">10</span> + c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n =  read();</span><br><span class=\"line\">    m = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        b[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将项数补齐到2的整数次幂</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(N&lt;=n+m) N &lt;&lt;= <span class=\"number\">1</span>,l++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//求rev</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (l<span class=\"number\">-1</span>) );</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        a[i] = a[i]*b[i];</span><br><span class=\"line\">    fft(a,N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;=n+m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,(<span class=\"keyword\">int</span>)(a[i].r/N+<span class=\"number\">0.5</span>));<span class=\"comment\">//+0.5实现四舍五入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h3 id=\"系数表达\"><a href=\"#系数表达\" class=\"headerlink\" title=\"系数表达\"></a>系数表达</h3><script type=\"math/tex; mode=display\">A(x) = \\sum_{i=0}^{n-1}a_ix^i</script><h3 id=\"点值表达\"><a href=\"#点值表达\" class=\"headerlink\" title=\"点值表达\"></a>点值表达</h3><script type=\"math/tex; mode=display\">\\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\}</script><h1 id=\"算法概括\"><a href=\"#算法概括\" class=\"headerlink\" title=\"算法概括\"></a>算法概括</h1><p>FFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。<br>主要过程为：</p>\n<ol>\n<li>计算原有两个多项式在单位复数根下的点值。（DFT）</li>\n<li>将两个多项式的点值相乘。得到乘积的点值。</li>\n<li>将点值还原为系数表达。（IDFT）</li>\n</ol>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h3 id=\"n-次单位复数根\"><a href=\"#n-次单位复数根\" class=\"headerlink\" title=\"$n$次单位复数根\"></a>$n$次单位复数根</h3><script type=\"math/tex; mode=display\">w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1</script><h3 id=\"单位根的性质\"><a href=\"#单位根的性质\" class=\"headerlink\" title=\"单位根的性质\"></a>单位根的性质</h3><h4 id=\"消去定理\"><a href=\"#消去定理\" class=\"headerlink\" title=\"消去定理\"></a>消去定理</h4><script type=\"math/tex; mode=display\">w_{2n}^{2k} = w_n^k</script><h4 id=\"折半定理\"><a href=\"#折半定理\" class=\"headerlink\" title=\"折半定理\"></a>折半定理</h4><p>$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。</p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><script type=\"math/tex; mode=display\">w_n^{k+n/2} = -w_n^k</script><script type=\"math/tex; mode=display\">w_n^{k+n} = w_n^{k}</script><h1 id=\"离散傅利叶变换（DFT）\"><a href=\"#离散傅利叶变换（DFT）\" class=\"headerlink\" title=\"离散傅利叶变换（DFT）\"></a>离散傅利叶变换（DFT）</h1><p>设多项式<script type=\"math/tex\">A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}</script><br>他的所有的偶数次项系数组成新多项式  </p>\n<script type=\"math/tex; mode=display\">A_0(x) = a_0 + a_2x + a_4x^2 + ...</script><script type=\"math/tex; mode=display\">A_1(x) = a_1 + a_3x + a_4x^2 + ...</script><p>则显然有<script type=\"math/tex\">A(x) = A_0(x^2)+xA_1(x^2)</script></p>\n<script type=\"math/tex; mode=display\">A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k})</script><script type=\"math/tex; mode=display\">A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k})</script><p>利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，<br>递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。<br>总时间复杂度为$O(nlogn)$</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DFT(A,n) &#x2F;&#x2F;A为系数数组，n为项数，且n为2的整数次幂（可在）</span><br><span class=\"line\">if n &#x3D; 1</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">m &#x3D; n&#x2F;2</span><br><span class=\"line\">for i &#x3D; 0 to m</span><br><span class=\"line\">    A0[i] &#x3D; A[2*i]</span><br><span class=\"line\">    A1[i] &#x3D; A[2*i+1]</span><br><span class=\"line\"></span><br><span class=\"line\">DFT(A0,n)</span><br><span class=\"line\">DFT(A1,n)</span><br><span class=\"line\"></span><br><span class=\"line\">w &#x3D; 1</span><br><span class=\"line\">wn &#x3D; cos(2pi&#x2F;n) + i*sin(2pi&#x2F;n)</span><br><span class=\"line\">for i &#x3D; 0 to m-1</span><br><span class=\"line\">    A[i] &#x3D; A0[i] + w*A1[i]</span><br><span class=\"line\">    A[i+m] &#x3D; A0[i] - w*A1[i]</span><br><span class=\"line\">    w &#x3D; w*wn</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h3><p>将系数数组排成$log_2n$次奇偶分离操作后的顺序<br>这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列<br>每个数翻转后的数可以递推求出。<br>C++代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span>&#125;<span class=\"comment\">//实现复数类，此外省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. rev 的计算 （放在main函数中）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &gt;&gt; l<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> DFT(Complex *A,<span class=\"keyword\">int</span> n )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = a[j+i];</span><br><span class=\"line\">                Complex v = a[j+i+m];</span><br><span class=\"line\">                a[j+i] = u + w*v;</span><br><span class=\"line\">                a[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"离散傅利叶逆变换（IDFT）\"><a href=\"#离散傅利叶逆变换（IDFT）\" class=\"headerlink\" title=\"离散傅利叶逆变换（IDFT）\"></a>离散傅利叶逆变换（IDFT）</h1><p>将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。<br>代码可以与DFT合并 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex *A,<span class=\"keyword\">int</span> n ,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//type = 1表示DFT</span></span><br><span class=\"line\">    <span class=\"comment\">//type = -1 表示IDFT</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000000</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现复数类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r,v;<span class=\"comment\">//实部和虚部</span></span><br><span class=\"line\">    Complex()&#123;</span><br><span class=\"line\">        r = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> a,<span class=\"keyword\">double</span> b)&#123;</span><br><span class=\"line\">        r = a; v = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r+p.r,v+p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r-p.r,v-p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DFT和IDFT</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex * A,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rev[i] &lt; i ) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123;<span class=\"comment\">//the length of doing </span></span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;</span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读入优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c =getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>) c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class=\"string\">&#x27;9&#x27;</span> )&#123;</span><br><span class=\"line\">        x = x*<span class=\"number\">10</span> + c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n =  read();</span><br><span class=\"line\">    m = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        b[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将项数补齐到2的整数次幂</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(N&lt;=n+m) N &lt;&lt;= <span class=\"number\">1</span>,l++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//求rev</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (l<span class=\"number\">-1</span>) );</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        a[i] = a[i]*b[i];</span><br><span class=\"line\">    fft(a,N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;=n+m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,(<span class=\"keyword\">int</span>)(a[i].r/N+<span class=\"number\">0.5</span>));<span class=\"comment\">//+0.5实现四舍五入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Lucas定理教程","mathjax":true,"date":"2021-03-06T11:35:45.000Z","_content":"\n\n# Lucas定理\n若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n若如果把$n$写成$p$进制数$n_1n_2...n_k$,$m$写成$p$进制数$m_1m_2...m_k$,则  \n$$ C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p) $$  \n当需要计算组合数并取模时,可以考虑使用Lucas定理.\n\n## 证明\n证明暂时留坑，以后再填。~~我还不会.~~\n\n# 例题\n## （1）Luogu P3807, 模板-卢卡斯定理\n[题目链接](https://www.luogu.com.cn/problem/P3807)  \n\n### 分析\n这是卢卡斯定理模板题.\n$$C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}  $$  \n考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。  \n但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。  \n考虑Lucas定理，  \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n右边第一项中的$$n \\ mod \\ p$$和$$m \\ mod \\ p$$一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 \n\n### 代码\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nint main() {\n    int T;\n    cin >> T;\n    while (T--) {\n        LL n, m, p;\n        cin >> n >> m >> p;\n        cout << Lucas(n + m, m, p) << endl;\n    }\n    return 0;\n}\n```\n\n## (2) Luogu P2480 古代猪文 \n[题目链接](https://www.luogu.com.cn/problem/P2480) \n### 题意\n给定整数$n,q$，求  \n$$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $$\n的值.（999911659是质数）.\n### 分析\n根据费马小定理：$p$为质数且$a,p$互质时,有\n$$ a^{p - 1} \\equiv 1 (mod \\ p)  $$  \n推论\n$$ a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p) $$\n所以，要计算$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $，只需先算出$x = \\sum_{d|n}C_n^d \\ mod \\ (999911658)$,再计算$q^x \\ mod \\ 999911659$.    \n所以现在只需考虑如何去计算$x$.  \n对于$n$的每个约数$d$,要计算$C_n^d \\ mod \\ 999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。  \n将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.  \n可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$  \n最后，用中国剩余定理求解线性同余方程组：  \n$$\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}$$\n求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d \\ mod \\ 999911658 $的值。 用快速幂算出 $$q^x \\ mod \\ 999911659$$ 的值即为最终结果.\n另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.\n\n实现细节见代码。\n\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nconst LL P = 999911659;\n\n//a[1] - a[4]为 999911658的四个质因数。\nLL a[] = {0, 2, 3, 4679, 35617};\nLL b[5];\nint main() {\n    LL n, q;\n    cin >> n >> q;\n\n    if (q % P == 0) { // q是p的倍数，直接输出0\n        cout << 0 << endl;\n        return 0;\n    }\n\n    for (int i = 1; i <= 4; i++) {\n        for (int d = 1; d * d <= n; d++) {\n            if (n % d == 0) {\n                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];\n                if (d * d != n) {\n                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];\n                }\n            }\n        }\n    }\n    //用中国剩余定理求解同余方程组\n    LL x = 0;\n    for (int i = 1; i <= 4; i++) {\n        LL M = (P - 1) / a[i];\n        x = (x + (b[i] * M % (P - 1)) * pow_mod(M, a[i] - 2, a[i])) % (P - 1);\n    }\n    cout << pow_mod(q, x, P) << endl;\n\n    return 0;\n}\n```\n\n","source":"_posts/Lucas定理.md","raw":"---\ntitle: Lucas定理教程\nmathjax: true\ndate: 2021-03-06 19:35:45\ntags:\n---\n\n\n# Lucas定理\n若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n若如果把$n$写成$p$进制数$n_1n_2...n_k$,$m$写成$p$进制数$m_1m_2...m_k$,则  \n$$ C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p) $$  \n当需要计算组合数并取模时,可以考虑使用Lucas定理.\n\n## 证明\n证明暂时留坑，以后再填。~~我还不会.~~\n\n# 例题\n## （1）Luogu P3807, 模板-卢卡斯定理\n[题目链接](https://www.luogu.com.cn/problem/P3807)  \n\n### 分析\n这是卢卡斯定理模板题.\n$$C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}  $$  \n考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。  \n但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。  \n考虑Lucas定理，  \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n右边第一项中的$$n \\ mod \\ p$$和$$m \\ mod \\ p$$一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 \n\n### 代码\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nint main() {\n    int T;\n    cin >> T;\n    while (T--) {\n        LL n, m, p;\n        cin >> n >> m >> p;\n        cout << Lucas(n + m, m, p) << endl;\n    }\n    return 0;\n}\n```\n\n## (2) Luogu P2480 古代猪文 \n[题目链接](https://www.luogu.com.cn/problem/P2480) \n### 题意\n给定整数$n,q$，求  \n$$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $$\n的值.（999911659是质数）.\n### 分析\n根据费马小定理：$p$为质数且$a,p$互质时,有\n$$ a^{p - 1} \\equiv 1 (mod \\ p)  $$  \n推论\n$$ a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p) $$\n所以，要计算$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $，只需先算出$x = \\sum_{d|n}C_n^d \\ mod \\ (999911658)$,再计算$q^x \\ mod \\ 999911659$.    \n所以现在只需考虑如何去计算$x$.  \n对于$n$的每个约数$d$,要计算$C_n^d \\ mod \\ 999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。  \n将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.  \n可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$  \n最后，用中国剩余定理求解线性同余方程组：  \n$$\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}$$\n求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d \\ mod \\ 999911658 $的值。 用快速幂算出 $$q^x \\ mod \\ 999911659$$ 的值即为最终结果.\n另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.\n\n实现细节见代码。\n\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nconst LL P = 999911659;\n\n//a[1] - a[4]为 999911658的四个质因数。\nLL a[] = {0, 2, 3, 4679, 35617};\nLL b[5];\nint main() {\n    LL n, q;\n    cin >> n >> q;\n\n    if (q % P == 0) { // q是p的倍数，直接输出0\n        cout << 0 << endl;\n        return 0;\n    }\n\n    for (int i = 1; i <= 4; i++) {\n        for (int d = 1; d * d <= n; d++) {\n            if (n % d == 0) {\n                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];\n                if (d * d != n) {\n                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];\n                }\n            }\n        }\n    }\n    //用中国剩余定理求解同余方程组\n    LL x = 0;\n    for (int i = 1; i <= 4; i++) {\n        LL M = (P - 1) / a[i];\n        x = (x + (b[i] * M % (P - 1)) * pow_mod(M, a[i] - 2, a[i])) % (P - 1);\n    }\n    cout << pow_mod(q, x, P) << endl;\n\n    return 0;\n}\n```\n\n","slug":"Lucas定理","published":1,"updated":"2021-03-24T14:42:12.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn88xcon00016zwn7m2r3sw6","content":"<h1 id=\"Lucas定理\"><a href=\"#Lucas定理\" class=\"headerlink\" title=\"Lucas定理\"></a>Lucas定理</h1><p>若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>若如果把$n$写成$p$进制数$n_1n_2…n_k$,$m$写成$p$进制数$m_1m_2…m_k$,则  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p)</script><p>当需要计算组合数并取模时,可以考虑使用Lucas定理.</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>证明暂时留坑，以后再填。<del>我还不会.</del></p>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><h2 id=\"（1）Luogu-P3807-模板-卢卡斯定理\"><a href=\"#（1）Luogu-P3807-模板-卢卡斯定理\" class=\"headerlink\" title=\"（1）Luogu P3807, 模板-卢卡斯定理\"></a>（1）Luogu P3807, 模板-卢卡斯定理</h2><p><a href=\"https://www.luogu.com.cn/problem/P3807\">题目链接</a>  </p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这是卢卡斯定理模板题.</p>\n<script type=\"math/tex; mode=display\">C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}</script><p>考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。<br>但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。<br>考虑Lucas定理，  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>右边第一项中的<script type=\"math/tex\">n \\ mod \\ p</script>和<script type=\"math/tex\">m \\ mod \\ p</script>一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 </p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        LL n, m, p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; Lucas(n + m, m, p) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Luogu-P2480-古代猪文\"><a href=\"#2-Luogu-P2480-古代猪文\" class=\"headerlink\" title=\"(2) Luogu P2480 古代猪文\"></a>(2) Luogu P2480 古代猪文</h2><p><a href=\"https://www.luogu.com.cn/problem/P2480\">题目链接</a> </p>\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>给定整数$n,q$，求  </p>\n<script type=\"math/tex; mode=display\">q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659</script><p>的值.（999911659是质数）.</p>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>根据费马小定理：$p$为质数且$a,p$互质时,有</p>\n<script type=\"math/tex; mode=display\">a^{p - 1} \\equiv 1 (mod \\ p)</script><p>推论</p>\n<script type=\"math/tex; mode=display\">a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p)</script><p>所以，要计算$ q^{\\sum_{d|n}C_n^d }  mod  999911659 $，只需先算出$x = \\sum_{d|n}C_n^d  mod  (999911658)$,再计算$q^x  mod  999911659$.<br>所以现在只需考虑如何去计算$x$.<br>对于$n$的每个约数$d$,要计算$C_n^d  mod  999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。<br>将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.<br>可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$<br>最后，用中国剩余定理求解线性同余方程组：  </p>\n<script type=\"math/tex; mode=display\">\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}</script><p>求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d  mod  999911658 $的值。 用快速幂算出 <script type=\"math/tex\">q^x \\ mod \\ 999911659</script> 的值即为最终结果.<br>另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.</p>\n<p>实现细节见代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LL P = <span class=\"number\">999911659</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a[1] - a[4]为 999911658的四个质因数。</span></span><br><span class=\"line\">LL a[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4679</span>, <span class=\"number\">35617</span>&#125;;</span><br><span class=\"line\">LL b[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LL n, q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q % P == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// q是p的倍数，直接输出0</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d * d &lt;= n; d++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % d == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d * d != n) &#123;</span><br><span class=\"line\">                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//用中国剩余定理求解同余方程组</span></span><br><span class=\"line\">    LL x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        LL M = (P - <span class=\"number\">1</span>) / a[i];</span><br><span class=\"line\">        x = (x + (b[i] * M % (P - <span class=\"number\">1</span>)) * pow_mod(M, a[i] - <span class=\"number\">2</span>, a[i])) % (P - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; pow_mod(q, x, P) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Lucas定理\"><a href=\"#Lucas定理\" class=\"headerlink\" title=\"Lucas定理\"></a>Lucas定理</h1><p>若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>若如果把$n$写成$p$进制数$n_1n_2…n_k$,$m$写成$p$进制数$m_1m_2…m_k$,则  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p)</script><p>当需要计算组合数并取模时,可以考虑使用Lucas定理.</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>证明暂时留坑，以后再填。<del>我还不会.</del></p>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><h2 id=\"（1）Luogu-P3807-模板-卢卡斯定理\"><a href=\"#（1）Luogu-P3807-模板-卢卡斯定理\" class=\"headerlink\" title=\"（1）Luogu P3807, 模板-卢卡斯定理\"></a>（1）Luogu P3807, 模板-卢卡斯定理</h2><p><a href=\"https://www.luogu.com.cn/problem/P3807\">题目链接</a>  </p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这是卢卡斯定理模板题.</p>\n<script type=\"math/tex; mode=display\">C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}</script><p>考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。<br>但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。<br>考虑Lucas定理，  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>右边第一项中的<script type=\"math/tex\">n \\ mod \\ p</script>和<script type=\"math/tex\">m \\ mod \\ p</script>一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 </p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        LL n, m, p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; Lucas(n + m, m, p) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Luogu-P2480-古代猪文\"><a href=\"#2-Luogu-P2480-古代猪文\" class=\"headerlink\" title=\"(2) Luogu P2480 古代猪文\"></a>(2) Luogu P2480 古代猪文</h2><p><a href=\"https://www.luogu.com.cn/problem/P2480\">题目链接</a> </p>\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>给定整数$n,q$，求  </p>\n<script type=\"math/tex; mode=display\">q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659</script><p>的值.（999911659是质数）.</p>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>根据费马小定理：$p$为质数且$a,p$互质时,有</p>\n<script type=\"math/tex; mode=display\">a^{p - 1} \\equiv 1 (mod \\ p)</script><p>推论</p>\n<script type=\"math/tex; mode=display\">a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p)</script><p>所以，要计算$ q^{\\sum_{d|n}C_n^d }  mod  999911659 $，只需先算出$x = \\sum_{d|n}C_n^d  mod  (999911658)$,再计算$q^x  mod  999911659$.<br>所以现在只需考虑如何去计算$x$.<br>对于$n$的每个约数$d$,要计算$C_n^d  mod  999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。<br>将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.<br>可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$<br>最后，用中国剩余定理求解线性同余方程组：  </p>\n<script type=\"math/tex; mode=display\">\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}</script><p>求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d  mod  999911658 $的值。 用快速幂算出 <script type=\"math/tex\">q^x \\ mod \\ 999911659</script> 的值即为最终结果.<br>另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.</p>\n<p>实现细节见代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LL P = <span class=\"number\">999911659</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a[1] - a[4]为 999911658的四个质因数。</span></span><br><span class=\"line\">LL a[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4679</span>, <span class=\"number\">35617</span>&#125;;</span><br><span class=\"line\">LL b[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LL n, q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q % P == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// q是p的倍数，直接输出0</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d * d &lt;= n; d++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % d == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d * d != n) &#123;</span><br><span class=\"line\">                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//用中国剩余定理求解同余方程组</span></span><br><span class=\"line\">    LL x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        LL M = (P - <span class=\"number\">1</span>) / a[i];</span><br><span class=\"line\">        x = (x + (b[i] * M % (P - <span class=\"number\">1</span>)) * pow_mod(M, a[i] - <span class=\"number\">2</span>, a[i])) % (P - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; pow_mod(q, x, P) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"2021同济校赛E题“不平衡的字符串”题解","mathjax":true,"date":"2021-05-29T15:16:56.000Z","_content":"## 涉及算法\n- 树状数组\n- 离散化\n\n## 题目大意\n题目链接https://ac.nowcoder.com/acm/contest/16832/E  \n给出一个长度为$n$的字符串$S$,以及$m$个约束条件。  \n每个约束条件格式为$s_i \\ a_i \\ b_i \\ c_i \\ d_i $, 表示要求字符$s_i$中字符串中所占的比例$k$满足$\\frac{a}{b} < k \\le \\frac{c}{d}$. 保证$\\frac{a}{b} \\le \\frac{a}{b} \\le 1$，且对每个字符至多有一个约束条件。  \n求S的所有子串中，至少满足一个约束条件的子串的个数。  \n例如,给出长度为6的字符串aabaab和两个约束条件。  \n约束条件1: a 1 2 1 1  \n约束条件2: b 1 2 1 1  \n字符串S共有21个子串， 其中只有\"ab\", \"ba\", \"baab\" 不满足任何一个约束条件，其余17个子串至少满足一个约束条件。  \n\n\n\n## 题解\n首先注意到$\\frac{a}{b} \\ge \\frac12$, 约束条件要求单个字符所占的比例大于$\\frac ab$,同一个字符串中不可能有两个字符的比例大于$\\frac12$，所以每个子串至多只能满足一个约束条件，不存在同一个子串同时满足多个约束条件的情况。因此，只要依次计算出满足每个约束条件的子串数目，直接累加就能不重不漏地统计出“至少满足一个约束条件的子串数目”。  \n  \n现在依次考虑每个约束条件，要求字符$s_i$在子串中所占的比例在$(\\frac ab, \\frac cd]$。用$p_i$表示在字符串$S$的前$i$个字符中字符$s_i$的个数。  \n考虑由$S$的第i的字符到第j个字符构成的子串，该子串长度为$j - (i - 1)$, 其中字符$s_i$的个数为$p_j - p_{i - 1}$, 故$s_i$的比例$k = \\frac{p_j - p_{i - 1}}{j - (i - 1)}$。约束条件可以写成  \n$$\\frac ab < \\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd$$ \n先考虑右边部分$\\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd$,   \n可化为$c(i - 1) - dp_{i - 1} \\le cj - dp_j$。  \n设$f_i = ci - dp_i$, 则上式可以写为$f_{i - 1} \\le f_j$  \n可以使用权值树状数组来维护满足上式的子串数量,具体操作如下  \n1. 因为$f_i$值可能很大，且可能出现负数，需要先将$f_i$离散化  \n2. 从$i = 0$到$i = n$依次扫描每个$f_i$:\n    - 向结果累加sum($f_i$)\n    - 将树状数组中位置$f_i$的值加1, add($f_i$, 1)   \n\n这样得到的结果就是满足$k \\le \\frac cd$的子串个数, 再用相同的方式求出满足$k \\le \\frac{a}{b}$的子串个数，相减即可得到满足约束条件的子串个数。具体实现细节请参考代码。  \n\n\n## 代码\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 50000 + 100;\n\nchar s[maxn];\nint p[maxn];\n\nint n;\n\nstruct Tree {\n    inline int lowbit(int x) {\n        return x & -x;\n    }\n    int C[maxn];\n\n    void add(int p) {\n        for (; p <= n; p += lowbit(p))\n            C[p]++;\n    }\n\n    int sum(int p) {\n        int res = 0;\n        for (; p; p -= lowbit(p))\n            res += C[p];\n        return res;\n    }\n} T1, T2;\n\nint val1[maxn], val2[maxn];\nvector<int> nums;\n\nint main() {\n\n    scanf(\"%d\", &n);\n    scanf(\"%s\", s + 1);\n\n    int m;\n    scanf(\"%d\", &m);\n    char ch;\n    int a, b, c, d;\n\n    long long ans = 0;\n    while (m--) {\n        getchar();\n        scanf(\"%c%d%d%d%d\", &ch, &a, &b, &c, &d);\n\n        for (int i = 1; i <= n; i++)\n            p[i] = p[i - 1] + (s[i] == ch);\n\n        // val1[i] = ai - b * p[i] , 离散化\n        for (int i = 0; i <= n; i++) {\n            val1[i] = a * i - b * p[i];\n            nums.push_back(val1[i]);\n        }\n        sort(nums.begin(), nums.end());\n        nums.erase(unique(nums.begin(), nums.end()), nums.end());\n        for (int i = 0; i <= n; i++)\n            val1[i] = lower_bound(nums.begin(), nums.end(), val1[i]) - nums.begin() + 1;\n        nums.clear();\n        \n        // val2[i] = ci - d * p[i]\n        for (int i = 0; i <= n; i++) {\n            val2[i] = c * i - d * p[i];\n            nums.push_back(val2[i]);\n        }\n\n        sort(nums.begin(), nums.end());\n        nums.erase(unique(nums.begin(), nums.end()), nums.end());\n        for (int i = 0; i <= n; i++)\n            val2[i] = lower_bound(nums.begin(), nums.end(), val2[i]) - nums.begin() + 1;\n        nums.clear();\n\n        memset(T1.C, 0, 4 * maxn);\n        memset(T2.C, 0, 4 * maxn);\n        T1.add(val1[0]);\n        T2.add(val2[0]);\n        for (int i = 1; i <= n; i++) {\n            int t1 = T1.sum(val1[i]);\n            int t2 = T2.sum(val2[i]);\n            ans += t2 - t1;\n            T1.add(val1[i]);\n            T2.add(val2[i]);\n        }\n    }\n\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}\n```","source":"_posts/同济校赛2021E题“不平衡的字符串”题解.md","raw":"---\ntitle: 2021同济校赛E题“不平衡的字符串”题解\nmathjax: true\ndate: 2021-05-29 23:16:56\ntags:\n---\n## 涉及算法\n- 树状数组\n- 离散化\n\n## 题目大意\n题目链接https://ac.nowcoder.com/acm/contest/16832/E  \n给出一个长度为$n$的字符串$S$,以及$m$个约束条件。  \n每个约束条件格式为$s_i \\ a_i \\ b_i \\ c_i \\ d_i $, 表示要求字符$s_i$中字符串中所占的比例$k$满足$\\frac{a}{b} < k \\le \\frac{c}{d}$. 保证$\\frac{a}{b} \\le \\frac{a}{b} \\le 1$，且对每个字符至多有一个约束条件。  \n求S的所有子串中，至少满足一个约束条件的子串的个数。  \n例如,给出长度为6的字符串aabaab和两个约束条件。  \n约束条件1: a 1 2 1 1  \n约束条件2: b 1 2 1 1  \n字符串S共有21个子串， 其中只有\"ab\", \"ba\", \"baab\" 不满足任何一个约束条件，其余17个子串至少满足一个约束条件。  \n\n\n\n## 题解\n首先注意到$\\frac{a}{b} \\ge \\frac12$, 约束条件要求单个字符所占的比例大于$\\frac ab$,同一个字符串中不可能有两个字符的比例大于$\\frac12$，所以每个子串至多只能满足一个约束条件，不存在同一个子串同时满足多个约束条件的情况。因此，只要依次计算出满足每个约束条件的子串数目，直接累加就能不重不漏地统计出“至少满足一个约束条件的子串数目”。  \n  \n现在依次考虑每个约束条件，要求字符$s_i$在子串中所占的比例在$(\\frac ab, \\frac cd]$。用$p_i$表示在字符串$S$的前$i$个字符中字符$s_i$的个数。  \n考虑由$S$的第i的字符到第j个字符构成的子串，该子串长度为$j - (i - 1)$, 其中字符$s_i$的个数为$p_j - p_{i - 1}$, 故$s_i$的比例$k = \\frac{p_j - p_{i - 1}}{j - (i - 1)}$。约束条件可以写成  \n$$\\frac ab < \\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd$$ \n先考虑右边部分$\\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd$,   \n可化为$c(i - 1) - dp_{i - 1} \\le cj - dp_j$。  \n设$f_i = ci - dp_i$, 则上式可以写为$f_{i - 1} \\le f_j$  \n可以使用权值树状数组来维护满足上式的子串数量,具体操作如下  \n1. 因为$f_i$值可能很大，且可能出现负数，需要先将$f_i$离散化  \n2. 从$i = 0$到$i = n$依次扫描每个$f_i$:\n    - 向结果累加sum($f_i$)\n    - 将树状数组中位置$f_i$的值加1, add($f_i$, 1)   \n\n这样得到的结果就是满足$k \\le \\frac cd$的子串个数, 再用相同的方式求出满足$k \\le \\frac{a}{b}$的子串个数，相减即可得到满足约束条件的子串个数。具体实现细节请参考代码。  \n\n\n## 代码\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 50000 + 100;\n\nchar s[maxn];\nint p[maxn];\n\nint n;\n\nstruct Tree {\n    inline int lowbit(int x) {\n        return x & -x;\n    }\n    int C[maxn];\n\n    void add(int p) {\n        for (; p <= n; p += lowbit(p))\n            C[p]++;\n    }\n\n    int sum(int p) {\n        int res = 0;\n        for (; p; p -= lowbit(p))\n            res += C[p];\n        return res;\n    }\n} T1, T2;\n\nint val1[maxn], val2[maxn];\nvector<int> nums;\n\nint main() {\n\n    scanf(\"%d\", &n);\n    scanf(\"%s\", s + 1);\n\n    int m;\n    scanf(\"%d\", &m);\n    char ch;\n    int a, b, c, d;\n\n    long long ans = 0;\n    while (m--) {\n        getchar();\n        scanf(\"%c%d%d%d%d\", &ch, &a, &b, &c, &d);\n\n        for (int i = 1; i <= n; i++)\n            p[i] = p[i - 1] + (s[i] == ch);\n\n        // val1[i] = ai - b * p[i] , 离散化\n        for (int i = 0; i <= n; i++) {\n            val1[i] = a * i - b * p[i];\n            nums.push_back(val1[i]);\n        }\n        sort(nums.begin(), nums.end());\n        nums.erase(unique(nums.begin(), nums.end()), nums.end());\n        for (int i = 0; i <= n; i++)\n            val1[i] = lower_bound(nums.begin(), nums.end(), val1[i]) - nums.begin() + 1;\n        nums.clear();\n        \n        // val2[i] = ci - d * p[i]\n        for (int i = 0; i <= n; i++) {\n            val2[i] = c * i - d * p[i];\n            nums.push_back(val2[i]);\n        }\n\n        sort(nums.begin(), nums.end());\n        nums.erase(unique(nums.begin(), nums.end()), nums.end());\n        for (int i = 0; i <= n; i++)\n            val2[i] = lower_bound(nums.begin(), nums.end(), val2[i]) - nums.begin() + 1;\n        nums.clear();\n\n        memset(T1.C, 0, 4 * maxn);\n        memset(T2.C, 0, 4 * maxn);\n        T1.add(val1[0]);\n        T2.add(val2[0]);\n        for (int i = 1; i <= n; i++) {\n            int t1 = T1.sum(val1[i]);\n            int t2 = T2.sum(val2[i]);\n            ans += t2 - t1;\n            T1.add(val1[i]);\n            T2.add(val2[i]);\n        }\n    }\n\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}\n```","slug":"同济校赛2021E题“不平衡的字符串”题解","published":1,"updated":"2021-06-04T12:08:20.776Z","_id":"ckpe59b5d0000niwn5awd8ehu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"涉及算法\"><a href=\"#涉及算法\" class=\"headerlink\" title=\"涉及算法\"></a>涉及算法</h2><ul>\n<li>树状数组</li>\n<li>离散化</li>\n</ul>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>题目链接<a href=\"https://ac.nowcoder.com/acm/contest/16832/E\">https://ac.nowcoder.com/acm/contest/16832/E</a><br>给出一个长度为$n$的字符串$S$,以及$m$个约束条件。<br>每个约束条件格式为$s_i  a_i  b_i  c_i  d_i $, 表示要求字符$s_i$中字符串中所占的比例$k$满足$\\frac{a}{b} &lt; k \\le \\frac{c}{d}$. 保证$\\frac{a}{b} \\le \\frac{a}{b} \\le 1$，且对每个字符至多有一个约束条件。<br>求S的所有子串中，至少满足一个约束条件的子串的个数。<br>例如,给出长度为6的字符串aabaab和两个约束条件。<br>约束条件1: a 1 2 1 1<br>约束条件2: b 1 2 1 1<br>字符串S共有21个子串， 其中只有”ab”, “ba”, “baab” 不满足任何一个约束条件，其余17个子串至少满足一个约束条件。  </p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>首先注意到$\\frac{a}{b} \\ge \\frac12$, 约束条件要求单个字符所占的比例大于$\\frac ab$,同一个字符串中不可能有两个字符的比例大于$\\frac12$，所以每个子串至多只能满足一个约束条件，不存在同一个子串同时满足多个约束条件的情况。因此，只要依次计算出满足每个约束条件的子串数目，直接累加就能不重不漏地统计出“至少满足一个约束条件的子串数目”。  </p>\n<p>现在依次考虑每个约束条件，要求字符$s_i$在子串中所占的比例在$(\\frac ab, \\frac cd]$。用$p_i$表示在字符串$S$的前$i$个字符中字符$s_i$的个数。<br>考虑由$S$的第i的字符到第j个字符构成的子串，该子串长度为$j - (i - 1)$, 其中字符$s_i$的个数为$p_j - p_{i - 1}$, 故$s_i$的比例$k = \\frac{p_j - p_{i - 1}}{j - (i - 1)}$。约束条件可以写成  </p>\n<script type=\"math/tex; mode=display\">\\frac ab < \\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd</script><p>先考虑右边部分$\\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd$,<br>可化为$c(i - 1) - dp_{i - 1} \\le cj - dp_j$。<br>设$f_i = ci - dp_i$, 则上式可以写为$f_{i - 1} \\le f_j$<br>可以使用权值树状数组来维护满足上式的子串数量,具体操作如下  </p>\n<ol>\n<li>因为$f_i$值可能很大，且可能出现负数，需要先将$f_i$离散化  </li>\n<li>从$i = 0$到$i = n$依次扫描每个$f_i$:<ul>\n<li>向结果累加sum($f_i$)</li>\n<li>将树状数组中位置$f_i$的值加1, add($f_i$, 1)   </li>\n</ul>\n</li>\n</ol>\n<p>这样得到的结果就是满足$k \\le \\frac cd$的子串个数, 再用相同的方式求出满足$k \\le \\frac{a}{b}$的子串个数，相减即可得到满足约束条件的子串个数。具体实现细节请参考代码。  </p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> C[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; p &lt;= n; p += lowbit(p))</span><br><span class=\"line\">            C[p]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; p; p -= lowbit(p))</span><br><span class=\"line\">            res += C[p];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; T1, T2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> val1[maxn], val2[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c%d%d%d%d&quot;</span>, &amp;ch, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            p[i] = p[i - <span class=\"number\">1</span>] + (s[i] == ch);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// val1[i] = ai - b * p[i] , 离散化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            val1[i] = a * i - b * p[i];</span><br><span class=\"line\">            nums.push_back(val1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(nums.begin(), nums.end());</span><br><span class=\"line\">        nums.erase(unique(nums.begin(), nums.end()), nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">            val1[i] = lower_bound(nums.begin(), nums.end(), val1[i]) - nums.begin() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        nums.clear();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// val2[i] = ci - d * p[i]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            val2[i] = c * i - d * p[i];</span><br><span class=\"line\">            nums.push_back(val2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sort(nums.begin(), nums.end());</span><br><span class=\"line\">        nums.erase(unique(nums.begin(), nums.end()), nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">            val2[i] = lower_bound(nums.begin(), nums.end(), val2[i]) - nums.begin() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        nums.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(T1.C, <span class=\"number\">0</span>, <span class=\"number\">4</span> * maxn);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(T2.C, <span class=\"number\">0</span>, <span class=\"number\">4</span> * maxn);</span><br><span class=\"line\">        T1.add(val1[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        T2.add(val2[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t1 = T1.sum(val1[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t2 = T2.sum(val2[i]);</span><br><span class=\"line\">            ans += t2 - t1;</span><br><span class=\"line\">            T1.add(val1[i]);</span><br><span class=\"line\">            T2.add(val2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"涉及算法\"><a href=\"#涉及算法\" class=\"headerlink\" title=\"涉及算法\"></a>涉及算法</h2><ul>\n<li>树状数组</li>\n<li>离散化</li>\n</ul>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>题目链接<a href=\"https://ac.nowcoder.com/acm/contest/16832/E\">https://ac.nowcoder.com/acm/contest/16832/E</a><br>给出一个长度为$n$的字符串$S$,以及$m$个约束条件。<br>每个约束条件格式为$s_i  a_i  b_i  c_i  d_i $, 表示要求字符$s_i$中字符串中所占的比例$k$满足$\\frac{a}{b} &lt; k \\le \\frac{c}{d}$. 保证$\\frac{a}{b} \\le \\frac{a}{b} \\le 1$，且对每个字符至多有一个约束条件。<br>求S的所有子串中，至少满足一个约束条件的子串的个数。<br>例如,给出长度为6的字符串aabaab和两个约束条件。<br>约束条件1: a 1 2 1 1<br>约束条件2: b 1 2 1 1<br>字符串S共有21个子串， 其中只有”ab”, “ba”, “baab” 不满足任何一个约束条件，其余17个子串至少满足一个约束条件。  </p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>首先注意到$\\frac{a}{b} \\ge \\frac12$, 约束条件要求单个字符所占的比例大于$\\frac ab$,同一个字符串中不可能有两个字符的比例大于$\\frac12$，所以每个子串至多只能满足一个约束条件，不存在同一个子串同时满足多个约束条件的情况。因此，只要依次计算出满足每个约束条件的子串数目，直接累加就能不重不漏地统计出“至少满足一个约束条件的子串数目”。  </p>\n<p>现在依次考虑每个约束条件，要求字符$s_i$在子串中所占的比例在$(\\frac ab, \\frac cd]$。用$p_i$表示在字符串$S$的前$i$个字符中字符$s_i$的个数。<br>考虑由$S$的第i的字符到第j个字符构成的子串，该子串长度为$j - (i - 1)$, 其中字符$s_i$的个数为$p_j - p_{i - 1}$, 故$s_i$的比例$k = \\frac{p_j - p_{i - 1}}{j - (i - 1)}$。约束条件可以写成  </p>\n<script type=\"math/tex; mode=display\">\\frac ab < \\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd</script><p>先考虑右边部分$\\frac{p_j - p_{i - 1}}{j - (i - 1)} \\le \\frac cd$,<br>可化为$c(i - 1) - dp_{i - 1} \\le cj - dp_j$。<br>设$f_i = ci - dp_i$, 则上式可以写为$f_{i - 1} \\le f_j$<br>可以使用权值树状数组来维护满足上式的子串数量,具体操作如下  </p>\n<ol>\n<li>因为$f_i$值可能很大，且可能出现负数，需要先将$f_i$离散化  </li>\n<li>从$i = 0$到$i = n$依次扫描每个$f_i$:<ul>\n<li>向结果累加sum($f_i$)</li>\n<li>将树状数组中位置$f_i$的值加1, add($f_i$, 1)   </li>\n</ul>\n</li>\n</ol>\n<p>这样得到的结果就是满足$k \\le \\frac cd$的子串个数, 再用相同的方式求出满足$k \\le \\frac{a}{b}$的子串个数，相减即可得到满足约束条件的子串个数。具体实现细节请参考代码。  </p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> C[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; p &lt;= n; p += lowbit(p))</span><br><span class=\"line\">            C[p]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; p; p -= lowbit(p))</span><br><span class=\"line\">            res += C[p];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; T1, T2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> val1[maxn], val2[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c%d%d%d%d&quot;</span>, &amp;ch, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            p[i] = p[i - <span class=\"number\">1</span>] + (s[i] == ch);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// val1[i] = ai - b * p[i] , 离散化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            val1[i] = a * i - b * p[i];</span><br><span class=\"line\">            nums.push_back(val1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(nums.begin(), nums.end());</span><br><span class=\"line\">        nums.erase(unique(nums.begin(), nums.end()), nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">            val1[i] = lower_bound(nums.begin(), nums.end(), val1[i]) - nums.begin() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        nums.clear();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// val2[i] = ci - d * p[i]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            val2[i] = c * i - d * p[i];</span><br><span class=\"line\">            nums.push_back(val2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sort(nums.begin(), nums.end());</span><br><span class=\"line\">        nums.erase(unique(nums.begin(), nums.end()), nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">            val2[i] = lower_bound(nums.begin(), nums.end(), val2[i]) - nums.begin() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        nums.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(T1.C, <span class=\"number\">0</span>, <span class=\"number\">4</span> * maxn);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(T2.C, <span class=\"number\">0</span>, <span class=\"number\">4</span> * maxn);</span><br><span class=\"line\">        T1.add(val1[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        T2.add(val2[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t1 = T1.sum(val1[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t2 = T2.sum(val2[i]);</span><br><span class=\"line\">            ans += t2 - t1;</span><br><span class=\"line\">            T1.add(val1[i]);</span><br><span class=\"line\">            T2.add(val2[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"两道Codeforces题","mathjax":true,"date":"2021-07-05T11:38:18.000Z","_content":"\n[278D](https://codeforces.com/contest/1541/problem/D)  \n[729D](https://codeforces.com/contest/1542/problem/D)\n\n![728D](728D.jpg)\n\n![279D](729D.jpg)","source":"_posts/两道CF题.md","raw":"---\ntitle: 两道Codeforces题\nmathjax: true\ndate: 2021-07-05 19:38:18\ntags:\n---\n\n[278D](https://codeforces.com/contest/1541/problem/D)  \n[729D](https://codeforces.com/contest/1542/problem/D)\n\n![728D](728D.jpg)\n\n![279D](729D.jpg)","slug":"两道CF题","published":1,"updated":"2021-07-05T11:42:59.693Z","_id":"ckqqk0drg0000kiwnf9vwd1ae","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://codeforces.com/contest/1541/problem/D\">278D</a><br><a href=\"https://codeforces.com/contest/1542/problem/D\">729D</a></p>\n<p><img src=\"/2021/07/05/%E4%B8%A4%E9%81%93CF%E9%A2%98/728D.jpg\" alt=\"728D\"></p>\n<p><img src=\"/2021/07/05/%E4%B8%A4%E9%81%93CF%E9%A2%98/729D.jpg\" alt=\"279D\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://codeforces.com/contest/1541/problem/D\">278D</a><br><a href=\"https://codeforces.com/contest/1542/problem/D\">729D</a></p>\n<p><img src=\"/2021/07/05/%E4%B8%A4%E9%81%93CF%E9%A2%98/728D.jpg\" alt=\"728D\"></p>\n<p><img src=\"/2021/07/05/%E4%B8%A4%E9%81%93CF%E9%A2%98/729D.jpg\" alt=\"279D\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/两道CF题/728D.jpg","slug":"728D.jpg","post":"ckqqk0drg0000kiwnf9vwd1ae","modified":1,"renderable":0},{"_id":"source/_posts/两道CF题/729D.jpg","slug":"729D.jpg","post":"ckqqk0drg0000kiwnf9vwd1ae","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}