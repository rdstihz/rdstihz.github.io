{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6f899706c7f47994e01e99fe34b172e9a7415432","modified":1617847917146},{"_id":"source/_posts/FFT学习笔记.md","hash":"10fe581e7f41edec8db314845850cff54667c42c","modified":1615030474850},{"_id":"source/_posts/Lucas定理.md","hash":"bc0f0fa1c64778a165f448556b0fc9b490b79843","modified":1616596932824},{"_id":"source/_posts/draft/temp.tex","hash":"7ad210e8a6d3e57d3bbc7aa7e2f9895a31de8360","modified":1615039495001},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1615030474850},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1615030474850},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1615030474850},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1615030474850},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1615030474850},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1615030474850},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1615030474850},{"_id":"themes/next/config.yml","hash":"041395164e701dfa80e66abbe6dd86d2f3eadc9b","modified":1617847028013},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1615030474850},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1615030474850},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1615030474850},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1615030474853},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1615030474850},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1615030474850},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1615030474850},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1615030474850},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1615030474850},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1615030474850},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1615030474850},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1615030474850},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1615030474850},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1615030474850},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1615030474850},{"_id":"themes/next/_config.yml","hash":"8e937d86b3a8ef5f9323c94df0e63c46b1dac527","modified":1615030474850},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1615030474850},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1615030474850},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1615030474850},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1615030474850},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1615030474850},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1615030474850},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1615030474850},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1615030474853},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1615030474850},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1615030474850},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1615030474853},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1615030474853},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1615030474853},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1615030474853},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1615030474853},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1615030474850},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1615030474853},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1615030474850},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1615030474850},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1615030474850},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1615030474850},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1615030474850},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1615030474853},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1615030474853},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1615030474853},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1615030474853},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1615030474853},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1615030474853},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1615030474853},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1615030474853},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1615030474853},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1615030474853},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1615030474853},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1615030474853},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1615030474853},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1615030474853},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1615030474853},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1615030474853},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1615030474853},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1615030474850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1615030474850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1615030474850},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1615030474850},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1615030474850},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1615030474850},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1615030474850},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1615030474850},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1615030474850},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1615030474853},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1615030474853},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1615030474853},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1615030474853},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1615030474853},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1615030474853},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1615030474853},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1615030474853},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1615030474853},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1615030474853},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1615030474853},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1615030474853},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1615030474853},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1615030474853},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1615030474853},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1615030474853},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1615030474853},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1615030474853},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1615030474853},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1615030474853},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1615030474853},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1615030474853},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1615030474853},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1615030474853},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1615030474853},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1615030474853},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1615030474853},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1615030474853},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1615030474853},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1615030474853},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1615030474853},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1615030474853},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1615030474853},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1615030474853},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1615030474853},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1615030474853},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1615030474853},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1615030474857},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1615030474857},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1615030474853},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1615030474857},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1615030474857},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1615030474857},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1615030474857},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1615030474857},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1615030474857},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1615030474857},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1615030474857},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1615030474857},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1615030474857},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1615030474857},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1615030474857},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1615030474857},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1615030474857},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1615030474857},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1615030474857},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1615030474853},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1615030474853},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1615030474853},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1615030474853},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1615030474853},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1615030474853},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1615030474853},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1615030474853},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1615030474853},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1615030474853},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615030474853},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1615030474853},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1615030474853},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1615030474853},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1615030474853},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1615030474853},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1615030474853},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1615030474853},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1615030474853},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1615030474853},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1615030474853},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1615030474853},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1615030474853},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1615030474853},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1615030474853},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1615030474853},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1615030474853},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1615030474853},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1615030474853},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1615030474857},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1615030474857},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1615030474857},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1615030474857},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1615030474857},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1615030474857},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1615030474857},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1615030474860},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1615030474860},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1615030474853},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1615030474857},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1615030474857},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1615030474853},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1615030474857},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1615030474853},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1615030474857},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1615030474853},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1615030474853},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1615030474857},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1615030474857},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1615030474857},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1615030474857},{"_id":"public/archives/index.html","hash":"7951b59fb2a23706e2102b848058a89a3739bddd","modified":1620983555336},{"_id":"public/archives/2021/index.html","hash":"ad894297f17ff2b18a7cbf335a66067e0e9a0838","modified":1620983555336},{"_id":"public/archives/2021/01/index.html","hash":"ce80d5d87bde433301854a66c3228af24ed3836d","modified":1620983555336},{"_id":"public/archives/2021/03/index.html","hash":"3672a15257ccaa131314f987f9098886d5a6d44d","modified":1620983555336},{"_id":"public/2021/03/06/Lucas定理/index.html","hash":"e28d0ada76b9a0a4dffdbe48af1e853430b8dc2b","modified":1620983555336},{"_id":"public/2021/01/28/FFT学习笔记/index.html","hash":"7107baa5d54305d365a8ea9660717d7a86afd765","modified":1620983555336},{"_id":"public/index.html","hash":"d187e62a7887daac1a57e5a92c7ff7291ea45ff8","modified":1620983555336},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1617847997827},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1617847997827},{"_id":"public/CNAME","hash":"6f899706c7f47994e01e99fe34b172e9a7415432","modified":1617847997827},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1617847997827},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1617847997827},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1617847997827},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1617847997827},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1617847997827},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1617847997827},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1617847997827},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1617847997827},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1617847997827},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1617847997827},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1617847997827},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1617847997827},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1617847997827},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1617847997827},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1617847997827},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1617847997827},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1617847997827},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1617847997827},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1617847997827},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1617847997827},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1617847997827},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1617847997827},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1617847997827},{"_id":"public/css/main.css","hash":"1ccc7ebe2f2ea2b11bfb2ce998a6f47953f63378","modified":1617847997827},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1617847997827},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1617847997827},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1617847997827},{"_id":"source/_posts/算法模板.md","hash":"eb8060451b9f7a8291dc39052ba08000de46e381","modified":1620981769879},{"_id":"public/archives/2021/05/index.html","hash":"41b4c798b260389170bd427addf1a2eb8a78607d","modified":1620983555336},{"_id":"public/2021/05/06/算法模板/index.html","hash":"82b7496428bc823cc52a4741145a6058e1d4056c","modified":1620316186123},{"_id":"source/_posts/draft/算法模板.md","hash":"389f1f96c3e07ac78c61944ea7465f0fb81ef25c","modified":1620831514035},{"_id":"public/2021/05/12/算法模板/index.html","hash":"35c90f028a84762feb76cd03d10b70f9758bfa7e","modified":1620983555336},{"_id":"public/2021/05/08/draft/算法模板/index.html","hash":"3dfb085e41db4440a8255828a73072a2ae9e0fab","modified":1620831559030}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FFT学习笔记","mathjax":true,"date":"2021-01-28T05:04:48.000Z","_content":"\n# 多项式\n\n### 系数表达\n$$A(x) = \\sum_{i=0}^{n-1}a_ix^i$$  \n### 点值表达\n$$ \\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\} $$\n\n# 算法概括\nFFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。  \n主要过程为：\n1. 计算原有两个多项式在单位复数根下的点值。（DFT）\n2. 将两个多项式的点值相乘。得到乘积的点值。\n3. 将点值还原为系数表达。（IDFT）\n\n# 单位复数根\n\n### $n$次单位复数根\n$$w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1$$\n\n### 单位根的性质\n\n#### 消去定理\n$$w_{2n}^{2k} = w_n^k $$\n#### 折半定理\n$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。\n\n#### 其它\n$$w_n^{k+n/2} = -w_n^k  $$\n$$w_n^{k+n} = w_n^{k}  $$\n\n\n# 离散傅利叶变换（DFT）\n设多项式$$A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}$$\n他的所有的偶数次项系数组成新多项式  \n$$A_0(x) = a_0 + a_2x + a_4x^2 + ... $$\n$$A_1(x) = a_1 + a_3x + a_4x^2 + ... $$\n则显然有$$A(x) = A_0(x^2)+xA_1(x^2) $$\n$$A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k}) $$ \n\n$$A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k}) $$\n\n利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，\n递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。\n总时间复杂度为$O(nlogn)$\n\n## 伪代码\n\n### 递归实现\n``` \nDFT(A,n) //A为系数数组，n为项数，且n为2的整数次幂（可在）\nif n = 1\n    return\n\nm = n/2\nfor i = 0 to m\n    A0[i] = A[2*i]\n    A1[i] = A[2*i+1]\n\nDFT(A0,n)\nDFT(A1,n)\n\nw = 1\nwn = cos(2pi/n) + i*sin(2pi/n)\nfor i = 0 to m-1\n    A[i] = A0[i] + w*A1[i]\n    A[i+m] = A0[i] - w*A1[i]\n    w = w*wn\nreturn\n```\n\n### 迭代实现  \n将系数数组排成$log_2n$次奇偶分离操作后的顺序  \n这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列\n每个数翻转后的数可以递推求出。\nC++代码:\n``` cpp\n\nstruct Complex{}//实现复数类，此外省略\n\n//1. rev 的计算 （放在main函数中）\nfor(int i = 0;i<n;i++)\n    rev[i] = (rev[i>>1]>>1) | ((i&1) >> l-1)\n\nvoid DFT(Complex *A,int n ){\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = a[j+i];\n                Complex v = a[j+i+m];\n                a[j+i] = u + w*v;\n                a[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n```\n\n# 离散傅利叶逆变换（IDFT）\n\n将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。\n代码可以与DFT合并 \n\n``` cpp\nvoid FFT(Complex *A,int n ,int type){\n    //type = 1表示DFT\n    //type = -1 表示IDFT\n\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n\n```\n\n\n# 完整代码\n``` cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 10000000+100;\nconst double pi = acos(-1);\n\n//实现复数类\nstruct Complex{\n    double r,v;//实部和虚部\n    Complex(){\n        r = v = 0;\n    }\n    Complex(double a,double b){\n        r = a; v = b;\n    }\n    \n    Complex operator+(const Complex &p) const{\n        return Complex(r+p.r,v+p.v);\n    }\n    Complex operator-(const Complex &p) const{\n        return Complex(r-p.r,v-p.v);\n    }\n    Complex operator*(const Complex &p) const{\n        return Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); \n    }\n    \n};\n\nComplex a[maxn],b[maxn];\n\nint rev[maxn];\n\n//DFT和IDFT\nvoid fft(Complex * A,int n,int type){\n    \n    for(int i = 0;i<n;i++)\n        if(rev[i] < i ) swap(A[i],A[rev[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){//the length of doing \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){\n            int m = len>>1;\n            \n            Complex w(1,0);\n            \n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;\n                w = w*wn; \n            }\n            \n        }\n    }\n}\n\n//读入优化\ninline int read(){\n    int x = 0;\n    char c =getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0' && c<='9' ){\n        x = x*10 + c-'0';\n        c = getchar();\n    }\n    return x;\n    \n}\n\nint main(){\n    int n,m;\n    n =  read();\n    m = read();\n\n    for(int i = 0;i<=n;i++){\n        a[i].r = read();\n    }\n    \n    for(int i = 0;i<=m;i++){\n        b[i].r = read();\n    }\n    \n    \n    //将项数补齐到2的整数次幂\n    \n    int N = 1;\n    int l = 0;\n    while(N<=n+m) N <<= 1,l++;\n    \n    //求rev\n    for(int i =0;i<N;i++)\n        rev[i] = (rev[i>>1]>>1) | ((i&1) << (l-1) );\n    \n    fft(a,N,1);\n    fft(b,N,1);\n    \n    for(int i = 0;i<N;i++)\n        a[i] = a[i]*b[i];\n    fft(a,N,-1);\n    \n    for(int i =0;i<=n+m;i++)\n        printf(\"%d \",(int)(a[i].r/N+0.5));//+0.5实现四舍五入\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n\n\n","source":"_posts/FFT学习笔记.md","raw":"---\ntitle: FFT学习笔记\nmathjax: true\ndate: 2021-01-28 13:04:48\ntags:\n---\n\n# 多项式\n\n### 系数表达\n$$A(x) = \\sum_{i=0}^{n-1}a_ix^i$$  \n### 点值表达\n$$ \\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\} $$\n\n# 算法概括\nFFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。  \n主要过程为：\n1. 计算原有两个多项式在单位复数根下的点值。（DFT）\n2. 将两个多项式的点值相乘。得到乘积的点值。\n3. 将点值还原为系数表达。（IDFT）\n\n# 单位复数根\n\n### $n$次单位复数根\n$$w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1$$\n\n### 单位根的性质\n\n#### 消去定理\n$$w_{2n}^{2k} = w_n^k $$\n#### 折半定理\n$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。\n\n#### 其它\n$$w_n^{k+n/2} = -w_n^k  $$\n$$w_n^{k+n} = w_n^{k}  $$\n\n\n# 离散傅利叶变换（DFT）\n设多项式$$A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}$$\n他的所有的偶数次项系数组成新多项式  \n$$A_0(x) = a_0 + a_2x + a_4x^2 + ... $$\n$$A_1(x) = a_1 + a_3x + a_4x^2 + ... $$\n则显然有$$A(x) = A_0(x^2)+xA_1(x^2) $$\n$$A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k}) $$ \n\n$$A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k}) $$\n\n利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，\n递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。\n总时间复杂度为$O(nlogn)$\n\n## 伪代码\n\n### 递归实现\n``` \nDFT(A,n) //A为系数数组，n为项数，且n为2的整数次幂（可在）\nif n = 1\n    return\n\nm = n/2\nfor i = 0 to m\n    A0[i] = A[2*i]\n    A1[i] = A[2*i+1]\n\nDFT(A0,n)\nDFT(A1,n)\n\nw = 1\nwn = cos(2pi/n) + i*sin(2pi/n)\nfor i = 0 to m-1\n    A[i] = A0[i] + w*A1[i]\n    A[i+m] = A0[i] - w*A1[i]\n    w = w*wn\nreturn\n```\n\n### 迭代实现  \n将系数数组排成$log_2n$次奇偶分离操作后的顺序  \n这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列\n每个数翻转后的数可以递推求出。\nC++代码:\n``` cpp\n\nstruct Complex{}//实现复数类，此外省略\n\n//1. rev 的计算 （放在main函数中）\nfor(int i = 0;i<n;i++)\n    rev[i] = (rev[i>>1]>>1) | ((i&1) >> l-1)\n\nvoid DFT(Complex *A,int n ){\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = a[j+i];\n                Complex v = a[j+i+m];\n                a[j+i] = u + w*v;\n                a[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n```\n\n# 离散傅利叶逆变换（IDFT）\n\n将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。\n代码可以与DFT合并 \n\n``` cpp\nvoid FFT(Complex *A,int n ,int type){\n    //type = 1表示DFT\n    //type = -1 表示IDFT\n\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n\n```\n\n\n# 完整代码\n``` cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 10000000+100;\nconst double pi = acos(-1);\n\n//实现复数类\nstruct Complex{\n    double r,v;//实部和虚部\n    Complex(){\n        r = v = 0;\n    }\n    Complex(double a,double b){\n        r = a; v = b;\n    }\n    \n    Complex operator+(const Complex &p) const{\n        return Complex(r+p.r,v+p.v);\n    }\n    Complex operator-(const Complex &p) const{\n        return Complex(r-p.r,v-p.v);\n    }\n    Complex operator*(const Complex &p) const{\n        return Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); \n    }\n    \n};\n\nComplex a[maxn],b[maxn];\n\nint rev[maxn];\n\n//DFT和IDFT\nvoid fft(Complex * A,int n,int type){\n    \n    for(int i = 0;i<n;i++)\n        if(rev[i] < i ) swap(A[i],A[rev[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){//the length of doing \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){\n            int m = len>>1;\n            \n            Complex w(1,0);\n            \n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;\n                w = w*wn; \n            }\n            \n        }\n    }\n}\n\n//读入优化\ninline int read(){\n    int x = 0;\n    char c =getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0' && c<='9' ){\n        x = x*10 + c-'0';\n        c = getchar();\n    }\n    return x;\n    \n}\n\nint main(){\n    int n,m;\n    n =  read();\n    m = read();\n\n    for(int i = 0;i<=n;i++){\n        a[i].r = read();\n    }\n    \n    for(int i = 0;i<=m;i++){\n        b[i].r = read();\n    }\n    \n    \n    //将项数补齐到2的整数次幂\n    \n    int N = 1;\n    int l = 0;\n    while(N<=n+m) N <<= 1,l++;\n    \n    //求rev\n    for(int i =0;i<N;i++)\n        rev[i] = (rev[i>>1]>>1) | ((i&1) << (l-1) );\n    \n    fft(a,N,1);\n    fft(b,N,1);\n    \n    for(int i = 0;i<N;i++)\n        a[i] = a[i]*b[i];\n    fft(a,N,-1);\n    \n    for(int i =0;i<=n+m;i++)\n        printf(\"%d \",(int)(a[i].r/N+0.5));//+0.5实现四舍五入\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n\n\n","slug":"FFT学习笔记","published":1,"updated":"2021-03-06T11:34:34.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn88xcoi00006zwn0sw82fei","content":"<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h3 id=\"系数表达\"><a href=\"#系数表达\" class=\"headerlink\" title=\"系数表达\"></a>系数表达</h3><script type=\"math/tex; mode=display\">A(x) = \\sum_{i=0}^{n-1}a_ix^i</script><h3 id=\"点值表达\"><a href=\"#点值表达\" class=\"headerlink\" title=\"点值表达\"></a>点值表达</h3><script type=\"math/tex; mode=display\">\\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\}</script><h1 id=\"算法概括\"><a href=\"#算法概括\" class=\"headerlink\" title=\"算法概括\"></a>算法概括</h1><p>FFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。<br>主要过程为：</p>\n<ol>\n<li>计算原有两个多项式在单位复数根下的点值。（DFT）</li>\n<li>将两个多项式的点值相乘。得到乘积的点值。</li>\n<li>将点值还原为系数表达。（IDFT）</li>\n</ol>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h3 id=\"n-次单位复数根\"><a href=\"#n-次单位复数根\" class=\"headerlink\" title=\"$n$次单位复数根\"></a>$n$次单位复数根</h3><script type=\"math/tex; mode=display\">w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1</script><h3 id=\"单位根的性质\"><a href=\"#单位根的性质\" class=\"headerlink\" title=\"单位根的性质\"></a>单位根的性质</h3><h4 id=\"消去定理\"><a href=\"#消去定理\" class=\"headerlink\" title=\"消去定理\"></a>消去定理</h4><script type=\"math/tex; mode=display\">w_{2n}^{2k} = w_n^k</script><h4 id=\"折半定理\"><a href=\"#折半定理\" class=\"headerlink\" title=\"折半定理\"></a>折半定理</h4><p>$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。</p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><script type=\"math/tex; mode=display\">w_n^{k+n/2} = -w_n^k</script><script type=\"math/tex; mode=display\">w_n^{k+n} = w_n^{k}</script><h1 id=\"离散傅利叶变换（DFT）\"><a href=\"#离散傅利叶变换（DFT）\" class=\"headerlink\" title=\"离散傅利叶变换（DFT）\"></a>离散傅利叶变换（DFT）</h1><p>设多项式<script type=\"math/tex\">A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}</script><br>他的所有的偶数次项系数组成新多项式  </p>\n<script type=\"math/tex; mode=display\">A_0(x) = a_0 + a_2x + a_4x^2 + ...</script><script type=\"math/tex; mode=display\">A_1(x) = a_1 + a_3x + a_4x^2 + ...</script><p>则显然有<script type=\"math/tex\">A(x) = A_0(x^2)+xA_1(x^2)</script></p>\n<script type=\"math/tex; mode=display\">A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k})</script><script type=\"math/tex; mode=display\">A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k})</script><p>利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，<br>递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。<br>总时间复杂度为$O(nlogn)$</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DFT(A,n) &#x2F;&#x2F;A为系数数组，n为项数，且n为2的整数次幂（可在）</span><br><span class=\"line\">if n &#x3D; 1</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">m &#x3D; n&#x2F;2</span><br><span class=\"line\">for i &#x3D; 0 to m</span><br><span class=\"line\">    A0[i] &#x3D; A[2*i]</span><br><span class=\"line\">    A1[i] &#x3D; A[2*i+1]</span><br><span class=\"line\"></span><br><span class=\"line\">DFT(A0,n)</span><br><span class=\"line\">DFT(A1,n)</span><br><span class=\"line\"></span><br><span class=\"line\">w &#x3D; 1</span><br><span class=\"line\">wn &#x3D; cos(2pi&#x2F;n) + i*sin(2pi&#x2F;n)</span><br><span class=\"line\">for i &#x3D; 0 to m-1</span><br><span class=\"line\">    A[i] &#x3D; A0[i] + w*A1[i]</span><br><span class=\"line\">    A[i+m] &#x3D; A0[i] - w*A1[i]</span><br><span class=\"line\">    w &#x3D; w*wn</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h3><p>将系数数组排成$log_2n$次奇偶分离操作后的顺序<br>这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列<br>每个数翻转后的数可以递推求出。<br>C++代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span>&#125;<span class=\"comment\">//实现复数类，此外省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. rev 的计算 （放在main函数中）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &gt;&gt; l<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> DFT(Complex *A,<span class=\"keyword\">int</span> n )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = a[j+i];</span><br><span class=\"line\">                Complex v = a[j+i+m];</span><br><span class=\"line\">                a[j+i] = u + w*v;</span><br><span class=\"line\">                a[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"离散傅利叶逆变换（IDFT）\"><a href=\"#离散傅利叶逆变换（IDFT）\" class=\"headerlink\" title=\"离散傅利叶逆变换（IDFT）\"></a>离散傅利叶逆变换（IDFT）</h1><p>将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。<br>代码可以与DFT合并 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex *A,<span class=\"keyword\">int</span> n ,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//type = 1表示DFT</span></span><br><span class=\"line\">    <span class=\"comment\">//type = -1 表示IDFT</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000000</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现复数类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r,v;<span class=\"comment\">//实部和虚部</span></span><br><span class=\"line\">    Complex()&#123;</span><br><span class=\"line\">        r = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> a,<span class=\"keyword\">double</span> b)&#123;</span><br><span class=\"line\">        r = a; v = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r+p.r,v+p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r-p.r,v-p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DFT和IDFT</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex * A,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rev[i] &lt; i ) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123;<span class=\"comment\">//the length of doing </span></span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;</span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读入优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c =getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>) c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class=\"string\">&#x27;9&#x27;</span> )&#123;</span><br><span class=\"line\">        x = x*<span class=\"number\">10</span> + c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n =  read();</span><br><span class=\"line\">    m = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        b[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将项数补齐到2的整数次幂</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(N&lt;=n+m) N &lt;&lt;= <span class=\"number\">1</span>,l++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//求rev</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (l<span class=\"number\">-1</span>) );</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        a[i] = a[i]*b[i];</span><br><span class=\"line\">    fft(a,N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;=n+m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,(<span class=\"keyword\">int</span>)(a[i].r/N+<span class=\"number\">0.5</span>));<span class=\"comment\">//+0.5实现四舍五入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h3 id=\"系数表达\"><a href=\"#系数表达\" class=\"headerlink\" title=\"系数表达\"></a>系数表达</h3><script type=\"math/tex; mode=display\">A(x) = \\sum_{i=0}^{n-1}a_ix^i</script><h3 id=\"点值表达\"><a href=\"#点值表达\" class=\"headerlink\" title=\"点值表达\"></a>点值表达</h3><script type=\"math/tex; mode=display\">\\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\}</script><h1 id=\"算法概括\"><a href=\"#算法概括\" class=\"headerlink\" title=\"算法概括\"></a>算法概括</h1><p>FFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。<br>主要过程为：</p>\n<ol>\n<li>计算原有两个多项式在单位复数根下的点值。（DFT）</li>\n<li>将两个多项式的点值相乘。得到乘积的点值。</li>\n<li>将点值还原为系数表达。（IDFT）</li>\n</ol>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h3 id=\"n-次单位复数根\"><a href=\"#n-次单位复数根\" class=\"headerlink\" title=\"$n$次单位复数根\"></a>$n$次单位复数根</h3><script type=\"math/tex; mode=display\">w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1</script><h3 id=\"单位根的性质\"><a href=\"#单位根的性质\" class=\"headerlink\" title=\"单位根的性质\"></a>单位根的性质</h3><h4 id=\"消去定理\"><a href=\"#消去定理\" class=\"headerlink\" title=\"消去定理\"></a>消去定理</h4><script type=\"math/tex; mode=display\">w_{2n}^{2k} = w_n^k</script><h4 id=\"折半定理\"><a href=\"#折半定理\" class=\"headerlink\" title=\"折半定理\"></a>折半定理</h4><p>$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。</p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><script type=\"math/tex; mode=display\">w_n^{k+n/2} = -w_n^k</script><script type=\"math/tex; mode=display\">w_n^{k+n} = w_n^{k}</script><h1 id=\"离散傅利叶变换（DFT）\"><a href=\"#离散傅利叶变换（DFT）\" class=\"headerlink\" title=\"离散傅利叶变换（DFT）\"></a>离散傅利叶变换（DFT）</h1><p>设多项式<script type=\"math/tex\">A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}</script><br>他的所有的偶数次项系数组成新多项式  </p>\n<script type=\"math/tex; mode=display\">A_0(x) = a_0 + a_2x + a_4x^2 + ...</script><script type=\"math/tex; mode=display\">A_1(x) = a_1 + a_3x + a_4x^2 + ...</script><p>则显然有<script type=\"math/tex\">A(x) = A_0(x^2)+xA_1(x^2)</script></p>\n<script type=\"math/tex; mode=display\">A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k})</script><script type=\"math/tex; mode=display\">A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k})</script><p>利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，<br>递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。<br>总时间复杂度为$O(nlogn)$</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DFT(A,n) &#x2F;&#x2F;A为系数数组，n为项数，且n为2的整数次幂（可在）</span><br><span class=\"line\">if n &#x3D; 1</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">m &#x3D; n&#x2F;2</span><br><span class=\"line\">for i &#x3D; 0 to m</span><br><span class=\"line\">    A0[i] &#x3D; A[2*i]</span><br><span class=\"line\">    A1[i] &#x3D; A[2*i+1]</span><br><span class=\"line\"></span><br><span class=\"line\">DFT(A0,n)</span><br><span class=\"line\">DFT(A1,n)</span><br><span class=\"line\"></span><br><span class=\"line\">w &#x3D; 1</span><br><span class=\"line\">wn &#x3D; cos(2pi&#x2F;n) + i*sin(2pi&#x2F;n)</span><br><span class=\"line\">for i &#x3D; 0 to m-1</span><br><span class=\"line\">    A[i] &#x3D; A0[i] + w*A1[i]</span><br><span class=\"line\">    A[i+m] &#x3D; A0[i] - w*A1[i]</span><br><span class=\"line\">    w &#x3D; w*wn</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h3><p>将系数数组排成$log_2n$次奇偶分离操作后的顺序<br>这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列<br>每个数翻转后的数可以递推求出。<br>C++代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span>&#125;<span class=\"comment\">//实现复数类，此外省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. rev 的计算 （放在main函数中）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &gt;&gt; l<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> DFT(Complex *A,<span class=\"keyword\">int</span> n )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = a[j+i];</span><br><span class=\"line\">                Complex v = a[j+i+m];</span><br><span class=\"line\">                a[j+i] = u + w*v;</span><br><span class=\"line\">                a[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"离散傅利叶逆变换（IDFT）\"><a href=\"#离散傅利叶逆变换（IDFT）\" class=\"headerlink\" title=\"离散傅利叶逆变换（IDFT）\"></a>离散傅利叶逆变换（IDFT）</h1><p>将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。<br>代码可以与DFT合并 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex *A,<span class=\"keyword\">int</span> n ,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//type = 1表示DFT</span></span><br><span class=\"line\">    <span class=\"comment\">//type = -1 表示IDFT</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000000</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现复数类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r,v;<span class=\"comment\">//实部和虚部</span></span><br><span class=\"line\">    Complex()&#123;</span><br><span class=\"line\">        r = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> a,<span class=\"keyword\">double</span> b)&#123;</span><br><span class=\"line\">        r = a; v = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r+p.r,v+p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r-p.r,v-p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DFT和IDFT</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex * A,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rev[i] &lt; i ) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123;<span class=\"comment\">//the length of doing </span></span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;</span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读入优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c =getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>) c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class=\"string\">&#x27;9&#x27;</span> )&#123;</span><br><span class=\"line\">        x = x*<span class=\"number\">10</span> + c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n =  read();</span><br><span class=\"line\">    m = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        b[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将项数补齐到2的整数次幂</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(N&lt;=n+m) N &lt;&lt;= <span class=\"number\">1</span>,l++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//求rev</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (l<span class=\"number\">-1</span>) );</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        a[i] = a[i]*b[i];</span><br><span class=\"line\">    fft(a,N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;=n+m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,(<span class=\"keyword\">int</span>)(a[i].r/N+<span class=\"number\">0.5</span>));<span class=\"comment\">//+0.5实现四舍五入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Lucas定理教程","mathjax":true,"date":"2021-03-06T11:35:45.000Z","_content":"\n\n# Lucas定理\n若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n若如果把$n$写成$p$进制数$n_1n_2...n_k$,$m$写成$p$进制数$m_1m_2...m_k$,则  \n$$ C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p) $$  \n当需要计算组合数并取模时,可以考虑使用Lucas定理.\n\n## 证明\n证明暂时留坑，以后再填。~~我还不会.~~\n\n# 例题\n## （1）Luogu P3807, 模板-卢卡斯定理\n[题目链接](https://www.luogu.com.cn/problem/P3807)  \n\n### 分析\n这是卢卡斯定理模板题.\n$$C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}  $$  \n考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。  \n但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。  \n考虑Lucas定理，  \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n右边第一项中的$$n \\ mod \\ p$$和$$m \\ mod \\ p$$一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 \n\n### 代码\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nint main() {\n    int T;\n    cin >> T;\n    while (T--) {\n        LL n, m, p;\n        cin >> n >> m >> p;\n        cout << Lucas(n + m, m, p) << endl;\n    }\n    return 0;\n}\n```\n\n## (2) Luogu P2480 古代猪文 \n[题目链接](https://www.luogu.com.cn/problem/P2480) \n### 题意\n给定整数$n,q$，求  \n$$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $$\n的值.（999911659是质数）.\n### 分析\n根据费马小定理：$p$为质数且$a,p$互质时,有\n$$ a^{p - 1} \\equiv 1 (mod \\ p)  $$  \n推论\n$$ a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p) $$\n所以，要计算$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $，只需先算出$x = \\sum_{d|n}C_n^d \\ mod \\ (999911658)$,再计算$q^x \\ mod \\ 999911659$.    \n所以现在只需考虑如何去计算$x$.  \n对于$n$的每个约数$d$,要计算$C_n^d \\ mod \\ 999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。  \n将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.  \n可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$  \n最后，用中国剩余定理求解线性同余方程组：  \n$$\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}$$\n求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d \\ mod \\ 999911658 $的值。 用快速幂算出 $$q^x \\ mod \\ 999911659$$ 的值即为最终结果.\n另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.\n\n实现细节见代码。\n\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nconst LL P = 999911659;\n\n//a[1] - a[4]为 999911658的四个质因数。\nLL a[] = {0, 2, 3, 4679, 35617};\nLL b[5];\nint main() {\n    LL n, q;\n    cin >> n >> q;\n\n    if (q % P == 0) { // q是p的倍数，直接输出0\n        cout << 0 << endl;\n        return 0;\n    }\n\n    for (int i = 1; i <= 4; i++) {\n        for (int d = 1; d * d <= n; d++) {\n            if (n % d == 0) {\n                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];\n                if (d * d != n) {\n                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];\n                }\n            }\n        }\n    }\n    //用中国剩余定理求解同余方程组\n    LL x = 0;\n    for (int i = 1; i <= 4; i++) {\n        LL M = (P - 1) / a[i];\n        x = (x + (b[i] * M % (P - 1)) * pow_mod(M, a[i] - 2, a[i])) % (P - 1);\n    }\n    cout << pow_mod(q, x, P) << endl;\n\n    return 0;\n}\n```\n\n","source":"_posts/Lucas定理.md","raw":"---\ntitle: Lucas定理教程\nmathjax: true\ndate: 2021-03-06 19:35:45\ntags:\n---\n\n\n# Lucas定理\n若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n若如果把$n$写成$p$进制数$n_1n_2...n_k$,$m$写成$p$进制数$m_1m_2...m_k$,则  \n$$ C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p) $$  \n当需要计算组合数并取模时,可以考虑使用Lucas定理.\n\n## 证明\n证明暂时留坑，以后再填。~~我还不会.~~\n\n# 例题\n## （1）Luogu P3807, 模板-卢卡斯定理\n[题目链接](https://www.luogu.com.cn/problem/P3807)  \n\n### 分析\n这是卢卡斯定理模板题.\n$$C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}  $$  \n考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。  \n但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。  \n考虑Lucas定理，  \n$$ C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)$$  \n右边第一项中的$$n \\ mod \\ p$$和$$m \\ mod \\ p$$一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 \n\n### 代码\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nint main() {\n    int T;\n    cin >> T;\n    while (T--) {\n        LL n, m, p;\n        cin >> n >> m >> p;\n        cout << Lucas(n + m, m, p) << endl;\n    }\n    return 0;\n}\n```\n\n## (2) Luogu P2480 古代猪文 \n[题目链接](https://www.luogu.com.cn/problem/P2480) \n### 题意\n给定整数$n,q$，求  \n$$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $$\n的值.（999911659是质数）.\n### 分析\n根据费马小定理：$p$为质数且$a,p$互质时,有\n$$ a^{p - 1} \\equiv 1 (mod \\ p)  $$  \n推论\n$$ a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p) $$\n所以，要计算$ q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659 $，只需先算出$x = \\sum_{d|n}C_n^d \\ mod \\ (999911658)$,再计算$q^x \\ mod \\ 999911659$.    \n所以现在只需考虑如何去计算$x$.  \n对于$n$的每个约数$d$,要计算$C_n^d \\ mod \\ 999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。  \n将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.  \n可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$  \n最后，用中国剩余定理求解线性同余方程组：  \n$$\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}$$\n求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d \\ mod \\ 999911658 $的值。 用快速幂算出 $$q^x \\ mod \\ 999911659$$ 的值即为最终结果.\n另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.\n\n实现细节见代码。\n\n``` cpp\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long LL;\n\n//快速幂\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res % p;\n}\n\n//组合数\nLL C(LL n, LL m, LL p) {\n    if (n < m) return 0;\n\n    LL a = 1; //分子\n    LL b = 1; //分母\n    for (LL i = m + 1; i <= n; i++)\n        a = a * i % p;\n    for (LL i = 1; i <= n - m; i++)\n        b = b * i % p;\n    return a * pow_mod(b, p - 2, p) % p;\n}\n\nLL Lucas(LL n, LL m, LL p) { //用lucs定理计算C(n,m) % p 的值\n    if (n - m < p)           // n - m < p 时可直接计算\n        return C(n, m, p);\n    else // n >= p 递归使用lucas定理\n        return C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;\n}\n\nconst LL P = 999911659;\n\n//a[1] - a[4]为 999911658的四个质因数。\nLL a[] = {0, 2, 3, 4679, 35617};\nLL b[5];\nint main() {\n    LL n, q;\n    cin >> n >> q;\n\n    if (q % P == 0) { // q是p的倍数，直接输出0\n        cout << 0 << endl;\n        return 0;\n    }\n\n    for (int i = 1; i <= 4; i++) {\n        for (int d = 1; d * d <= n; d++) {\n            if (n % d == 0) {\n                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];\n                if (d * d != n) {\n                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];\n                }\n            }\n        }\n    }\n    //用中国剩余定理求解同余方程组\n    LL x = 0;\n    for (int i = 1; i <= 4; i++) {\n        LL M = (P - 1) / a[i];\n        x = (x + (b[i] * M % (P - 1)) * pow_mod(M, a[i] - 2, a[i])) % (P - 1);\n    }\n    cout << pow_mod(q, x, P) << endl;\n\n    return 0;\n}\n```\n\n","slug":"Lucas定理","published":1,"updated":"2021-03-24T14:42:12.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn88xcon00016zwn7m2r3sw6","content":"<h1 id=\"Lucas定理\"><a href=\"#Lucas定理\" class=\"headerlink\" title=\"Lucas定理\"></a>Lucas定理</h1><p>若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>若如果把$n$写成$p$进制数$n_1n_2…n_k$,$m$写成$p$进制数$m_1m_2…m_k$,则  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p)</script><p>当需要计算组合数并取模时,可以考虑使用Lucas定理.</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>证明暂时留坑，以后再填。<del>我还不会.</del></p>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><h2 id=\"（1）Luogu-P3807-模板-卢卡斯定理\"><a href=\"#（1）Luogu-P3807-模板-卢卡斯定理\" class=\"headerlink\" title=\"（1）Luogu P3807, 模板-卢卡斯定理\"></a>（1）Luogu P3807, 模板-卢卡斯定理</h2><p><a href=\"https://www.luogu.com.cn/problem/P3807\">题目链接</a>  </p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这是卢卡斯定理模板题.</p>\n<script type=\"math/tex; mode=display\">C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}</script><p>考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。<br>但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。<br>考虑Lucas定理，  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>右边第一项中的<script type=\"math/tex\">n \\ mod \\ p</script>和<script type=\"math/tex\">m \\ mod \\ p</script>一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 </p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        LL n, m, p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; Lucas(n + m, m, p) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Luogu-P2480-古代猪文\"><a href=\"#2-Luogu-P2480-古代猪文\" class=\"headerlink\" title=\"(2) Luogu P2480 古代猪文\"></a>(2) Luogu P2480 古代猪文</h2><p><a href=\"https://www.luogu.com.cn/problem/P2480\">题目链接</a> </p>\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>给定整数$n,q$，求  </p>\n<script type=\"math/tex; mode=display\">q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659</script><p>的值.（999911659是质数）.</p>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>根据费马小定理：$p$为质数且$a,p$互质时,有</p>\n<script type=\"math/tex; mode=display\">a^{p - 1} \\equiv 1 (mod \\ p)</script><p>推论</p>\n<script type=\"math/tex; mode=display\">a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p)</script><p>所以，要计算$ q^{\\sum_{d|n}C_n^d }  mod  999911659 $，只需先算出$x = \\sum_{d|n}C_n^d  mod  (999911658)$,再计算$q^x  mod  999911659$.<br>所以现在只需考虑如何去计算$x$.<br>对于$n$的每个约数$d$,要计算$C_n^d  mod  999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。<br>将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.<br>可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$<br>最后，用中国剩余定理求解线性同余方程组：  </p>\n<script type=\"math/tex; mode=display\">\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}</script><p>求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d  mod  999911658 $的值。 用快速幂算出 <script type=\"math/tex\">q^x \\ mod \\ 999911659</script> 的值即为最终结果.<br>另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.</p>\n<p>实现细节见代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LL P = <span class=\"number\">999911659</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a[1] - a[4]为 999911658的四个质因数。</span></span><br><span class=\"line\">LL a[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4679</span>, <span class=\"number\">35617</span>&#125;;</span><br><span class=\"line\">LL b[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LL n, q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q % P == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// q是p的倍数，直接输出0</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d * d &lt;= n; d++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % d == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d * d != n) &#123;</span><br><span class=\"line\">                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//用中国剩余定理求解同余方程组</span></span><br><span class=\"line\">    LL x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        LL M = (P - <span class=\"number\">1</span>) / a[i];</span><br><span class=\"line\">        x = (x + (b[i] * M % (P - <span class=\"number\">1</span>)) * pow_mod(M, a[i] - <span class=\"number\">2</span>, a[i])) % (P - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; pow_mod(q, x, P) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Lucas定理\"><a href=\"#Lucas定理\" class=\"headerlink\" title=\"Lucas定理\"></a>Lucas定理</h1><p>若$p$是质数，则对于任意的整数 $1 \\le m \\le n $, 有 </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>若如果把$n$写成$p$进制数$n_1n_2…n_k$,$m$写成$p$进制数$m_1m_2…m_k$,则  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n_1}^{m_1} * C_{n_2}^{m_2}*...*C_{n_k}^{m_k} (mod \\ p)</script><p>当需要计算组合数并取模时,可以考虑使用Lucas定理.</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>证明暂时留坑，以后再填。<del>我还不会.</del></p>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><h2 id=\"（1）Luogu-P3807-模板-卢卡斯定理\"><a href=\"#（1）Luogu-P3807-模板-卢卡斯定理\" class=\"headerlink\" title=\"（1）Luogu P3807, 模板-卢卡斯定理\"></a>（1）Luogu P3807, 模板-卢卡斯定理</h2><p><a href=\"https://www.luogu.com.cn/problem/P3807\">题目链接</a>  </p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这是卢卡斯定理模板题.</p>\n<script type=\"math/tex; mode=display\">C_{n}^m = \\frac{n!}{m!(n - m)!} =  \\frac{ \\prod_{i = m + 1}^{n+m} i }{(n - m)!}</script><p>考虑分别计算出分子a和分母b（一边累乘一边对p取模）,然后，将a乘以b模p的逆元，即可得到结果。<br>但是，当$n-m$大于或等于$p$时，分母$b = (n-m)!$一定p的倍数，这时b不存在模p的逆元。因此不能通过上述方法算出结果。<br>考虑Lucas定理，  </p>\n<script type=\"math/tex; mode=display\">C_n^m \\equiv C_{n \\ mod \\ p}^{m \\ mod \\ p} * C_{n / p}^{m/p} （mod \\ p)</script><p>右边第一项中的<script type=\"math/tex\">n \\ mod \\ p</script>和<script type=\"math/tex\">m \\ mod \\ p</script>一定小于p，可以直接按上述方法计算，右边第二项$C_{n/p}^{m/p}$可以继续使用Lucas定理展开。 </p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        LL n, m, p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; Lucas(n + m, m, p) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Luogu-P2480-古代猪文\"><a href=\"#2-Luogu-P2480-古代猪文\" class=\"headerlink\" title=\"(2) Luogu P2480 古代猪文\"></a>(2) Luogu P2480 古代猪文</h2><p><a href=\"https://www.luogu.com.cn/problem/P2480\">题目链接</a> </p>\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>给定整数$n,q$，求  </p>\n<script type=\"math/tex; mode=display\">q^{\\sum_{d|n}C_n^d } \\ mod \\ 999911659</script><p>的值.（999911659是质数）.</p>\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>根据费马小定理：$p$为质数且$a,p$互质时,有</p>\n<script type=\"math/tex; mode=display\">a^{p - 1} \\equiv 1 (mod \\ p)</script><p>推论</p>\n<script type=\"math/tex; mode=display\">a^x \\equiv a^{x \\ mod \\ (p - 1)} (mod \\ p)</script><p>所以，要计算$ q^{\\sum_{d|n}C_n^d }  mod  999911659 $，只需先算出$x = \\sum_{d|n}C_n^d  mod  (999911658)$,再计算$q^x  mod  999911659$.<br>所以现在只需考虑如何去计算$x$.<br>对于$n$的每个约数$d$,要计算$C_n^d  mod  999911658$,考虑使用Lucas定理，但999911658不是质数，不满足Lucas定理的条件。<br>将999911658分解质因数，得$999911658 = 2 \\times 3 \\times 4679 \\times 35617$.将这4个质因数分别记为$a_1,a_2,a_3,a_4$.<br>可用Lucas定理分别求出$\\sum_{d|n}C_n^d$对质数$a_1,a_2,a_3,a_4$取模的结果，分别记为$b_1,b_2,b_3,b_4$<br>最后，用中国剩余定理求解线性同余方程组：  </p>\n<script type=\"math/tex; mode=display\">\\begin{cases} x \\ mod \\ a_1 = b_1 \\\\ x \\ mod \\ a_2 = b_2 \\\\ x \\ mod \\ a_3 = b_3 \\\\ x \\ mod \\ a_4 = b_4\n\\end{cases}</script><p>求出其最小正整数解，就是$x = \\sum_{d|n}C_n^d  mod  999911658 $的值。 用快速幂算出 <script type=\"math/tex\">q^x \\ mod \\ 999911659</script> 的值即为最终结果.<br>另外，当q是质数999911659的倍数时，不满足费马小定理的条件，不能使用上述过程求解，需要特殊处理，直接输出0.</p>\n<p>实现细节见代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组合数</span></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL a = <span class=\"number\">1</span>; <span class=\"comment\">//分子</span></span><br><span class=\"line\">    LL b = <span class=\"number\">1</span>; <span class=\"comment\">//分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = m + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a = a * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= n - m; i++)</span><br><span class=\"line\">        b = b * i % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * pow_mod(b, p - <span class=\"number\">2</span>, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n, LL m, LL p)</span> </span>&#123; <span class=\"comment\">//用lucs定理计算C(n,m) % p 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n - m &lt; p)           <span class=\"comment\">// n - m &lt; p 时可直接计算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n, m, p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// n &gt;= p 递归使用lucas定理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LL P = <span class=\"number\">999911659</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a[1] - a[4]为 999911658的四个质因数。</span></span><br><span class=\"line\">LL a[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4679</span>, <span class=\"number\">35617</span>&#125;;</span><br><span class=\"line\">LL b[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LL n, q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q % P == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// q是p的倍数，直接输出0</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d * d &lt;= n; d++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % d == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                b[i] = (b[i] + Lucas(n, d, a[i])) % a[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d * d != n) &#123;</span><br><span class=\"line\">                    b[i] = (b[i] + Lucas(n, n / d, a[i])) % a[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//用中国剩余定理求解同余方程组</span></span><br><span class=\"line\">    LL x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        LL M = (P - <span class=\"number\">1</span>) / a[i];</span><br><span class=\"line\">        x = (x + (b[i] * M % (P - <span class=\"number\">1</span>)) * pow_mod(M, a[i] - <span class=\"number\">2</span>, a[i])) % (P - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; pow_mod(q, x, P) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"算法模板","mathjax":true,"date":"2021-05-12T14:58:44.000Z","_content":"\n\n# 图论\n\n## 网络流\n\n### EK算法\n复杂度$O(nm^2)$\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 1010;\nconst int maxm = 20000;\nconst int INF = 0x3f3f3f3f;\n\nint from[maxm], to[maxm], cap[maxm];\nint fir[maxn], nxt[maxm];\nint tot;\n\nvoid add(int u, int v, int c) {\n    tot++;\n    from[tot] = u;\n    to[tot] = v;\n    cap[tot] = c;\n\n    nxt[tot] = fir[u];\n    fir[u] = tot;\n}\n\nint n, m, s, t;\n\nint pre[maxn], flow[maxn];\nbool vis[maxn];\nint q[maxn], l, r;\n\nbool bfs() {\n    memset(vis, false, sizeof vis);\n\n    flow[s] = INF;\n    vis[s] = true;\n\n    l = r = 0;\n    q[++r] = s;\n\n    while (l < r) {\n        int u = q[++l];\n        for (int e = fir[u]; e; e = nxt[e])\n            if (cap[e] > 0) {\n                int v = to[e];\n                if (!vis[v]) {\n                    flow[v] = min(flow[u], cap[e]);\n                    q[++r] = v;\n                    vis[v] = true;\n                    pre[v] = e;\n\n                    if (v == t) return true;\n                }\n            }\n    }\n    return false;\n}\n\nint EK() {\n    int res = 0;\n\n    while (bfs()) {\n        int k = flow[t];\n        res += k;\n\n        for (int u = t; u != s; u = from[pre[u]]) {\n            cap[pre[u]] -= k;\n            cap[pre[u] ^ 1] += k;\n        }\n    }\n    return res;\n}\n\nint main() {\n\n    scanf(\"%d%d%d%d\", &n, &m, &s, &t);\n\n    int u, v, w;\n    tot = 1;\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add(u, v, w);\n        add(v, u, 0);\n    }\n\n    printf(\"%d\\n\", EK());\n\n    return 0;\n}\n```\n\n\n### Dinic算法\n复杂度$O(n^2m)$ (~~笑话~~)\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 1010;\nconst int maxm = 20000;\nconst int INF = 0x3f3f3f3f;\n\nint from[maxm], to[maxm], cap[maxm];\nint fir[maxn], nxt[maxm];\nint tot;\n\nvoid add(int u, int v, int c) {\n    tot++;\n    from[tot] = u;\n    to[tot] = v;\n    cap[tot] = c;\n\n    nxt[tot] = fir[u];\n    fir[u] = tot;\n}\n\nint n, m, s, t;\n\nint pre[maxn], flow[maxn];\nbool vis[maxn];\nint q[maxn], l, r;\n\nbool bfs() {\n    memset(vis, false, sizeof vis);\n\n    flow[s] = INF;\n    vis[s] = true;\n\n    l = r = 0;\n    q[++r] = s;\n\n    while (l < r) {\n        int u = q[++l];\n        for (int e = fir[u]; e; e = nxt[e])\n            if (cap[e] > 0) {\n                int v = to[e];\n                if (!vis[v]) {\n                    flow[v] = min(flow[u], cap[e]);\n                    q[++r] = v;\n                    vis[v] = true;\n                    pre[v] = e;\n\n                    if (v == t) return true;\n                }\n            }\n    }\n    return false;\n}\n\nint EK() {\n    int res = 0;\n\n    while (bfs()) {\n        int k = flow[t];\n        res += k;\n\n        for (int u = t; u != s; u = from[pre[u]]) {\n            cap[pre[u]] -= k;\n            cap[pre[u] ^ 1] += k;\n        }\n    }\n    return res;\n}\n\nint main() {\n\n    scanf(\"%d%d%d%d\", &n, &m, &s, &t);\n\n    int u, v, w;\n    tot = 1;\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add(u, v, w);\n        add(v, u, 0);\n    }\n\n    printf(\"%d\\n\", EK());\n\n    return 0;\n}\n```\n\n# 数据结构\n## 树状数组\n\n### 1.单点修改，区间查询\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000000 + 100;\ntypedef long long LL;\n\nLL C[maxn];\n\nint n, q;\n\ninline int lowbit(int x) {\n    return x & -x;\n}\n\nLL sum(int x) {\n    LL res = 0;\n    for (; x; x -= lowbit(x))\n        res += C[x];\n    return res;\n}\n\nvoid add(int x, LL v) {\n    for (; x <= n; x += lowbit(x))\n        C[x] += v;\n}\n\nint main() {\n\n    int v, op, l, r;\n    cin >> n >> q;\n\n    for (int i = 1; i <= n; i++) {\n        cin >> v;\n        add(i, v);\n    }\n\n    while (q--) {\n        cin >> op >> l >> r;\n\n        if (op == 2) {\n            cout << sum(r) - sum(l - 1) << endl;\n        } else {\n            add(l, r);\n        }\n    }\n\n    return 0;\n}\n```\n\n### 2. 区间修改，单点查询 （差分）\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long LL;\nconst int maxn = 1000000 + 100;\n\nLL a[maxn], C[maxn];\nint n, q;\n\nint lowbit(int x) {\n    return x & -x;\n}\n\nLL sum(int x) {\n    LL res = 0;\n    for (; x; x -= lowbit(x))\n        res += C[x];\n\n    return res;\n}\n\nvoid add(int x, LL v) {\n    for (; x <= n; x += lowbit(x))\n        C[x] += v;\n}\n\nint main() {\n    cin >> n >> q;\n\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    for (int i = n; i >= 1; i--) {\n        a[i] -= a[i - 1];\n        add(i, a[i]);\n    }\n\n    int op, l, r, v;\n    for (int i = 1; i <= q; i++) {\n        cin >> op;\n\n        if (op == 1) {\n            cin >> l >> r >> v;\n            add(l, v);\n            add(r + 1, -v);\n        }\n\n        if (op == 2) {\n            cin >> v;\n            cout << sum(v) << endl;\n        }\n    }\n    return 0;\n}\n```\n\n### 3. 区间修改，区间查询\n```cpp\n#include <bits/stdc++.h>\n\ntypedef long long LL;\nusing namespace std;\nconst int maxn = 1000000 + 100;\n\n//delta[i] 表示 a[i], a[i + 1] .... a[n]  都要加上一个数delta[i]\n//树状数组 C1用于维护delta[i], 树状数组C2维护 i * delta[i]\n//前缀和 sum[i] = (i + 1) sum_delta[i] - sum_i*delta[i] \n\nLL C1[maxn], C2[maxn];\nint n;\n\nint lowbit(int x) {\n    return x & -x;\n}\n\nvoid add(int pos, LL v) {\n    for (int i = pos; i <= n; i += lowbit(i)) {\n        C1[i] += v;\n    }\n    for (int i = pos; i <= n; i += lowbit(i)) {\n        C2[i] += v * pos;\n    }\n}\n\nLL sum(int pos) {\n    LL res = 0;\n    for (int i = pos; i; i -= lowbit(i)) {\n        res += (pos + 1) * C1[i];\n    }\n    for (int i = pos; i; i -= lowbit(i)) {\n        res -= C2[i];\n    }\n    return res;\n}\n\nint main() {\n    int q;\n    cin >> n >> q;\n\n    int op, l, r;\n    LL v;\n\n    for (int i = 1; i <= n; i++) {\n        cin >> v;\n        add(i, v);\n        add(i + 1, -v);\n    }\n\n    while(q--) {\n        cin >> op;\n        if(op == 1) {\n            cin >> l >> r >> v;\n            add(l, v);\n            add(r + 1, -v);\n        }\n        else if(op == 2) {\n            cin >> l >> r;\n            cout << sum(r) - sum(l - 1) << endl;\n        }\n    }\n    return 0;\n}\n```\n\n\n## 线段树\n\n### 1. 区间加法， 区间求和\n```cpp\nstruct SegmentTree {\n    LL sumv[maxn * 4], addv[maxn * 4]; //原数组大小的四倍\n\n    void maintain(int o) {\n        sumv[o] = sumv[lc] + sumv[rc];\n    }\n\n    void pushdown(int o,int L,int R) { //标记下传\n        int M = L+R>>1;\n        addv[lc] += addv[o];\n        sumv[lc] += addv[o] *( M-L +1);\n\n        addv[rc] += addv[o];\n        sumv[rc] += addv[o] *(R-M);\n\n        addv[o] = 0;\n\n    }\n\n    void build(int o, int L, int R) {\n        if (L == R) {\n            sumv[o] = v[L];\n            return;\n        }\n        int M = L + R >> 1;\n        build(lc, L, M);\n        build(rc, M + 1, R);\n        maintain(o);\n    }\n\n    LL query(int o, int L, int R, int l, int r) {\n        if (l <= L && r >= R) return sumv[o];\n        pushdown(o,L,R);\n        int M = L + R >> 1;\n        LL sum = 0;\n        if(l <= M) sum += query(lc,L,M,l,r);\n        if(r > M) sum += query(rc,M+1,R,l,r);\n        return sum;\n    }\n\n    void update(int o,int L,int R,int l,int r,LL x){\n        if(l <= L && r >= R){\n            addv[o] += x;\n            sumv[o] += (R-L+1) * x;\n            return;\n        }\n        pushdown(o,L,R);\n        int M = L+R>>1;\n        if(l <= M) update(lc,L,M,l,r,x);\n        if(r > M ) update(rc,M+1,R,l,r,x);\n        maintain(o);\n    }\n\n\n} T;\n```\n\n\n## 2. 区间加法， 乘法， 区间求和\n\n```cpp\nstruct SegmentTree {\n    LL sumv[maxn], addv[maxn], mulv[maxn];\n\n    void maintain(int o) {\n        sumv[o] = sumv[lc] + sumv[rc];\n    }\n\n    void pushdown(int o, int L, int R) {\n        int M = L + R >> 1;\n        if (mulv[o] != 1) {\n            mulv[lc] *= mulv[o];\n            addv[lc] *= mulv[o];\n            sumv[lc] *= mulv[o];\n\n            mulv[rc] *= mulv[o];\n            addv[rc] *= mulv[o];\n            sumv[rc] *= mulv[o];\n\n            mulv[o] = 1;\n        }\n        if (addv[o]) {\n            addv[lc] += addv[o];\n            sumv[lc] += addv[o] * (M - L + 1);\n\n            addv[rc] += addv[o];\n            sumv[rc] += addv[o] * (R - M);\n\n            addv[o] = 0;\n        }\n    }\n\n    void build(int o, int L, int R) {\n        addv[o] = 0;\n        mulv[o] = 1;\n        if (L == R) {\n            sumv[o] = v[L];\n            return;\n        }\n        int M = L + R >> 1;\n        build(lc, L, M);\n        build(rc, M + 1, R);\n        maintain(o);\n    }\n\n    LL query(int o, int L, int R, int l, int r) {\n        if (l <= L && r >= R) return sumv[o];\n        pushdown(o, L, R);\n        int M = L + R >> 1;\n        LL sum = 0;\n        if (l <= M) sum += query(lc, L, M, l, r);\n        if (r > M) sum += query(rc, M + 1, R, l, r);\n        return sum;\n    }\n\n    void update_add(int o, int L, int R, int l, int r, int x) {\n        if (l <= L && r >= R) {\n            addv[o] += x;\n            sumv[o] += x * (R - L + 1);\n            return;\n        }\n        pushdown(o, L, R);\n        int M = L + R >> 1;\n        if (l <= M) update_add(lc, L, M, l, r, x);\n        if (r > M) update_add(rc, M + 1, R, l, r, x);\n        maintain(o);\n    }\n\n    void update_mul(int o, int L, int R, int l, int r, int x) {\n        if (l <= L && r >= R) {\n            mulv[o] *= x;\n            addv[o] *= x;\n            sumv[o] *= x;\n            return;\n        }\n        pushdown(o, L, R);\n        int M = L + R >> 1;\n        if (l <= M) update_mul(lc, L, M, l, r, x);\n        if (r > M) update_mul(rc, M + 1, R, l, r, x);\n        maintain(o);\n    }\n} T;\n```\n\n# 数学\n\n## 数论\n### Baby Step Giant Step算法\nBaby Step, Giant Step算法:  \n求解不定方程 $a^x = b \\ (mod \\ p) \\quad (a,p互质)$  \n设$x = it - j \\ ( 1 \\le i \\le t, \\ 0 \\le j \\le t ) \\quad (t ^ 2 \\ge p)  $ \n注意$i$不能从0开始，否则会产生负数解  \nj必须取到t， 否则可能漏解 $x = 0$ \n$a^{i*t} = b*a^j \\ (mod \\ p)$\n先枚举右边并存到哈希表，然后枚举左边的值，并在哈希表中查找解。\n```cpp\nLL bsgs(LL a, LL b, LL p) {\n    b %= p;\n    unordered_map<LL, LL> hash;\n    LL t = sqrt(p) + 1;\n    LL x = 1;\n    for (LL j = 0; j < t; j++) {\n        LL val = b * x % p;\n        hash[val] = j;\n        x = x * a % p;\n    }\n    hash[b * x % p] = t;\n    a = x;\n    for (LL i = 1; i <= t; i++) {\n        if (hash.count(x)) {\n            return i * t - hash[x];\n        }\n        x = x * a % p;\n    }\n    return -1;\n}\n```\n### 扩展BSGS\n题目同上， 但不保证 a p互质  \n\n$a^x = b \\ mod \\ p$\n1. 先判断 $x = 0$ 是不是解, 是则直接返回\n2. 设 $d = gcd(a, p)$，如果$b \\nmid d$,则无解，否则$\\frac{a}{d}a^{x - 1} = \\frac{b}{d} \\ mod \\ \\frac{p}{d}$\n3. $a^{x - 1} = \\frac{b}{d} (\\frac{a}{d})^{-1} \\ mod \\ \\frac{p}{d}$，递归求解  \n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long LL;\nconst LL INF = 0x3f3f3f3f3f3f3f3f;\n\nLL exgcd(LL a, LL b, LL& x, LL& y) {\n    if (b == 0) {\n        x = 1, y = 0;\n        return a;\n    } else {\n        LL d = exgcd(b, a % b, y, x);\n        y -= a / b * x;\n        return d;\n    }\n}\n\nLL bsgs(LL a, LL b, LL p) {\n    b %= p;\n\n    unordered_map<LL, LL> hash;\n    LL x = 1;\n    LL t = sqrt(p) + 1;\n\n    for (int j = 0; j < t; j++) {\n        hash[x * b % p] = j;\n        x = x * a % p;\n    }\n    hash[x * b % p] = t;\n\n    a = x;\n    for (int i = 1; i <= t; i++) {\n        if (hash.count(x)) return i * t - hash[x];\n        x = x * a % p;\n    }\n    return -INF;\n}\n\nLL exbsgs(LL a, LL b, LL p) {\n    if (1 % p == b % p) return 0;\n\n    LL x, y, d;\n    d = exgcd(a, p, x, y);\n    if (d == 1) {\n        return bsgs(a, b, p);\n    } else {\n        if (b % d) return -INF;\n        p /= d;\n        //a / d 模 p的逆元\n        exgcd(a / d, p, x, y);\n        x = (x % p + p) % p;\n        return 1 + exbsgs(a, b / d * x % p, p);\n    }\n}\n\nint main() {\n    LL a, p, b;\n    while (cin >> a >> p >> b, a || p || b) {\n        LL res = exbsgs(a, b, p);\n        if (res < 0)\n            cout << \"No Solution\" << endl;\n        else\n            cout << res << endl;\n    }\n\n    return 0;\n}\n```\n\n## 多项式卷积\n### 快速傅里叶变换FFT\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nconst int maxn = 300000 + 100;\nconst double pi = acos(-1);\n\nstruct Complex {\n    double x, y;\n\n    Complex() {\n        x = y = 0;\n    }\n    Complex(double x, double y) : x(x), y(y) {}\n\n    Complex operator+(const Complex& b) const {\n        return Complex(x + b.x, y + b.y);\n    }\n\n    Complex operator-(const Complex& b) const {\n        return Complex(x - b.x, y - b.y);\n    }\n\n    Complex operator*(const Complex& b) const {\n        return Complex(x * b.x - y * b.y, x * b.y + y * b.x);\n    }\n} a[maxn], b[maxn];\n\nint rev[maxn];\nint n, m, N, l;\n\nvoid fft(Complex* A, int N, int type) {\n\n    for (int i = 0; i < N; i++)\n        if (rev[i] < i)\n            swap(A[i], A[rev[i]]);\n\n    for (int len = 2; len <= N; len <<= 1) {\n        int m = len >> 1;\n        Complex wn(cos(2 * pi / len), type * sin(2 * pi / len));\n        for (int j = 0; j < N; j += len) {\n            Complex w(1, 0);\n\n            for (int i = 0; i < m; i++) {\n                Complex u = A[j + i];\n                Complex v = A[j + i + m];\n\n                A[j + i] = u + w * v;\n                A[j + i + m] = u - w * v;\n\n                w = w * wn;\n            }\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i <= n; i++)\n        scanf(\"%lf\", &a[i].x);\n    for (int i = 0; i <= m; i++)\n        scanf(\"%lf\", &b[i].x);\n    N = 1, l = 0;\n    while (N < n + m + 1) {\n        N <<= 1;\n        l++;\n    }\n    \n    for (int i = 0; i < N; i++)\n        rev[i] = rev[i >> 1] >> 1 | (i & 1) << (l - 1);\n    \n    fft(a, N, 1);\n    fft(b, N, 1);\n    \n    for (int i = 0; i < N; i++)\n        a[i] = a[i] * b[i];\n    \n    fft(a, N, -1);\n\n    for (int i = 0; i <= n + m; i++)\n        printf(\"%d \", (int)(a[i].x / N + 0.5));\n\n    return 0;\n}\n```\n\n### 快速数论变换 NTT\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst LL P = 998244353;\nconst LL g = 3;\nconst int maxn = 300000 + 100;\n\nint n, m, N, l;\n\nLL a[maxn], b[maxn];\nint rev[maxn];\n\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res;\n}\n\nvoid fft(LL* A, int N, int type) {\n    for (int i = 0; i < N; i++)\n        if (rev[i] < i)\n            swap(A[i], A[rev[i]]);\n\n    for (int len = 2; len <= N; len <<= 1) {\n        int m = len / 2;\n        LL wn = pow_mod(g, (P - 1) / len, P);\n        if (type == -1)\n            wn = pow_mod(wn, P - 2, P);\n        for (int j = 0; j < N; j += len) {\n            LL w = 1;\n\n            for (int i = 0; i < m; i++) {\n                LL u = A[j + i];\n                LL v = A[j + i + m];\n\n                A[j + i] = (u + w * v % P) % P;\n                A[j + i + m] = (u - w * v % P + P) % P;\n\n                w = w * wn % P;\n            }\n        }\n    }\n}\n\nint main() {\n\n    scanf(\"%d%d\", &n, &m);\n\n    for (int i = 0; i <= n; i++)\n        scanf(\"%lld\", a + i);\n    for (int i = 0; i <= m; i++)\n        scanf(\"%lld\", b + i);\n\n    N = 1, l = 0;\n    while (N < n + m + 1) {\n        N <<= 1;\n        l++;\n    }\n\n    for (int i = 0; i < N; i++)\n        rev[i] = rev[i >> 1] >> 1 | (i & 1) << (l - 1);\n\n    fft(a, N, 1);\n    fft(b, N, 1);\n\n    for (int i = 0; i < N; i++)\n        a[i] = a[i] * b[i] % P;\n\n    fft(a, N, -1);\n\n    LL aN = pow_mod(N, P - 2, P);\n\n    for (int i = 0; i <= n + m; i++)\n        printf(\"%lld \", a[i] * aN % P);\n\n    return 0;\n}\n```\n### 多项式求逆\n如果$F(x) * G(x) \\equiv 1 \\ mod \\ x^n $ (系数对998255435取模)，则称多项式$G(x)$是多项式$F(x)$的逆。  \n\n如果$F(x)*H(x) \\equiv 1 \\ mod \\ x^{t}$  \n$G(x) = 2H(x) - F(x) * H^2(x)$  \n则$F(x)*G(x) \\equiv 1 \\ mod \\ x^{2*t}$  \n从$t = 1$开始向上递推， 直到$t$不小于$n$  \n\n```cpp\nint main() {\n    int n;\n    n = readIn();\n\n    for (int i = 0; i < n; i++)\n        F[i] = readIn();\n\n    G[0] = pow_mod(F[0], P - 2, P);\n    int t = 1;\n    //G[x] * F[x] = 1 (mod x^t)\n    while (t < n) {\n        t <<= 1;\n        int N = 1, l = 0;\n\n        while (N <= t) {\n            N <<= 1;\n            l++;\n        }\n         \n        for (int i = 0; i < N; i++)\n            rev[i] = rev[i >> 1] >> 1 | (i & 1) << (l - 1);\n\n        for (int i = 0; i < t; i++)\n            T[i] = F[i];\n        for (int i = t; i < N; i++)\n            T[i] = 0;\n\n        ntt(G, N, 1);\n        ntt(T, N, 1);\n\n        for (int i = 0; i < N; i++) {\n            G[i] = (2 * G[i] % P - (T[i] * G[i] % P) * G[i] % P + P) % P;\n        }\n\n        ntt(G, N, -1);\n        LL aN = pow_mod(N, P - 2, P);\n        for (int i = 0; i < N; i++) {\n            G[i] = G[i] * aN % P;\n        }\n        for (int i = t; i < N; i++)\n            G[i] = 0;\n    }\n\n    for (int i = 0; i <= n; i++)\n        printf(\"%lld \", G[i]);\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n# 其它\n## 莫队\n### 普通莫队\n题目: HH的项链\n查询:区间[l, r]是有多少种不同的颜色  \n莫队排序:\n先考虑左端点所在块编号\n再考虑右端点编号\n\n块长度 $len = \\sqrt{n^2 / m}$\n时间复杂度 $O(\\sqrt{n^2 / m})$\n\n``` cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 50000 + 100;\nconst int maxm = 200000 + 100;\nconst int maxs = 1000000 + 100;\n\nint color[maxn];\nint cnt[maxs];\nint n, m, len;\n\nint ans[maxm];\n\ninline void add(int i, int& res) {\n    if (cnt[color[i]] == 0)\n        res++;\n    cnt[color[i]]++;\n}\n\ninline void del(int i, int& res) {\n    if (cnt[color[i]] == 1)\n        res--;\n    cnt[color[i]]--;\n}\n\ninline int get(int i) {\n    return i / len;\n}\n\nstruct Query {\n    int id, l, r;\n\n    bool operator<(const Query& phs) {\n        if (get(l) == get(phs.l)) {\n            return r < phs.r;\n        }\n        return get(l) < get(phs.l);\n    }\n\n} q[maxm];\n\nint read() {\n    int x = 0;\n    char c = getchar();\n    while (c < '0' || c > '9') {\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = (x << 3) + (x << 1) + c - '0';\n        c = getchar();\n    }\n    return x;\n}\n\nint main() {\n\n    n = read();\n    for (int i = 1; i <= n; i++)\n        color[i] = read();\n\n    m = read();\n    for (int i = 1; i <= m; i++) {\n        q[i].id = i;\n        q[i].l = read();\n        q[i].r = read();\n    }\n\n    len = sqrt((double) n * n / m);\n\n    sort(q + 1, q + 1 + m);\n\n    int i = 1, j = 0;\n    int res = 0;\n    for (int k = 1; k <= m; k++) {\n        while (i < q[k].l)\n            del(i++, res);\n        while (i > q[k].l)\n            add(--i, res);\n        while (j < q[k].r)\n            add(++j, res);\n        while (j > q[k].r)\n            del(j--, res);\n        ans[q[k].id] = res;\n    }\n\n    for (int i = 1; i <= m; i++)\n        printf(\"%d\\n\", ans[i]);\n\n    return 0;\n}\n```\n\n### 带修改的莫队\n题目: 数颜色 Luogu P3939 \n按每次修改操作划分时间戳  \n排序:  \n1. 左端点块编号\n2. 右端点块编号\n3. 时间戳\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10000 + 10;\n\nint color[maxn];\nint cnt[1000000 + 100];\n\nint len;\n\nint get(int x) {\n    return x / len;\n}\n\nstruct Query {\n    int id, l, r, t;\n\n    bool operator<(const Query& phs) const {\n        int la = get(l);\n        int ra = get(r);\n        int lb = get(phs.l);\n        int rb = get(phs.r);\n\n        if (la != lb) return la < lb;\n        if (ra != rb) return ra < rb;\n        return t < phs.t;\n    }\n\n} query[maxn];\n\nstruct Replace {\n    int pos;\n    int col;\n} rp[1010];\n\nvoid add(int v, int& res) {\n    if (cnt[v] == 0)\n        res++;\n    cnt[v]++;\n}\nvoid del(int v, int& res) {\n    if (cnt[v] == 1)\n        res--;\n    cnt[v]--;\n}\n\nint ans[maxn];\n\nint main() {\n\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n\n    for(int i = 1;i <= n; i++)\n        scanf(\"%d\", color + i);\n\n    char op[2];\n    int l, r;\n\n    int cq = 0;\n    int ct = 0;\n\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%s%d%d\", op, &l, &r);\n        if (*op == 'Q') {\n            cq++;\n            query[cq] = {cq, l, r, ct};\n        } else {\n            rp[++ct] = {l, r};\n        }\n    }\n    len = pow(n * ct, 1.f / 3) + 1;\n    sort(query + 1, query + cq + 1);\n\n    int res = 0;\n    int i = 1, j = 0;\n    int t = 0;\n    for (int k = 1; k <= cq; k++) {\n\n        int id = query[k].id;\n        int l = query[k].l;\n        int r = query[k].r;\n\n        while (i > l)\n            add(color[--i], res);\n        while (i < l)\n            del(color[i++], res);\n        while (j < r)\n            add(color[++j], res);\n        while (j > r)\n            del(color[j--], res);\n\n        while (t < query[k].t) {\n            t++;\n            if (rp[t].pos >= l && rp[t].pos <= r) {\n                del(color[rp[t].pos], res);\n                add(rp[t].col, res);\n            }\n            swap(rp[t].col, color[rp[t].pos]);\n        }\n        while (t > query[k].t) {\n            if (rp[t].pos >= l && rp[t].pos <= r) {\n                del(color[rp[t].pos], res);\n                add(rp[t].col, res);\n            }\n            swap(rp[t].col, color[rp[t].pos]);\n            t--;\n        }\n        ans[id] = res;\n    }\n\n    for (int i = 1; i <= cq; i++)\n        printf(\"%d\\n\", ans[i]);\n\n    return 0;\n}\n```\n\n### 带回滚的莫队\n题目: 历史研究 luogu AT1219 \n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int maxn = 100000 + 100;\n\nint color[maxn];\nvector<int> temp;\n\nint cnt[maxn];\nLL ans[maxn];\n\nint len;\n\ninline int get(int x) {\n    return x / len;\n}\n\nstruct Query {\n    int id, l, r;\n\n    bool operator<(const Query& phs) {\n        int la = get(l);\n        int lb = get(phs.l);\n        if (la != lb) return la < lb;\n        return r < phs.r;\n    }\n} query[maxn];\n\nvoid add(int x, LL& res) {\n    cnt[x]++;\n    if ((LL)temp[x] * cnt[x] > res)\n        res = (LL)temp[x] * cnt[x];\n}\n\nint readIn() {\n    int x = 0;\n    char c = getchar();\n    while (c < '0' || c > '9')\n        c = getchar();\n\n    while (c >= '0' && c <= '9') {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n    return x;\n}\n\nint main() {\n\n    int n, m;\n    n = readIn();\n    m = readIn();\n    len = sqrt(n);\n\n    for (int i = 1; i <= n; i++) {\n        color[i] = readIn();\n        temp.push_back(color[i]);\n    }\n\n    //离散化\n    sort(temp.begin(), temp.end());\n    temp.erase(unique(temp.begin(), temp.end()), temp.end());\n    for (int i = 1; i <= n; i++) {\n        color[i] = lower_bound(temp.begin(), temp.end(), color[i]) - temp.begin();\n    }\n\n    for (int i = 1; i <= m; i++) {\n        query[i].id = i;\n        cin >> query[i].l >> query[i].r;\n    }\n\n    sort(query + 1, query + 1 + m);\n\n    for (int x = 1; x <= m;) {\n        int y = x;\n\n        //块号\n        int block = get(query[x].l);\n\n        //块的右端点\n        int right = (len - 1) + block * len;\n\n        while (y <= m && query[y].l <= right)\n            y++;\n\n        while (x < y && query[x].r <= right) {\n            LL res = 0;\n            for (int i = query[x].l; i <= query[x].r; i++)\n                add(color[i], res);\n            ans[query[x].id] = res;\n\n            for (int i = query[x].l; i <= query[x].r; i++)\n                cnt[color[i]]--;\n\n            x++;\n        }\n\n        int r = right;\n        LL res = 0;\n        while (x < y) {\n            while (r < query[x].r) {\n                add(color[++r], res);\n            }\n\n            LL backup = res;\n\n            for (int i = right; i >= query[x].l; i--)\n                add(color[i], res);\n\n            ans[query[x].id] = res;\n\n            res = backup;\n            for (int i = right; i >= query[x].l; i--)\n                cnt[color[i]]--;\n\n            x++;\n        }\n\n        memset(cnt, 0, sizeof(cnt));\n    }\n\n    for (int i = 1; i <= m; i++)\n        cout << ans[i] << endl;\n\n    return 0;\n}\n```\n\n### 树上莫队\n题目:   \n查询树上(u -> v) 路径上不同权值的个数  \n做法:  \n转化为dfs序上的区间问题，然后莫队  \n\nfirst[u], last[u] 分别为u在dfs序上前后两次出现的位置， \n刚(u -> v) (保证u在dfs序中的第一次出现先于v) 可转化为:\n1. 如果lca(u, v) == u: first[u] ~ first[v]中只出现一次的节点\n2. 如果lca(u, v) != u: last[u] ~ first[v]中只出现一次的节点 + lca\n\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\nconst int maxn = 100000 + 100;\n\nint color[maxn];\nvector<int> nums;\n\n//邻接表\nint to[maxn], fir[maxn];\nint nxt[maxn], idx;\n\nint n, m, len;\n\n//莫队\nint cnt[maxn], vis[maxn];\nint ans[maxn];\n\ninline int get(int x) {\n    return x / len;\n}\n\nstruct Query {\n    int id, l, r, p;\n\n    bool operator<(const Query& phs) const {\n        int la = get(l);\n        int lb = get(phs.l);\n        if (la != lb) return la < lb;\n        return r < phs.r;\n    }\n\n} query[maxn];\n\ninline void add_edge(int u, int v) {\n    idx++;\n    to[idx] = v;\n    nxt[idx] = fir[u];\n    fir[u] = idx;\n}\n\n//LCA\nint dep[maxn], st[maxn][16];\n\n//欧拉序列\nint seq[maxn], top;\nint first[maxn], last[maxn];\n\nvoid dfs(int u, int father) {\n\n    seq[++top] = u;\n    first[u] = top;\n\n    for (int e = fir[u], v = to[e]; e; e = nxt[e], v = to[e])\n        if (v != father) {\n            dep[v] = dep[u] + 1;\n            st[v][0] = u;\n            for (int k = 1; k <= 15; k++)\n                st[v][k] = st[st[v][k - 1]][k - 1];\n            dfs(v, u);\n        }\n    seq[++top] = u;\n    last[u] = top;\n}\n\ninline int LCA(int a, int b) {\n    if (dep[a] < dep[b])\n        swap(a, b);\n\n    for (int k = 15; k >= 0; k--)\n        if (dep[st[a][k]] >= dep[b])\n            a = st[a][k];\n\n    if (a == b)\n        return a;\n\n    for (int k = 15; k >= 0; k--)\n        if (st[a][k] != st[b][k]) {\n            a = st[a][k];\n            b = st[b][k];\n        }\n\n    return st[a][0];\n}\n\ninline void add(int x, int& res) {\n    vis[x] ^= 1;\n\n    if (vis[x]) {\n        cnt[color[x]]++;\n        if (cnt[color[x]] == 1)\n            res++;\n    } else {\n        cnt[color[x]]--;\n        if (cnt[color[x]] == 0)\n            res--;\n    }\n}\n\nint main() {\n\n    scanf(\"%d%d\", &n, &m);\n\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", color + i);\n        nums.push_back(color[i]);\n    }\n    //离散化\n    sort(nums.begin(), nums.end());\n    nums.erase(unique(nums.begin(), nums.end()), nums.end());\n    for (int i = 1; i <= n; i++)\n        color[i] = lower_bound(nums.begin(), nums.end(), color[i]) - nums.begin();\n\n    //读入树的边\n    int a, b;\n    for (int i = 1; i < n; i++) {\n        scanf(\"%d%d\", &a, &b);\n        add_edge(a, b);\n        add_edge(b, a);\n    }\n\n    //求欧拉序列并初始化st表\n    dep[1] = 1;\n    dfs(1, 0);\n\n    //读入询问并排序\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d\", &a, &b);\n        if (first[a] > first[b])\n            swap(a, b);\n        int lca = LCA(a, b);\n        if (lca == a) {\n            query[i] = {i, first[a], first[b], 0};\n        } else {\n            query[i] = {i, last[a], first[b], lca};\n        }\n    }\n\n    len = sqrt(top) + 1;\n    sort(query + 1, query + 1 + m);\n\n    int res = 0;\n    int i = 1, j = 0;\n    for (int k = 1; k <= m; k++) {\n        int id = query[k].id, l = query[k].l, r = query[k].r, p = query[k].p;\n\n        while (j < r)\n            add(seq[++j], res);\n        while (j > r)\n            add(seq[j--], res);\n        while (i > l)\n            add(seq[--i], res);\n        while (i < l)\n            add(seq[i++], res);\n\n        if (p)\n            add(p, res);\n        ans[id] = res;\n        if (p)\n            add(p, res);\n    }\n\n    for (int i = 1; i <= m; i++)\n        printf(\"%d\\n\", ans[i]);\n\n    return 0;\n}\n\n```\n\n\n### 二次离线莫队\n题目: Luogu P4887  \n查询区间[l, r]中满足a[i] xor a[j]的二进制表示中恰好有k个1的对数。\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int maxn = 100000 + 100;\n\nint w[maxn];\n\nstruct Query {\n    int id, l, r;\n    LL res;\n} query[maxn];\n\nstruct Range {\n    int id, l, r, t;\n};\n\nvector<Range> range[maxn];\n\nint n, m, k, len;\n\n//f[i] 1 ~ i 中与 w[i + 1] 配对的个数\n//g[x]前i个数中， 与x配对的个数\n//f[i] = g[w[i + 1]]\nint f[maxn], g[maxn];\nvector<int> nums;\n\ninline int readIn() {\n    int x = 0;\n    char c = getchar();\n    while (c < '0' || c > '9')\n        c = getchar();\n    while (c >= '0' && c <= '9') {\n        x = (x << 3) + (x << 1) + c - '0';\n        c = getchar();\n    }\n    return x;\n}\n\nint get(int x) {\n    return x / len;\n}\n\nbool cmp(const Query& a, const Query& b) {\n    int la = get(a.l);\n    int lb = get(b.l);\n    if (la != lb) return la < lb;\n    return a.r < b.r;\n}\n\nint get_count(int x) { //x二进制表示中1的个数\n    int res = 0;\n    while (x)\n        res += (x & 1), x >>= 1;\n    return res;\n}\n\nLL ans[maxn];\n\nint main() {\n    n = readIn();\n    m = readIn();\n    k = readIn();\n\n    for (int i = 1; i <= n; i++)\n        w[i] = readIn();\n\n    for (int i = 1; i <= m; i++) {\n        query[i].id = i;\n        query[i].l = readIn();\n        query[i].r = readIn();\n    }\n\n    len = sqrt(n) + 1;\n\n    sort(query + 1, query + 1 + m, cmp);\n\n    for (int i = 0; i < (1 << 14); i++)\n        if (get_count(i) == k)\n            nums.push_back(i);\n\n    for (int i = 1; i <= n; i++) {\n\n        for (int t : nums)\n            g[w[i] ^ t]++;\n\n        f[i] = g[w[i + 1]];\n    }\n\n    for (int i = 1, L = 1, R = 0; i <= m; i++) {\n        int l = query[i].l, r = query[i].r;\n\n        if (R < r)\n            range[L - 1].push_back({i, R + 1, r, -1});\n        while (R < r)\n            query[i].res += f[R], R++;\n\n        if (R > r)\n            range[L - 1].push_back({i, r + 1, R, 1});\n        while (R > r)\n            query[i].res -= f[R - 1], R--;\n        if (L < l)\n            range[R].push_back({i, L, l - 1, -1});\n        while (L < l)\n            query[i].res += f[L - 1] + !k, L++;\n\n        if (L > l)\n            range[R].push_back({i, l, L - 1, 1});\n        while (L > l)\n            query[i].res -= f[L - 2] + !k, L--;\n    }\n\n    memset(g, 0, sizeof(g));\n\n    for (int i = 1; i <= n; i++) {\n\n        for (int t : nums)\n            g[w[i] ^ t]++;\n\n        for (Range& rg : range[i]) {\n            int id = rg.id, l = rg.l, r = rg.r;\n            for (int x = l; x <= r; x++)\n                query[id].res += (LL)rg.t * g[w[x]];\n        }\n    }\n\n    for (int i = 2; i <= m; i++)\n        query[i].res += query[i - 1].res;\n\n    for (int i = 1; i <= m; i++)\n        ans[query[i].id] = query[i].res;\n    \n    for(int i = 1; i <= m; i++)\n        printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```","source":"_posts/算法模板.md","raw":"---\ntitle: 算法模板\nmathjax: true\ndate: 2021-05-12 22:58:44\ntags:\n---\n\n\n# 图论\n\n## 网络流\n\n### EK算法\n复杂度$O(nm^2)$\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 1010;\nconst int maxm = 20000;\nconst int INF = 0x3f3f3f3f;\n\nint from[maxm], to[maxm], cap[maxm];\nint fir[maxn], nxt[maxm];\nint tot;\n\nvoid add(int u, int v, int c) {\n    tot++;\n    from[tot] = u;\n    to[tot] = v;\n    cap[tot] = c;\n\n    nxt[tot] = fir[u];\n    fir[u] = tot;\n}\n\nint n, m, s, t;\n\nint pre[maxn], flow[maxn];\nbool vis[maxn];\nint q[maxn], l, r;\n\nbool bfs() {\n    memset(vis, false, sizeof vis);\n\n    flow[s] = INF;\n    vis[s] = true;\n\n    l = r = 0;\n    q[++r] = s;\n\n    while (l < r) {\n        int u = q[++l];\n        for (int e = fir[u]; e; e = nxt[e])\n            if (cap[e] > 0) {\n                int v = to[e];\n                if (!vis[v]) {\n                    flow[v] = min(flow[u], cap[e]);\n                    q[++r] = v;\n                    vis[v] = true;\n                    pre[v] = e;\n\n                    if (v == t) return true;\n                }\n            }\n    }\n    return false;\n}\n\nint EK() {\n    int res = 0;\n\n    while (bfs()) {\n        int k = flow[t];\n        res += k;\n\n        for (int u = t; u != s; u = from[pre[u]]) {\n            cap[pre[u]] -= k;\n            cap[pre[u] ^ 1] += k;\n        }\n    }\n    return res;\n}\n\nint main() {\n\n    scanf(\"%d%d%d%d\", &n, &m, &s, &t);\n\n    int u, v, w;\n    tot = 1;\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add(u, v, w);\n        add(v, u, 0);\n    }\n\n    printf(\"%d\\n\", EK());\n\n    return 0;\n}\n```\n\n\n### Dinic算法\n复杂度$O(n^2m)$ (~~笑话~~)\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 1010;\nconst int maxm = 20000;\nconst int INF = 0x3f3f3f3f;\n\nint from[maxm], to[maxm], cap[maxm];\nint fir[maxn], nxt[maxm];\nint tot;\n\nvoid add(int u, int v, int c) {\n    tot++;\n    from[tot] = u;\n    to[tot] = v;\n    cap[tot] = c;\n\n    nxt[tot] = fir[u];\n    fir[u] = tot;\n}\n\nint n, m, s, t;\n\nint pre[maxn], flow[maxn];\nbool vis[maxn];\nint q[maxn], l, r;\n\nbool bfs() {\n    memset(vis, false, sizeof vis);\n\n    flow[s] = INF;\n    vis[s] = true;\n\n    l = r = 0;\n    q[++r] = s;\n\n    while (l < r) {\n        int u = q[++l];\n        for (int e = fir[u]; e; e = nxt[e])\n            if (cap[e] > 0) {\n                int v = to[e];\n                if (!vis[v]) {\n                    flow[v] = min(flow[u], cap[e]);\n                    q[++r] = v;\n                    vis[v] = true;\n                    pre[v] = e;\n\n                    if (v == t) return true;\n                }\n            }\n    }\n    return false;\n}\n\nint EK() {\n    int res = 0;\n\n    while (bfs()) {\n        int k = flow[t];\n        res += k;\n\n        for (int u = t; u != s; u = from[pre[u]]) {\n            cap[pre[u]] -= k;\n            cap[pre[u] ^ 1] += k;\n        }\n    }\n    return res;\n}\n\nint main() {\n\n    scanf(\"%d%d%d%d\", &n, &m, &s, &t);\n\n    int u, v, w;\n    tot = 1;\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add(u, v, w);\n        add(v, u, 0);\n    }\n\n    printf(\"%d\\n\", EK());\n\n    return 0;\n}\n```\n\n# 数据结构\n## 树状数组\n\n### 1.单点修改，区间查询\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000000 + 100;\ntypedef long long LL;\n\nLL C[maxn];\n\nint n, q;\n\ninline int lowbit(int x) {\n    return x & -x;\n}\n\nLL sum(int x) {\n    LL res = 0;\n    for (; x; x -= lowbit(x))\n        res += C[x];\n    return res;\n}\n\nvoid add(int x, LL v) {\n    for (; x <= n; x += lowbit(x))\n        C[x] += v;\n}\n\nint main() {\n\n    int v, op, l, r;\n    cin >> n >> q;\n\n    for (int i = 1; i <= n; i++) {\n        cin >> v;\n        add(i, v);\n    }\n\n    while (q--) {\n        cin >> op >> l >> r;\n\n        if (op == 2) {\n            cout << sum(r) - sum(l - 1) << endl;\n        } else {\n            add(l, r);\n        }\n    }\n\n    return 0;\n}\n```\n\n### 2. 区间修改，单点查询 （差分）\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long LL;\nconst int maxn = 1000000 + 100;\n\nLL a[maxn], C[maxn];\nint n, q;\n\nint lowbit(int x) {\n    return x & -x;\n}\n\nLL sum(int x) {\n    LL res = 0;\n    for (; x; x -= lowbit(x))\n        res += C[x];\n\n    return res;\n}\n\nvoid add(int x, LL v) {\n    for (; x <= n; x += lowbit(x))\n        C[x] += v;\n}\n\nint main() {\n    cin >> n >> q;\n\n    for (int i = 1; i <= n; i++)\n        cin >> a[i];\n    for (int i = n; i >= 1; i--) {\n        a[i] -= a[i - 1];\n        add(i, a[i]);\n    }\n\n    int op, l, r, v;\n    for (int i = 1; i <= q; i++) {\n        cin >> op;\n\n        if (op == 1) {\n            cin >> l >> r >> v;\n            add(l, v);\n            add(r + 1, -v);\n        }\n\n        if (op == 2) {\n            cin >> v;\n            cout << sum(v) << endl;\n        }\n    }\n    return 0;\n}\n```\n\n### 3. 区间修改，区间查询\n```cpp\n#include <bits/stdc++.h>\n\ntypedef long long LL;\nusing namespace std;\nconst int maxn = 1000000 + 100;\n\n//delta[i] 表示 a[i], a[i + 1] .... a[n]  都要加上一个数delta[i]\n//树状数组 C1用于维护delta[i], 树状数组C2维护 i * delta[i]\n//前缀和 sum[i] = (i + 1) sum_delta[i] - sum_i*delta[i] \n\nLL C1[maxn], C2[maxn];\nint n;\n\nint lowbit(int x) {\n    return x & -x;\n}\n\nvoid add(int pos, LL v) {\n    for (int i = pos; i <= n; i += lowbit(i)) {\n        C1[i] += v;\n    }\n    for (int i = pos; i <= n; i += lowbit(i)) {\n        C2[i] += v * pos;\n    }\n}\n\nLL sum(int pos) {\n    LL res = 0;\n    for (int i = pos; i; i -= lowbit(i)) {\n        res += (pos + 1) * C1[i];\n    }\n    for (int i = pos; i; i -= lowbit(i)) {\n        res -= C2[i];\n    }\n    return res;\n}\n\nint main() {\n    int q;\n    cin >> n >> q;\n\n    int op, l, r;\n    LL v;\n\n    for (int i = 1; i <= n; i++) {\n        cin >> v;\n        add(i, v);\n        add(i + 1, -v);\n    }\n\n    while(q--) {\n        cin >> op;\n        if(op == 1) {\n            cin >> l >> r >> v;\n            add(l, v);\n            add(r + 1, -v);\n        }\n        else if(op == 2) {\n            cin >> l >> r;\n            cout << sum(r) - sum(l - 1) << endl;\n        }\n    }\n    return 0;\n}\n```\n\n\n## 线段树\n\n### 1. 区间加法， 区间求和\n```cpp\nstruct SegmentTree {\n    LL sumv[maxn * 4], addv[maxn * 4]; //原数组大小的四倍\n\n    void maintain(int o) {\n        sumv[o] = sumv[lc] + sumv[rc];\n    }\n\n    void pushdown(int o,int L,int R) { //标记下传\n        int M = L+R>>1;\n        addv[lc] += addv[o];\n        sumv[lc] += addv[o] *( M-L +1);\n\n        addv[rc] += addv[o];\n        sumv[rc] += addv[o] *(R-M);\n\n        addv[o] = 0;\n\n    }\n\n    void build(int o, int L, int R) {\n        if (L == R) {\n            sumv[o] = v[L];\n            return;\n        }\n        int M = L + R >> 1;\n        build(lc, L, M);\n        build(rc, M + 1, R);\n        maintain(o);\n    }\n\n    LL query(int o, int L, int R, int l, int r) {\n        if (l <= L && r >= R) return sumv[o];\n        pushdown(o,L,R);\n        int M = L + R >> 1;\n        LL sum = 0;\n        if(l <= M) sum += query(lc,L,M,l,r);\n        if(r > M) sum += query(rc,M+1,R,l,r);\n        return sum;\n    }\n\n    void update(int o,int L,int R,int l,int r,LL x){\n        if(l <= L && r >= R){\n            addv[o] += x;\n            sumv[o] += (R-L+1) * x;\n            return;\n        }\n        pushdown(o,L,R);\n        int M = L+R>>1;\n        if(l <= M) update(lc,L,M,l,r,x);\n        if(r > M ) update(rc,M+1,R,l,r,x);\n        maintain(o);\n    }\n\n\n} T;\n```\n\n\n## 2. 区间加法， 乘法， 区间求和\n\n```cpp\nstruct SegmentTree {\n    LL sumv[maxn], addv[maxn], mulv[maxn];\n\n    void maintain(int o) {\n        sumv[o] = sumv[lc] + sumv[rc];\n    }\n\n    void pushdown(int o, int L, int R) {\n        int M = L + R >> 1;\n        if (mulv[o] != 1) {\n            mulv[lc] *= mulv[o];\n            addv[lc] *= mulv[o];\n            sumv[lc] *= mulv[o];\n\n            mulv[rc] *= mulv[o];\n            addv[rc] *= mulv[o];\n            sumv[rc] *= mulv[o];\n\n            mulv[o] = 1;\n        }\n        if (addv[o]) {\n            addv[lc] += addv[o];\n            sumv[lc] += addv[o] * (M - L + 1);\n\n            addv[rc] += addv[o];\n            sumv[rc] += addv[o] * (R - M);\n\n            addv[o] = 0;\n        }\n    }\n\n    void build(int o, int L, int R) {\n        addv[o] = 0;\n        mulv[o] = 1;\n        if (L == R) {\n            sumv[o] = v[L];\n            return;\n        }\n        int M = L + R >> 1;\n        build(lc, L, M);\n        build(rc, M + 1, R);\n        maintain(o);\n    }\n\n    LL query(int o, int L, int R, int l, int r) {\n        if (l <= L && r >= R) return sumv[o];\n        pushdown(o, L, R);\n        int M = L + R >> 1;\n        LL sum = 0;\n        if (l <= M) sum += query(lc, L, M, l, r);\n        if (r > M) sum += query(rc, M + 1, R, l, r);\n        return sum;\n    }\n\n    void update_add(int o, int L, int R, int l, int r, int x) {\n        if (l <= L && r >= R) {\n            addv[o] += x;\n            sumv[o] += x * (R - L + 1);\n            return;\n        }\n        pushdown(o, L, R);\n        int M = L + R >> 1;\n        if (l <= M) update_add(lc, L, M, l, r, x);\n        if (r > M) update_add(rc, M + 1, R, l, r, x);\n        maintain(o);\n    }\n\n    void update_mul(int o, int L, int R, int l, int r, int x) {\n        if (l <= L && r >= R) {\n            mulv[o] *= x;\n            addv[o] *= x;\n            sumv[o] *= x;\n            return;\n        }\n        pushdown(o, L, R);\n        int M = L + R >> 1;\n        if (l <= M) update_mul(lc, L, M, l, r, x);\n        if (r > M) update_mul(rc, M + 1, R, l, r, x);\n        maintain(o);\n    }\n} T;\n```\n\n# 数学\n\n## 数论\n### Baby Step Giant Step算法\nBaby Step, Giant Step算法:  \n求解不定方程 $a^x = b \\ (mod \\ p) \\quad (a,p互质)$  \n设$x = it - j \\ ( 1 \\le i \\le t, \\ 0 \\le j \\le t ) \\quad (t ^ 2 \\ge p)  $ \n注意$i$不能从0开始，否则会产生负数解  \nj必须取到t， 否则可能漏解 $x = 0$ \n$a^{i*t} = b*a^j \\ (mod \\ p)$\n先枚举右边并存到哈希表，然后枚举左边的值，并在哈希表中查找解。\n```cpp\nLL bsgs(LL a, LL b, LL p) {\n    b %= p;\n    unordered_map<LL, LL> hash;\n    LL t = sqrt(p) + 1;\n    LL x = 1;\n    for (LL j = 0; j < t; j++) {\n        LL val = b * x % p;\n        hash[val] = j;\n        x = x * a % p;\n    }\n    hash[b * x % p] = t;\n    a = x;\n    for (LL i = 1; i <= t; i++) {\n        if (hash.count(x)) {\n            return i * t - hash[x];\n        }\n        x = x * a % p;\n    }\n    return -1;\n}\n```\n### 扩展BSGS\n题目同上， 但不保证 a p互质  \n\n$a^x = b \\ mod \\ p$\n1. 先判断 $x = 0$ 是不是解, 是则直接返回\n2. 设 $d = gcd(a, p)$，如果$b \\nmid d$,则无解，否则$\\frac{a}{d}a^{x - 1} = \\frac{b}{d} \\ mod \\ \\frac{p}{d}$\n3. $a^{x - 1} = \\frac{b}{d} (\\frac{a}{d})^{-1} \\ mod \\ \\frac{p}{d}$，递归求解  \n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long LL;\nconst LL INF = 0x3f3f3f3f3f3f3f3f;\n\nLL exgcd(LL a, LL b, LL& x, LL& y) {\n    if (b == 0) {\n        x = 1, y = 0;\n        return a;\n    } else {\n        LL d = exgcd(b, a % b, y, x);\n        y -= a / b * x;\n        return d;\n    }\n}\n\nLL bsgs(LL a, LL b, LL p) {\n    b %= p;\n\n    unordered_map<LL, LL> hash;\n    LL x = 1;\n    LL t = sqrt(p) + 1;\n\n    for (int j = 0; j < t; j++) {\n        hash[x * b % p] = j;\n        x = x * a % p;\n    }\n    hash[x * b % p] = t;\n\n    a = x;\n    for (int i = 1; i <= t; i++) {\n        if (hash.count(x)) return i * t - hash[x];\n        x = x * a % p;\n    }\n    return -INF;\n}\n\nLL exbsgs(LL a, LL b, LL p) {\n    if (1 % p == b % p) return 0;\n\n    LL x, y, d;\n    d = exgcd(a, p, x, y);\n    if (d == 1) {\n        return bsgs(a, b, p);\n    } else {\n        if (b % d) return -INF;\n        p /= d;\n        //a / d 模 p的逆元\n        exgcd(a / d, p, x, y);\n        x = (x % p + p) % p;\n        return 1 + exbsgs(a, b / d * x % p, p);\n    }\n}\n\nint main() {\n    LL a, p, b;\n    while (cin >> a >> p >> b, a || p || b) {\n        LL res = exbsgs(a, b, p);\n        if (res < 0)\n            cout << \"No Solution\" << endl;\n        else\n            cout << res << endl;\n    }\n\n    return 0;\n}\n```\n\n## 多项式卷积\n### 快速傅里叶变换FFT\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nconst int maxn = 300000 + 100;\nconst double pi = acos(-1);\n\nstruct Complex {\n    double x, y;\n\n    Complex() {\n        x = y = 0;\n    }\n    Complex(double x, double y) : x(x), y(y) {}\n\n    Complex operator+(const Complex& b) const {\n        return Complex(x + b.x, y + b.y);\n    }\n\n    Complex operator-(const Complex& b) const {\n        return Complex(x - b.x, y - b.y);\n    }\n\n    Complex operator*(const Complex& b) const {\n        return Complex(x * b.x - y * b.y, x * b.y + y * b.x);\n    }\n} a[maxn], b[maxn];\n\nint rev[maxn];\nint n, m, N, l;\n\nvoid fft(Complex* A, int N, int type) {\n\n    for (int i = 0; i < N; i++)\n        if (rev[i] < i)\n            swap(A[i], A[rev[i]]);\n\n    for (int len = 2; len <= N; len <<= 1) {\n        int m = len >> 1;\n        Complex wn(cos(2 * pi / len), type * sin(2 * pi / len));\n        for (int j = 0; j < N; j += len) {\n            Complex w(1, 0);\n\n            for (int i = 0; i < m; i++) {\n                Complex u = A[j + i];\n                Complex v = A[j + i + m];\n\n                A[j + i] = u + w * v;\n                A[j + i + m] = u - w * v;\n\n                w = w * wn;\n            }\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i <= n; i++)\n        scanf(\"%lf\", &a[i].x);\n    for (int i = 0; i <= m; i++)\n        scanf(\"%lf\", &b[i].x);\n    N = 1, l = 0;\n    while (N < n + m + 1) {\n        N <<= 1;\n        l++;\n    }\n    \n    for (int i = 0; i < N; i++)\n        rev[i] = rev[i >> 1] >> 1 | (i & 1) << (l - 1);\n    \n    fft(a, N, 1);\n    fft(b, N, 1);\n    \n    for (int i = 0; i < N; i++)\n        a[i] = a[i] * b[i];\n    \n    fft(a, N, -1);\n\n    for (int i = 0; i <= n + m; i++)\n        printf(\"%d \", (int)(a[i].x / N + 0.5));\n\n    return 0;\n}\n```\n\n### 快速数论变换 NTT\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst LL P = 998244353;\nconst LL g = 3;\nconst int maxn = 300000 + 100;\n\nint n, m, N, l;\n\nLL a[maxn], b[maxn];\nint rev[maxn];\n\nLL pow_mod(LL a, LL b, LL p) {\n    LL res = 1;\n    while (b) {\n        if (b & 1)\n            res = res * a % p;\n        a = a * a % p;\n        b >>= 1;\n    }\n    return res;\n}\n\nvoid fft(LL* A, int N, int type) {\n    for (int i = 0; i < N; i++)\n        if (rev[i] < i)\n            swap(A[i], A[rev[i]]);\n\n    for (int len = 2; len <= N; len <<= 1) {\n        int m = len / 2;\n        LL wn = pow_mod(g, (P - 1) / len, P);\n        if (type == -1)\n            wn = pow_mod(wn, P - 2, P);\n        for (int j = 0; j < N; j += len) {\n            LL w = 1;\n\n            for (int i = 0; i < m; i++) {\n                LL u = A[j + i];\n                LL v = A[j + i + m];\n\n                A[j + i] = (u + w * v % P) % P;\n                A[j + i + m] = (u - w * v % P + P) % P;\n\n                w = w * wn % P;\n            }\n        }\n    }\n}\n\nint main() {\n\n    scanf(\"%d%d\", &n, &m);\n\n    for (int i = 0; i <= n; i++)\n        scanf(\"%lld\", a + i);\n    for (int i = 0; i <= m; i++)\n        scanf(\"%lld\", b + i);\n\n    N = 1, l = 0;\n    while (N < n + m + 1) {\n        N <<= 1;\n        l++;\n    }\n\n    for (int i = 0; i < N; i++)\n        rev[i] = rev[i >> 1] >> 1 | (i & 1) << (l - 1);\n\n    fft(a, N, 1);\n    fft(b, N, 1);\n\n    for (int i = 0; i < N; i++)\n        a[i] = a[i] * b[i] % P;\n\n    fft(a, N, -1);\n\n    LL aN = pow_mod(N, P - 2, P);\n\n    for (int i = 0; i <= n + m; i++)\n        printf(\"%lld \", a[i] * aN % P);\n\n    return 0;\n}\n```\n### 多项式求逆\n如果$F(x) * G(x) \\equiv 1 \\ mod \\ x^n $ (系数对998255435取模)，则称多项式$G(x)$是多项式$F(x)$的逆。  \n\n如果$F(x)*H(x) \\equiv 1 \\ mod \\ x^{t}$  \n$G(x) = 2H(x) - F(x) * H^2(x)$  \n则$F(x)*G(x) \\equiv 1 \\ mod \\ x^{2*t}$  \n从$t = 1$开始向上递推， 直到$t$不小于$n$  \n\n```cpp\nint main() {\n    int n;\n    n = readIn();\n\n    for (int i = 0; i < n; i++)\n        F[i] = readIn();\n\n    G[0] = pow_mod(F[0], P - 2, P);\n    int t = 1;\n    //G[x] * F[x] = 1 (mod x^t)\n    while (t < n) {\n        t <<= 1;\n        int N = 1, l = 0;\n\n        while (N <= t) {\n            N <<= 1;\n            l++;\n        }\n         \n        for (int i = 0; i < N; i++)\n            rev[i] = rev[i >> 1] >> 1 | (i & 1) << (l - 1);\n\n        for (int i = 0; i < t; i++)\n            T[i] = F[i];\n        for (int i = t; i < N; i++)\n            T[i] = 0;\n\n        ntt(G, N, 1);\n        ntt(T, N, 1);\n\n        for (int i = 0; i < N; i++) {\n            G[i] = (2 * G[i] % P - (T[i] * G[i] % P) * G[i] % P + P) % P;\n        }\n\n        ntt(G, N, -1);\n        LL aN = pow_mod(N, P - 2, P);\n        for (int i = 0; i < N; i++) {\n            G[i] = G[i] * aN % P;\n        }\n        for (int i = t; i < N; i++)\n            G[i] = 0;\n    }\n\n    for (int i = 0; i <= n; i++)\n        printf(\"%lld \", G[i]);\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n# 其它\n## 莫队\n### 普通莫队\n题目: HH的项链\n查询:区间[l, r]是有多少种不同的颜色  \n莫队排序:\n先考虑左端点所在块编号\n再考虑右端点编号\n\n块长度 $len = \\sqrt{n^2 / m}$\n时间复杂度 $O(\\sqrt{n^2 / m})$\n\n``` cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 50000 + 100;\nconst int maxm = 200000 + 100;\nconst int maxs = 1000000 + 100;\n\nint color[maxn];\nint cnt[maxs];\nint n, m, len;\n\nint ans[maxm];\n\ninline void add(int i, int& res) {\n    if (cnt[color[i]] == 0)\n        res++;\n    cnt[color[i]]++;\n}\n\ninline void del(int i, int& res) {\n    if (cnt[color[i]] == 1)\n        res--;\n    cnt[color[i]]--;\n}\n\ninline int get(int i) {\n    return i / len;\n}\n\nstruct Query {\n    int id, l, r;\n\n    bool operator<(const Query& phs) {\n        if (get(l) == get(phs.l)) {\n            return r < phs.r;\n        }\n        return get(l) < get(phs.l);\n    }\n\n} q[maxm];\n\nint read() {\n    int x = 0;\n    char c = getchar();\n    while (c < '0' || c > '9') {\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = (x << 3) + (x << 1) + c - '0';\n        c = getchar();\n    }\n    return x;\n}\n\nint main() {\n\n    n = read();\n    for (int i = 1; i <= n; i++)\n        color[i] = read();\n\n    m = read();\n    for (int i = 1; i <= m; i++) {\n        q[i].id = i;\n        q[i].l = read();\n        q[i].r = read();\n    }\n\n    len = sqrt((double) n * n / m);\n\n    sort(q + 1, q + 1 + m);\n\n    int i = 1, j = 0;\n    int res = 0;\n    for (int k = 1; k <= m; k++) {\n        while (i < q[k].l)\n            del(i++, res);\n        while (i > q[k].l)\n            add(--i, res);\n        while (j < q[k].r)\n            add(++j, res);\n        while (j > q[k].r)\n            del(j--, res);\n        ans[q[k].id] = res;\n    }\n\n    for (int i = 1; i <= m; i++)\n        printf(\"%d\\n\", ans[i]);\n\n    return 0;\n}\n```\n\n### 带修改的莫队\n题目: 数颜色 Luogu P3939 \n按每次修改操作划分时间戳  \n排序:  \n1. 左端点块编号\n2. 右端点块编号\n3. 时间戳\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 10000 + 10;\n\nint color[maxn];\nint cnt[1000000 + 100];\n\nint len;\n\nint get(int x) {\n    return x / len;\n}\n\nstruct Query {\n    int id, l, r, t;\n\n    bool operator<(const Query& phs) const {\n        int la = get(l);\n        int ra = get(r);\n        int lb = get(phs.l);\n        int rb = get(phs.r);\n\n        if (la != lb) return la < lb;\n        if (ra != rb) return ra < rb;\n        return t < phs.t;\n    }\n\n} query[maxn];\n\nstruct Replace {\n    int pos;\n    int col;\n} rp[1010];\n\nvoid add(int v, int& res) {\n    if (cnt[v] == 0)\n        res++;\n    cnt[v]++;\n}\nvoid del(int v, int& res) {\n    if (cnt[v] == 1)\n        res--;\n    cnt[v]--;\n}\n\nint ans[maxn];\n\nint main() {\n\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n\n    for(int i = 1;i <= n; i++)\n        scanf(\"%d\", color + i);\n\n    char op[2];\n    int l, r;\n\n    int cq = 0;\n    int ct = 0;\n\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%s%d%d\", op, &l, &r);\n        if (*op == 'Q') {\n            cq++;\n            query[cq] = {cq, l, r, ct};\n        } else {\n            rp[++ct] = {l, r};\n        }\n    }\n    len = pow(n * ct, 1.f / 3) + 1;\n    sort(query + 1, query + cq + 1);\n\n    int res = 0;\n    int i = 1, j = 0;\n    int t = 0;\n    for (int k = 1; k <= cq; k++) {\n\n        int id = query[k].id;\n        int l = query[k].l;\n        int r = query[k].r;\n\n        while (i > l)\n            add(color[--i], res);\n        while (i < l)\n            del(color[i++], res);\n        while (j < r)\n            add(color[++j], res);\n        while (j > r)\n            del(color[j--], res);\n\n        while (t < query[k].t) {\n            t++;\n            if (rp[t].pos >= l && rp[t].pos <= r) {\n                del(color[rp[t].pos], res);\n                add(rp[t].col, res);\n            }\n            swap(rp[t].col, color[rp[t].pos]);\n        }\n        while (t > query[k].t) {\n            if (rp[t].pos >= l && rp[t].pos <= r) {\n                del(color[rp[t].pos], res);\n                add(rp[t].col, res);\n            }\n            swap(rp[t].col, color[rp[t].pos]);\n            t--;\n        }\n        ans[id] = res;\n    }\n\n    for (int i = 1; i <= cq; i++)\n        printf(\"%d\\n\", ans[i]);\n\n    return 0;\n}\n```\n\n### 带回滚的莫队\n题目: 历史研究 luogu AT1219 \n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int maxn = 100000 + 100;\n\nint color[maxn];\nvector<int> temp;\n\nint cnt[maxn];\nLL ans[maxn];\n\nint len;\n\ninline int get(int x) {\n    return x / len;\n}\n\nstruct Query {\n    int id, l, r;\n\n    bool operator<(const Query& phs) {\n        int la = get(l);\n        int lb = get(phs.l);\n        if (la != lb) return la < lb;\n        return r < phs.r;\n    }\n} query[maxn];\n\nvoid add(int x, LL& res) {\n    cnt[x]++;\n    if ((LL)temp[x] * cnt[x] > res)\n        res = (LL)temp[x] * cnt[x];\n}\n\nint readIn() {\n    int x = 0;\n    char c = getchar();\n    while (c < '0' || c > '9')\n        c = getchar();\n\n    while (c >= '0' && c <= '9') {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n    return x;\n}\n\nint main() {\n\n    int n, m;\n    n = readIn();\n    m = readIn();\n    len = sqrt(n);\n\n    for (int i = 1; i <= n; i++) {\n        color[i] = readIn();\n        temp.push_back(color[i]);\n    }\n\n    //离散化\n    sort(temp.begin(), temp.end());\n    temp.erase(unique(temp.begin(), temp.end()), temp.end());\n    for (int i = 1; i <= n; i++) {\n        color[i] = lower_bound(temp.begin(), temp.end(), color[i]) - temp.begin();\n    }\n\n    for (int i = 1; i <= m; i++) {\n        query[i].id = i;\n        cin >> query[i].l >> query[i].r;\n    }\n\n    sort(query + 1, query + 1 + m);\n\n    for (int x = 1; x <= m;) {\n        int y = x;\n\n        //块号\n        int block = get(query[x].l);\n\n        //块的右端点\n        int right = (len - 1) + block * len;\n\n        while (y <= m && query[y].l <= right)\n            y++;\n\n        while (x < y && query[x].r <= right) {\n            LL res = 0;\n            for (int i = query[x].l; i <= query[x].r; i++)\n                add(color[i], res);\n            ans[query[x].id] = res;\n\n            for (int i = query[x].l; i <= query[x].r; i++)\n                cnt[color[i]]--;\n\n            x++;\n        }\n\n        int r = right;\n        LL res = 0;\n        while (x < y) {\n            while (r < query[x].r) {\n                add(color[++r], res);\n            }\n\n            LL backup = res;\n\n            for (int i = right; i >= query[x].l; i--)\n                add(color[i], res);\n\n            ans[query[x].id] = res;\n\n            res = backup;\n            for (int i = right; i >= query[x].l; i--)\n                cnt[color[i]]--;\n\n            x++;\n        }\n\n        memset(cnt, 0, sizeof(cnt));\n    }\n\n    for (int i = 1; i <= m; i++)\n        cout << ans[i] << endl;\n\n    return 0;\n}\n```\n\n### 树上莫队\n题目:   \n查询树上(u -> v) 路径上不同权值的个数  \n做法:  \n转化为dfs序上的区间问题，然后莫队  \n\nfirst[u], last[u] 分别为u在dfs序上前后两次出现的位置， \n刚(u -> v) (保证u在dfs序中的第一次出现先于v) 可转化为:\n1. 如果lca(u, v) == u: first[u] ~ first[v]中只出现一次的节点\n2. 如果lca(u, v) != u: last[u] ~ first[v]中只出现一次的节点 + lca\n\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\nconst int maxn = 100000 + 100;\n\nint color[maxn];\nvector<int> nums;\n\n//邻接表\nint to[maxn], fir[maxn];\nint nxt[maxn], idx;\n\nint n, m, len;\n\n//莫队\nint cnt[maxn], vis[maxn];\nint ans[maxn];\n\ninline int get(int x) {\n    return x / len;\n}\n\nstruct Query {\n    int id, l, r, p;\n\n    bool operator<(const Query& phs) const {\n        int la = get(l);\n        int lb = get(phs.l);\n        if (la != lb) return la < lb;\n        return r < phs.r;\n    }\n\n} query[maxn];\n\ninline void add_edge(int u, int v) {\n    idx++;\n    to[idx] = v;\n    nxt[idx] = fir[u];\n    fir[u] = idx;\n}\n\n//LCA\nint dep[maxn], st[maxn][16];\n\n//欧拉序列\nint seq[maxn], top;\nint first[maxn], last[maxn];\n\nvoid dfs(int u, int father) {\n\n    seq[++top] = u;\n    first[u] = top;\n\n    for (int e = fir[u], v = to[e]; e; e = nxt[e], v = to[e])\n        if (v != father) {\n            dep[v] = dep[u] + 1;\n            st[v][0] = u;\n            for (int k = 1; k <= 15; k++)\n                st[v][k] = st[st[v][k - 1]][k - 1];\n            dfs(v, u);\n        }\n    seq[++top] = u;\n    last[u] = top;\n}\n\ninline int LCA(int a, int b) {\n    if (dep[a] < dep[b])\n        swap(a, b);\n\n    for (int k = 15; k >= 0; k--)\n        if (dep[st[a][k]] >= dep[b])\n            a = st[a][k];\n\n    if (a == b)\n        return a;\n\n    for (int k = 15; k >= 0; k--)\n        if (st[a][k] != st[b][k]) {\n            a = st[a][k];\n            b = st[b][k];\n        }\n\n    return st[a][0];\n}\n\ninline void add(int x, int& res) {\n    vis[x] ^= 1;\n\n    if (vis[x]) {\n        cnt[color[x]]++;\n        if (cnt[color[x]] == 1)\n            res++;\n    } else {\n        cnt[color[x]]--;\n        if (cnt[color[x]] == 0)\n            res--;\n    }\n}\n\nint main() {\n\n    scanf(\"%d%d\", &n, &m);\n\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", color + i);\n        nums.push_back(color[i]);\n    }\n    //离散化\n    sort(nums.begin(), nums.end());\n    nums.erase(unique(nums.begin(), nums.end()), nums.end());\n    for (int i = 1; i <= n; i++)\n        color[i] = lower_bound(nums.begin(), nums.end(), color[i]) - nums.begin();\n\n    //读入树的边\n    int a, b;\n    for (int i = 1; i < n; i++) {\n        scanf(\"%d%d\", &a, &b);\n        add_edge(a, b);\n        add_edge(b, a);\n    }\n\n    //求欧拉序列并初始化st表\n    dep[1] = 1;\n    dfs(1, 0);\n\n    //读入询问并排序\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d\", &a, &b);\n        if (first[a] > first[b])\n            swap(a, b);\n        int lca = LCA(a, b);\n        if (lca == a) {\n            query[i] = {i, first[a], first[b], 0};\n        } else {\n            query[i] = {i, last[a], first[b], lca};\n        }\n    }\n\n    len = sqrt(top) + 1;\n    sort(query + 1, query + 1 + m);\n\n    int res = 0;\n    int i = 1, j = 0;\n    for (int k = 1; k <= m; k++) {\n        int id = query[k].id, l = query[k].l, r = query[k].r, p = query[k].p;\n\n        while (j < r)\n            add(seq[++j], res);\n        while (j > r)\n            add(seq[j--], res);\n        while (i > l)\n            add(seq[--i], res);\n        while (i < l)\n            add(seq[i++], res);\n\n        if (p)\n            add(p, res);\n        ans[id] = res;\n        if (p)\n            add(p, res);\n    }\n\n    for (int i = 1; i <= m; i++)\n        printf(\"%d\\n\", ans[i]);\n\n    return 0;\n}\n\n```\n\n\n### 二次离线莫队\n题目: Luogu P4887  \n查询区间[l, r]中满足a[i] xor a[j]的二进制表示中恰好有k个1的对数。\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int maxn = 100000 + 100;\n\nint w[maxn];\n\nstruct Query {\n    int id, l, r;\n    LL res;\n} query[maxn];\n\nstruct Range {\n    int id, l, r, t;\n};\n\nvector<Range> range[maxn];\n\nint n, m, k, len;\n\n//f[i] 1 ~ i 中与 w[i + 1] 配对的个数\n//g[x]前i个数中， 与x配对的个数\n//f[i] = g[w[i + 1]]\nint f[maxn], g[maxn];\nvector<int> nums;\n\ninline int readIn() {\n    int x = 0;\n    char c = getchar();\n    while (c < '0' || c > '9')\n        c = getchar();\n    while (c >= '0' && c <= '9') {\n        x = (x << 3) + (x << 1) + c - '0';\n        c = getchar();\n    }\n    return x;\n}\n\nint get(int x) {\n    return x / len;\n}\n\nbool cmp(const Query& a, const Query& b) {\n    int la = get(a.l);\n    int lb = get(b.l);\n    if (la != lb) return la < lb;\n    return a.r < b.r;\n}\n\nint get_count(int x) { //x二进制表示中1的个数\n    int res = 0;\n    while (x)\n        res += (x & 1), x >>= 1;\n    return res;\n}\n\nLL ans[maxn];\n\nint main() {\n    n = readIn();\n    m = readIn();\n    k = readIn();\n\n    for (int i = 1; i <= n; i++)\n        w[i] = readIn();\n\n    for (int i = 1; i <= m; i++) {\n        query[i].id = i;\n        query[i].l = readIn();\n        query[i].r = readIn();\n    }\n\n    len = sqrt(n) + 1;\n\n    sort(query + 1, query + 1 + m, cmp);\n\n    for (int i = 0; i < (1 << 14); i++)\n        if (get_count(i) == k)\n            nums.push_back(i);\n\n    for (int i = 1; i <= n; i++) {\n\n        for (int t : nums)\n            g[w[i] ^ t]++;\n\n        f[i] = g[w[i + 1]];\n    }\n\n    for (int i = 1, L = 1, R = 0; i <= m; i++) {\n        int l = query[i].l, r = query[i].r;\n\n        if (R < r)\n            range[L - 1].push_back({i, R + 1, r, -1});\n        while (R < r)\n            query[i].res += f[R], R++;\n\n        if (R > r)\n            range[L - 1].push_back({i, r + 1, R, 1});\n        while (R > r)\n            query[i].res -= f[R - 1], R--;\n        if (L < l)\n            range[R].push_back({i, L, l - 1, -1});\n        while (L < l)\n            query[i].res += f[L - 1] + !k, L++;\n\n        if (L > l)\n            range[R].push_back({i, l, L - 1, 1});\n        while (L > l)\n            query[i].res -= f[L - 2] + !k, L--;\n    }\n\n    memset(g, 0, sizeof(g));\n\n    for (int i = 1; i <= n; i++) {\n\n        for (int t : nums)\n            g[w[i] ^ t]++;\n\n        for (Range& rg : range[i]) {\n            int id = rg.id, l = rg.l, r = rg.r;\n            for (int x = l; x <= r; x++)\n                query[id].res += (LL)rg.t * g[w[x]];\n        }\n    }\n\n    for (int i = 2; i <= m; i++)\n        query[i].res += query[i - 1].res;\n\n    for (int i = 1; i <= m; i++)\n        ans[query[i].id] = query[i].res;\n    \n    for(int i = 1; i <= m; i++)\n        printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```","slug":"算法模板","published":1,"updated":"2021-05-14T08:42:49.879Z","_id":"ckod2f72u000048wnf2l13d4r","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><h2 id=\"网络流\"><a href=\"#网络流\" class=\"headerlink\" title=\"网络流\"></a>网络流</h2><h3 id=\"EK算法\"><a href=\"#EK算法\" class=\"headerlink\" title=\"EK算法\"></a>EK算法</h3><p>复杂度$O(nm^2)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">20000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> from[maxm], to[maxm], cap[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fir[maxn], nxt[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    from[tot] = u;</span><br><span class=\"line\">    to[tot] = v;</span><br><span class=\"line\">    cap[tot] = c;</span><br><span class=\"line\"></span><br><span class=\"line\">    nxt[tot] = fir[u];</span><br><span class=\"line\">    fir[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[maxn], flow[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[maxn], l, r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\"></span><br><span class=\"line\">    flow[s] = INF;</span><br><span class=\"line\">    vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[++r] = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[++l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = fir[u]; e; e = nxt[e])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cap[e] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = to[e];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">                    flow[v] = min(flow[u], cap[e]);</span><br><span class=\"line\">                    q[++r] = v;</span><br><span class=\"line\">                    vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    pre[v] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v == t) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">EK</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = flow[t];</span><br><span class=\"line\">        res += k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = t; u != s; u = from[pre[u]]) &#123;</span><br><span class=\"line\">            cap[pre[u]] -= k;</span><br><span class=\"line\">            cap[pre[u] ^ <span class=\"number\">1</span>] += k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    tot = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        add(u, v, w);</span><br><span class=\"line\">        add(v, u, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, EK());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dinic算法\"><a href=\"#Dinic算法\" class=\"headerlink\" title=\"Dinic算法\"></a>Dinic算法</h3><p>复杂度$O(n^2m)$ (<del>笑话</del>)<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">20000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> from[maxm], to[maxm], cap[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fir[maxn], nxt[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    from[tot] = u;</span><br><span class=\"line\">    to[tot] = v;</span><br><span class=\"line\">    cap[tot] = c;</span><br><span class=\"line\"></span><br><span class=\"line\">    nxt[tot] = fir[u];</span><br><span class=\"line\">    fir[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[maxn], flow[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[maxn], l, r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\"></span><br><span class=\"line\">    flow[s] = INF;</span><br><span class=\"line\">    vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[++r] = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[++l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = fir[u]; e; e = nxt[e])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cap[e] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = to[e];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">                    flow[v] = min(flow[u], cap[e]);</span><br><span class=\"line\">                    q[++r] = v;</span><br><span class=\"line\">                    vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    pre[v] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v == t) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">EK</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = flow[t];</span><br><span class=\"line\">        res += k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = t; u != s; u = from[pre[u]]) &#123;</span><br><span class=\"line\">            cap[pre[u]] -= k;</span><br><span class=\"line\">            cap[pre[u] ^ <span class=\"number\">1</span>] += k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    tot = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        add(u, v, w);</span><br><span class=\"line\">        add(v, u, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, EK());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h2><h3 id=\"1-单点修改，区间查询\"><a href=\"#1-单点修改，区间查询\" class=\"headerlink\" title=\"1.单点修改，区间查询\"></a>1.单点修改，区间查询</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\">LL C[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x; x -= lowbit(x))</span><br><span class=\"line\">        res += C[x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x &lt;= n; x += lowbit(x))</span><br><span class=\"line\">        C[x] += v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, op, l, r;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v;</span><br><span class=\"line\">        add(i, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; sum(r) - sum(l - <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            add(l, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-区间修改，单点查询-（差分）\"><a href=\"#2-区间修改，单点查询-（差分）\" class=\"headerlink\" title=\"2. 区间修改，单点查询 （差分）\"></a>2. 区间修改，单点查询 （差分）</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[maxn], C[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x; x -= lowbit(x))</span><br><span class=\"line\">        res += C[x];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x &lt;= n; x += lowbit(x))</span><br><span class=\"line\">        C[x] += v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        a[i] -= a[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        add(i, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r, v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; op;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; v;</span><br><span class=\"line\">            add(l, v);</span><br><span class=\"line\">            add(r + <span class=\"number\">1</span>, -v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; v;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; sum(v) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-区间修改，区间查询\"><a href=\"#3-区间修改，区间查询\" class=\"headerlink\" title=\"3. 区间修改，区间查询\"></a>3. 区间修改，区间查询</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delta[i] 表示 a[i], a[i + 1] .... a[n]  都要加上一个数delta[i]</span></span><br><span class=\"line\"><span class=\"comment\">//树状数组 C1用于维护delta[i], 树状数组C2维护 i * delta[i]</span></span><br><span class=\"line\"><span class=\"comment\">//前缀和 sum[i] = (i + 1) sum_delta[i] - sum_i*delta[i] </span></span><br><span class=\"line\"></span><br><span class=\"line\">LL C1[maxn], C2[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class=\"line\">        C1[i] += v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class=\"line\">        C2[i] += v * pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i; i -= lowbit(i)) &#123;</span><br><span class=\"line\">        res += (pos + <span class=\"number\">1</span>) * C1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i; i -= lowbit(i)) &#123;</span><br><span class=\"line\">        res -= C2[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r;</span><br><span class=\"line\">    LL v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v;</span><br><span class=\"line\">        add(i, v);</span><br><span class=\"line\">        add(i + <span class=\"number\">1</span>, -v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; v;</span><br><span class=\"line\">            add(l, v);</span><br><span class=\"line\">            add(r + <span class=\"number\">1</span>, -v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; sum(r) - sum(l - <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h2><h3 id=\"1-区间加法，-区间求和\"><a href=\"#1-区间加法，-区间求和\" class=\"headerlink\" title=\"1. 区间加法， 区间求和\"></a>1. 区间加法， 区间求和</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegmentTree</span> &#123;</span></span><br><span class=\"line\">    LL sumv[maxn * <span class=\"number\">4</span>], addv[maxn * <span class=\"number\">4</span>]; <span class=\"comment\">//原数组大小的四倍</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        sumv[o] = sumv[lc] + sumv[rc];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span> </span>&#123; <span class=\"comment\">//标记下传</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L+R&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        addv[lc] += addv[o];</span><br><span class=\"line\">        sumv[lc] += addv[o] *( M-L +<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        addv[rc] += addv[o];</span><br><span class=\"line\">        sumv[rc] += addv[o] *(R-M);</span><br><span class=\"line\"></span><br><span class=\"line\">        addv[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L == R) &#123;</span><br><span class=\"line\">            sumv[o] = v[L];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        build(lc, L, M);</span><br><span class=\"line\">        build(rc, M + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">        pushdown(o,L,R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        LL sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= M) sum += query(lc,L,M,l,r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &gt; M) sum += query(rc,M+<span class=\"number\">1</span>,R,l,r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,LL x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= L &amp;&amp; r &gt;= R)&#123;</span><br><span class=\"line\">            addv[o] += x;</span><br><span class=\"line\">            sumv[o] += (R-L+<span class=\"number\">1</span>) * x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(o,L,R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L+R&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= M) update(lc,L,M,l,r,x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &gt; M ) update(rc,M+<span class=\"number\">1</span>,R,l,r,x);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; T;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-区间加法，-乘法，-区间求和\"><a href=\"#2-区间加法，-乘法，-区间求和\" class=\"headerlink\" title=\"2. 区间加法， 乘法， 区间求和\"></a>2. 区间加法， 乘法， 区间求和</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegmentTree</span> &#123;</span></span><br><span class=\"line\">    LL sumv[maxn], addv[maxn], mulv[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        sumv[o] = sumv[lc] + sumv[rc];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mulv[o] != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            mulv[lc] *= mulv[o];</span><br><span class=\"line\">            addv[lc] *= mulv[o];</span><br><span class=\"line\">            sumv[lc] *= mulv[o];</span><br><span class=\"line\"></span><br><span class=\"line\">            mulv[rc] *= mulv[o];</span><br><span class=\"line\">            addv[rc] *= mulv[o];</span><br><span class=\"line\">            sumv[rc] *= mulv[o];</span><br><span class=\"line\"></span><br><span class=\"line\">            mulv[o] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addv[o]) &#123;</span><br><span class=\"line\">            addv[lc] += addv[o];</span><br><span class=\"line\">            sumv[lc] += addv[o] * (M - L + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            addv[rc] += addv[o];</span><br><span class=\"line\">            sumv[rc] += addv[o] * (R - M);</span><br><span class=\"line\"></span><br><span class=\"line\">            addv[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        addv[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        mulv[o] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L == R) &#123;</span><br><span class=\"line\">            sumv[o] = v[L];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        build(lc, L, M);</span><br><span class=\"line\">        build(rc, M + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">        pushdown(o, L, R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        LL sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= M) sum += query(lc, L, M, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; M) sum += query(rc, M + <span class=\"number\">1</span>, R, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_add</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) &#123;</span><br><span class=\"line\">            addv[o] += x;</span><br><span class=\"line\">            sumv[o] += x * (R - L + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(o, L, R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= M) update_add(lc, L, M, l, r, x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; M) update_add(rc, M + <span class=\"number\">1</span>, R, l, r, x);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_mul</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) &#123;</span><br><span class=\"line\">            mulv[o] *= x;</span><br><span class=\"line\">            addv[o] *= x;</span><br><span class=\"line\">            sumv[o] *= x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(o, L, R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= M) update_mul(lc, L, M, l, r, x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; M) update_mul(rc, M + <span class=\"number\">1</span>, R, l, r, x);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; T;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><h2 id=\"数论\"><a href=\"#数论\" class=\"headerlink\" title=\"数论\"></a>数论</h2><h3 id=\"Baby-Step-Giant-Step算法\"><a href=\"#Baby-Step-Giant-Step算法\" class=\"headerlink\" title=\"Baby Step Giant Step算法\"></a>Baby Step Giant Step算法</h3><p>Baby Step, Giant Step算法:<br>求解不定方程 $a^x = b  (mod  p) \\quad (a,p互质)$<br>设$x = it - j  ( 1 \\le i \\le t,  0 \\le j \\le t ) \\quad (t ^ 2 \\ge p)  $<br>注意$i$不能从0开始，否则会产生负数解<br>j必须取到t， 否则可能漏解 $x = 0$<br>$a^{i<em>t} = b</em>a^j  (mod  p)$<br>先枚举右边并存到哈希表，然后枚举左边的值，并在哈希表中查找解。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LL <span class=\"title\">bsgs</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    b %= p;</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;LL, LL&gt; hash;</span><br><span class=\"line\">    LL t = <span class=\"built_in\">sqrt</span>(p) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    LL x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL j = <span class=\"number\">0</span>; j &lt; t; j++) &#123;</span><br><span class=\"line\">        LL val = b * x % p;</span><br><span class=\"line\">        hash[val] = j;</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hash[b * x % p] = t;</span><br><span class=\"line\">    a = x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash.count(x)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i * t - hash[x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"扩展BSGS\"><a href=\"#扩展BSGS\" class=\"headerlink\" title=\"扩展BSGS\"></a>扩展BSGS</h3><p>题目同上， 但不保证 a p互质  </p>\n<p>$a^x = b  mod  p$</p>\n<ol>\n<li>先判断 $x = 0$ 是不是解, 是则直接返回</li>\n<li>设 $d = gcd(a, p)$，如果$b \\nmid d$,则无解，否则$\\frac{a}{d}a^{x - 1} = \\frac{b}{d}  mod  \\frac{p}{d}$</li>\n<li>$a^{x - 1} = \\frac{b}{d} (\\frac{a}{d})^{-1}  mod  \\frac{p}{d}$，递归求解  </li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL INF = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">exgcd</span><span class=\"params\">(LL a, LL b, LL&amp; x, LL&amp; y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LL d = exgcd(b, a % b, y, x);</span><br><span class=\"line\">        y -= a / b * x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">bsgs</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    b %= p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;LL, LL&gt; hash;</span><br><span class=\"line\">    LL x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    LL t = <span class=\"built_in\">sqrt</span>(p) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; t; j++) &#123;</span><br><span class=\"line\">        hash[x * b % p] = j;</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hash[x * b % p] = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    a = x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash.count(x)) <span class=\"keyword\">return</span> i * t - hash[x];</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -INF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">exbsgs</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> % p == b % p) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL x, y, d;</span><br><span class=\"line\">    d = exgcd(a, p, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bsgs(a, b, p);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b % d) <span class=\"keyword\">return</span> -INF;</span><br><span class=\"line\">        p /= d;</span><br><span class=\"line\">        <span class=\"comment\">//a / d 模 p的逆元</span></span><br><span class=\"line\">        exgcd(a / d, p, x, y);</span><br><span class=\"line\">        x = (x % p + p) % p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + exbsgs(a, b / d * x % p, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LL a, p, b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; p &gt;&gt; b, a || p || b) &#123;</span><br><span class=\"line\">        LL res = exbsgs(a, b, p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;No Solution&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式卷积\"><a href=\"#多项式卷积\" class=\"headerlink\" title=\"多项式卷积\"></a>多项式卷积</h2><h3 id=\"快速傅里叶变换FFT\"><a href=\"#快速傅里叶变换FFT\" class=\"headerlink\" title=\"快速傅里叶变换FFT\"></a>快速傅里叶变换FFT</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">300000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex() &#123;</span><br><span class=\"line\">        x = y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y) : x(x), y(y) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(x + b.x, y + b.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(x - b.x, y - b.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(x * b.x - y * b.y, x * b.y + y * b.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; a[maxn], b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, N, l;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex* A, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rev[i] &lt; i)</span><br><span class=\"line\">            swap(A[i], A[rev[i]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>; len &lt;= N; len &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = len &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span> * pi / len), type * <span class=\"built_in\">sin</span>(<span class=\"number\">2</span> * pi / len))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j += len) &#123;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">                Complex u = A[j + i];</span><br><span class=\"line\">                Complex v = A[j + i + m];</span><br><span class=\"line\"></span><br><span class=\"line\">                A[j + i] = u + w * v;</span><br><span class=\"line\">                A[j + i + m] = u - w * v;</span><br><span class=\"line\"></span><br><span class=\"line\">                w = w * wn;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>, &amp;a[i].x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>, &amp;b[i].x);</span><br><span class=\"line\">    N = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (N &lt; n + m + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        N &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        l++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; (l - <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        a[i] = a[i] * b[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a, N, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, (<span class=\"keyword\">int</span>)(a[i].x / N + <span class=\"number\">0.5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速数论变换-NTT\"><a href=\"#快速数论变换-NTT\" class=\"headerlink\" title=\"快速数论变换 NTT\"></a>快速数论变换 NTT</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LL P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL g = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">300000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, N, l;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[maxn], b[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(LL* A, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rev[i] &lt; i)</span><br><span class=\"line\">            swap(A[i], A[rev[i]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>; len &lt;= N; len &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = len / <span class=\"number\">2</span>;</span><br><span class=\"line\">        LL wn = pow_mod(g, (P - <span class=\"number\">1</span>) / len, P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            wn = pow_mod(wn, P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j += len) &#123;</span><br><span class=\"line\">            LL w = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">                LL u = A[j + i];</span><br><span class=\"line\">                LL v = A[j + i + m];</span><br><span class=\"line\"></span><br><span class=\"line\">                A[j + i] = (u + w * v % P) % P;</span><br><span class=\"line\">                A[j + i + m] = (u - w * v % P + P) % P;</span><br><span class=\"line\"></span><br><span class=\"line\">                w = w * wn % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, a + i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, b + i);</span><br><span class=\"line\"></span><br><span class=\"line\">    N = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (N &lt; n + m + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        N &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        l++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; (l - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fft(a, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b, N, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        a[i] = a[i] * b[i] % P;</span><br><span class=\"line\"></span><br><span class=\"line\">    fft(a, N, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    LL aN = pow_mod(N, P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, a[i] * aN % P);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式求逆\"><a href=\"#多项式求逆\" class=\"headerlink\" title=\"多项式求逆\"></a>多项式求逆</h3><p>如果$F(x) * G(x) \\equiv 1  mod  x^n $ (系数对998255435取模)，则称多项式$G(x)$是多项式$F(x)$的逆。  </p>\n<p>如果$F(x)<em>H(x) \\equiv 1  mod  x^{t}$<br>$G(x) = 2H(x) - F(x) </em> H^2(x)$<br>则$F(x)<em>G(x) \\equiv 1  mod  x^{2</em>t}$<br>从$t = 1$开始向上递推， 直到$t$不小于$n$  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    n = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        F[i] = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    G[<span class=\"number\">0</span>] = pow_mod(F[<span class=\"number\">0</span>], P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//G[x] * F[x] = 1 (mod x^t)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t &lt; n) &#123;</span><br><span class=\"line\">        t &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (N &lt;= t) &#123;</span><br><span class=\"line\">            N &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">            rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; (l - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++)</span><br><span class=\"line\">            T[i] = F[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t; i &lt; N; i++)</span><br><span class=\"line\">            T[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ntt(G, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">        ntt(T, N, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            G[i] = (<span class=\"number\">2</span> * G[i] % P - (T[i] * G[i] % P) * G[i] % P + P) % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ntt(G, N, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        LL aN = pow_mod(N, P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            G[i] = G[i] * aN % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t; i &lt; N; i++)</span><br><span class=\"line\">            G[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, G[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><h2 id=\"莫队\"><a href=\"#莫队\" class=\"headerlink\" title=\"莫队\"></a>莫队</h2><h3 id=\"普通莫队\"><a href=\"#普通莫队\" class=\"headerlink\" title=\"普通莫队\"></a>普通莫队</h3><p>题目: HH的项链<br>查询:区间[l, r]是有多少种不同的颜色<br>莫队排序:<br>先考虑左端点所在块编号<br>再考虑右端点编号</p>\n<p>块长度 $len = \\sqrt{n^2 / m}$<br>时间复杂度 $O(\\sqrt{n^2 / m})$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">200000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxs = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[maxs];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[color[i]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        res++;</span><br><span class=\"line\">    cnt[color[i]]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[color[i]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        res--;</span><br><span class=\"line\">    cnt[color[i]]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (get(l) == get(phs.l)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r &lt; phs.r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(l) &lt; get(phs.l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; q[maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    n = read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        color[i] = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    m = read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        q[i].id = i;</span><br><span class=\"line\">        q[i].l = read();</span><br><span class=\"line\">        q[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>((<span class=\"keyword\">double</span>) n * n / m);</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= m; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; q[k].l)</span><br><span class=\"line\">            del(i++, res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; q[k].l)</span><br><span class=\"line\">            add(--i, res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; q[k].r)</span><br><span class=\"line\">            add(++j, res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; q[k].r)</span><br><span class=\"line\">            del(j--, res);</span><br><span class=\"line\">        ans[q[k].id] = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"带修改的莫队\"><a href=\"#带修改的莫队\" class=\"headerlink\" title=\"带修改的莫队\"></a>带修改的莫队</h3><p>题目: 数颜色 Luogu P3939<br>按每次修改操作划分时间戳<br>排序:  </p>\n<ol>\n<li>左端点块编号</li>\n<li>右端点块编号</li>\n<li>时间戳</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">1000000</span> + <span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r, t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> la = get(l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ra = get(r);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lb = get(phs.l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rb = get(phs.r);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ra != rb) <span class=\"keyword\">return</span> ra &lt; rb;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t &lt; phs.t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Replace</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col;</span><br><span class=\"line\">&#125; rp[<span class=\"number\">1010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[v] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        res++;</span><br><span class=\"line\">    cnt[v]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[v] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        res--;</span><br><span class=\"line\">    cnt[v]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, color + i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cq = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ct = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d%d&quot;</span>, op, &amp;l, &amp;r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*op == <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            cq++;</span><br><span class=\"line\">            query[cq] = &#123;cq, l, r, ct&#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rp[++ct] = &#123;l, r&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len = <span class=\"built_in\">pow</span>(n * ct, <span class=\"number\">1.f</span> / <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + cq + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= cq; k++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = query[k].id;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = query[k].l;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = query[k].r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; l)</span><br><span class=\"line\">            add(color[--i], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; l)</span><br><span class=\"line\">            del(color[i++], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; r)</span><br><span class=\"line\">            add(color[++j], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; r)</span><br><span class=\"line\">            del(color[j--], res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &lt; query[k].t) &#123;</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rp[t].pos &gt;= l &amp;&amp; rp[t].pos &lt;= r) &#123;</span><br><span class=\"line\">                del(color[rp[t].pos], res);</span><br><span class=\"line\">                add(rp[t].col, res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(rp[t].col, color[rp[t].pos]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &gt; query[k].t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rp[t].pos &gt;= l &amp;&amp; rp[t].pos &lt;= r) &#123;</span><br><span class=\"line\">                del(color[rp[t].pos], res);</span><br><span class=\"line\">                add(rp[t].col, res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(rp[t].col, color[rp[t].pos]);</span><br><span class=\"line\">            t--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[id] = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= cq; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"带回滚的莫队\"><a href=\"#带回滚的莫队\" class=\"headerlink\" title=\"带回滚的莫队\"></a>带回滚的莫队</h3><p>题目: 历史研究 luogu AT1219<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; temp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[maxn];</span><br><span class=\"line\">LL ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> la = get(l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lb = get(phs.l);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r &lt; phs.r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, LL&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    cnt[x]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((LL)temp[x] * cnt[x] &gt; res)</span><br><span class=\"line\">        res = (LL)temp[x] * cnt[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">readIn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    n = readIn();</span><br><span class=\"line\">    m = readIn();</span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        color[i] = readIn();</span><br><span class=\"line\">        temp.push_back(color[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//离散化</span></span><br><span class=\"line\">    sort(temp.begin(), temp.end());</span><br><span class=\"line\">    temp.erase(unique(temp.begin(), temp.end()), temp.end());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        color[i] = lower_bound(temp.begin(), temp.end(), color[i]) - temp.begin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        query[i].id = i;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; query[i].l &gt;&gt; query[i].r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>; x &lt;= m;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = x;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//块号</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> block = get(query[x].l);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//块的右端点</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = (len - <span class=\"number\">1</span>) + block * len;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (y &lt;= m &amp;&amp; query[y].l &lt;= right)</span><br><span class=\"line\">            y++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &lt; y &amp;&amp; query[x].r &lt;= right) &#123;</span><br><span class=\"line\">            LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = query[x].l; i &lt;= query[x].r; i++)</span><br><span class=\"line\">                add(color[i], res);</span><br><span class=\"line\">            ans[query[x].id] = res;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = query[x].l; i &lt;= query[x].r; i++)</span><br><span class=\"line\">                cnt[color[i]]--;</span><br><span class=\"line\"></span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = right;</span><br><span class=\"line\">        LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &lt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (r &lt; query[x].r) &#123;</span><br><span class=\"line\">                add(color[++r], res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            LL backup = res;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = right; i &gt;= query[x].l; i--)</span><br><span class=\"line\">                add(color[i], res);</span><br><span class=\"line\"></span><br><span class=\"line\">            ans[query[x].id] = res;</span><br><span class=\"line\"></span><br><span class=\"line\">            res = backup;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = right; i &gt;= query[x].l; i--)</span><br><span class=\"line\">                cnt[color[i]]--;</span><br><span class=\"line\"></span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(cnt));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"树上莫队\"><a href=\"#树上莫队\" class=\"headerlink\" title=\"树上莫队\"></a>树上莫队</h3><p>题目:<br>查询树上(u -&gt; v) 路径上不同权值的个数<br>做法:<br>转化为dfs序上的区间问题，然后莫队  </p>\n<p>first[u], last[u] 分别为u在dfs序上前后两次出现的位置，<br>刚(u -&gt; v) (保证u在dfs序中的第一次出现先于v) 可转化为:</p>\n<ol>\n<li>如果lca(u, v) == u: first[u] ~ first[v]中只出现一次的节点</li>\n<li>如果lca(u, v) != u: last[u] ~ first[v]中只出现一次的节点 + lca</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> to[maxn], fir[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> nxt[maxn], idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//莫队</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[maxn], vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r, p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> la = get(l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lb = get(phs.l);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r &lt; phs.r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">    to[idx] = v;</span><br><span class=\"line\">    nxt[idx] = fir[u];</span><br><span class=\"line\">    fir[u] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//LCA</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[maxn], st[maxn][<span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//欧拉序列</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> seq[maxn], top;</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxn], last[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> father)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    seq[++top] = u;</span><br><span class=\"line\">    first[u] = top;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = fir[u], v = to[e]; e; e = nxt[e], v = to[e])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v != father) &#123;</span><br><span class=\"line\">            dep[v] = dep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            st[v][<span class=\"number\">0</span>] = u;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">15</span>; k++)</span><br><span class=\"line\">                st[v][k] = st[st[v][k - <span class=\"number\">1</span>]][k - <span class=\"number\">1</span>];</span><br><span class=\"line\">            dfs(v, u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    seq[++top] = u;</span><br><span class=\"line\">    last[u] = top;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[a] &lt; dep[b])</span><br><span class=\"line\">        swap(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">15</span>; k &gt;= <span class=\"number\">0</span>; k--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dep[st[a][k]] &gt;= dep[b])</span><br><span class=\"line\">            a = st[a][k];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">15</span>; k &gt;= <span class=\"number\">0</span>; k--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (st[a][k] != st[b][k]) &#123;</span><br><span class=\"line\">            a = st[a][k];</span><br><span class=\"line\">            b = st[b][k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> st[a][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    vis[x] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[x]) &#123;</span><br><span class=\"line\">        cnt[color[x]]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt[color[x]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            res++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cnt[color[x]]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt[color[x]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            res--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, color + i);</span><br><span class=\"line\">        nums.push_back(color[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//离散化</span></span><br><span class=\"line\">    sort(nums.begin(), nums.end());</span><br><span class=\"line\">    nums.erase(unique(nums.begin(), nums.end()), nums.end());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        color[i] = lower_bound(nums.begin(), nums.end(), color[i]) - nums.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读入树的边</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        add_edge(a, b);</span><br><span class=\"line\">        add_edge(b, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求欧拉序列并初始化st表</span></span><br><span class=\"line\">    dep[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读入询问并排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first[a] &gt; first[b])</span><br><span class=\"line\">            swap(a, b);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lca = LCA(a, b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lca == a) &#123;</span><br><span class=\"line\">            query[i] = &#123;i, first[a], first[b], <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            query[i] = &#123;i, last[a], first[b], lca&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>(top) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= m; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = query[k].id, l = query[k].l, r = query[k].r, p = query[k].p;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; r)</span><br><span class=\"line\">            add(seq[++j], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; r)</span><br><span class=\"line\">            add(seq[j--], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; l)</span><br><span class=\"line\">            add(seq[--i], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; l)</span><br><span class=\"line\">            add(seq[i++], res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p)</span><br><span class=\"line\">            add(p, res);</span><br><span class=\"line\">        ans[id] = res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p)</span><br><span class=\"line\">            add(p, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二次离线莫队\"><a href=\"#二次离线莫队\" class=\"headerlink\" title=\"二次离线莫队\"></a>二次离线莫队</h3><p>题目: Luogu P4887<br>查询区间[l, r]中满足a[i] xor a[j]的二进制表示中恰好有k个1的对数。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> w[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r;</span><br><span class=\"line\">    LL res;</span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Range</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r, t;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Range&gt; range[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, k, len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f[i] 1 ~ i 中与 w[i + 1] 配对的个数</span></span><br><span class=\"line\"><span class=\"comment\">//g[x]前i个数中， 与x配对的个数</span></span><br><span class=\"line\"><span class=\"comment\">//f[i] = g[w[i + 1]]</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn], g[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">readIn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> Query&amp; a, <span class=\"keyword\">const</span> Query&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> la = get(a.l);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lb = get(b.l);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.r &lt; b.r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_count</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"comment\">//x二进制表示中1的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x)</span><br><span class=\"line\">        res += (x &amp; <span class=\"number\">1</span>), x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LL ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = readIn();</span><br><span class=\"line\">    m = readIn();</span><br><span class=\"line\">    k = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        w[i] = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        query[i].id = i;</span><br><span class=\"line\">        query[i].l = readIn();</span><br><span class=\"line\">        query[i].r = readIn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + <span class=\"number\">1</span> + m, cmp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">14</span>); i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (get_count(i) == k)</span><br><span class=\"line\">            nums.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t : nums)</span><br><span class=\"line\">            g[w[i] ^ t]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        f[i] = g[w[i + <span class=\"number\">1</span>]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, L = <span class=\"number\">1</span>, R = <span class=\"number\">0</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = query[i].l, r = query[i].r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt; r)</span><br><span class=\"line\">            range[L - <span class=\"number\">1</span>].push_back(&#123;i, R + <span class=\"number\">1</span>, r, <span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R &lt; r)</span><br><span class=\"line\">            query[i].res += f[R], R++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &gt; r)</span><br><span class=\"line\">            range[L - <span class=\"number\">1</span>].push_back(&#123;i, r + <span class=\"number\">1</span>, R, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R &gt; r)</span><br><span class=\"line\">            query[i].res -= f[R - <span class=\"number\">1</span>], R--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt; l)</span><br><span class=\"line\">            range[R].push_back(&#123;i, L, l - <span class=\"number\">1</span>, <span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L &lt; l)</span><br><span class=\"line\">            query[i].res += f[L - <span class=\"number\">1</span>] + !k, L++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &gt; l)</span><br><span class=\"line\">            range[R].push_back(&#123;i, l, L - <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L &gt; l)</span><br><span class=\"line\">            query[i].res -= f[L - <span class=\"number\">2</span>] + !k, L--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(g, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(g));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t : nums)</span><br><span class=\"line\">            g[w[i] ^ t]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Range&amp; rg : range[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> id = rg.id, l = rg.l, r = rg.r;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = l; x &lt;= r; x++)</span><br><span class=\"line\">                query[id].res += (LL)rg.t * g[w[x]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= m; i++)</span><br><span class=\"line\">        query[i].res += query[i - <span class=\"number\">1</span>].res;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        ans[query[i].id] = query[i].res;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><h2 id=\"网络流\"><a href=\"#网络流\" class=\"headerlink\" title=\"网络流\"></a>网络流</h2><h3 id=\"EK算法\"><a href=\"#EK算法\" class=\"headerlink\" title=\"EK算法\"></a>EK算法</h3><p>复杂度$O(nm^2)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">20000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> from[maxm], to[maxm], cap[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fir[maxn], nxt[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    from[tot] = u;</span><br><span class=\"line\">    to[tot] = v;</span><br><span class=\"line\">    cap[tot] = c;</span><br><span class=\"line\"></span><br><span class=\"line\">    nxt[tot] = fir[u];</span><br><span class=\"line\">    fir[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[maxn], flow[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[maxn], l, r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\"></span><br><span class=\"line\">    flow[s] = INF;</span><br><span class=\"line\">    vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[++r] = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[++l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = fir[u]; e; e = nxt[e])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cap[e] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = to[e];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">                    flow[v] = min(flow[u], cap[e]);</span><br><span class=\"line\">                    q[++r] = v;</span><br><span class=\"line\">                    vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    pre[v] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v == t) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">EK</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = flow[t];</span><br><span class=\"line\">        res += k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = t; u != s; u = from[pre[u]]) &#123;</span><br><span class=\"line\">            cap[pre[u]] -= k;</span><br><span class=\"line\">            cap[pre[u] ^ <span class=\"number\">1</span>] += k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    tot = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        add(u, v, w);</span><br><span class=\"line\">        add(v, u, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, EK());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Dinic算法\"><a href=\"#Dinic算法\" class=\"headerlink\" title=\"Dinic算法\"></a>Dinic算法</h3><p>复杂度$O(n^2m)$ (<del>笑话</del>)<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">20000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> from[maxm], to[maxm], cap[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fir[maxn], nxt[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    from[tot] = u;</span><br><span class=\"line\">    to[tot] = v;</span><br><span class=\"line\">    cap[tot] = c;</span><br><span class=\"line\"></span><br><span class=\"line\">    nxt[tot] = fir[u];</span><br><span class=\"line\">    fir[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[maxn], flow[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[maxn], l, r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\"></span><br><span class=\"line\">    flow[s] = INF;</span><br><span class=\"line\">    vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q[++r] = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[++l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = fir[u]; e; e = nxt[e])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cap[e] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = to[e];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">                    flow[v] = min(flow[u], cap[e]);</span><br><span class=\"line\">                    q[++r] = v;</span><br><span class=\"line\">                    vis[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    pre[v] = e;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v == t) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">EK</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = flow[t];</span><br><span class=\"line\">        res += k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u = t; u != s; u = from[pre[u]]) &#123;</span><br><span class=\"line\">            cap[pre[u]] -= k;</span><br><span class=\"line\">            cap[pre[u] ^ <span class=\"number\">1</span>] += k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    tot = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        add(u, v, w);</span><br><span class=\"line\">        add(v, u, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, EK());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h2><h3 id=\"1-单点修改，区间查询\"><a href=\"#1-单点修改，区间查询\" class=\"headerlink\" title=\"1.单点修改，区间查询\"></a>1.单点修改，区间查询</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\">LL C[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x; x -= lowbit(x))</span><br><span class=\"line\">        res += C[x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x &lt;= n; x += lowbit(x))</span><br><span class=\"line\">        C[x] += v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, op, l, r;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v;</span><br><span class=\"line\">        add(i, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; sum(r) - sum(l - <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            add(l, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-区间修改，单点查询-（差分）\"><a href=\"#2-区间修改，单点查询-（差分）\" class=\"headerlink\" title=\"2. 区间修改，单点查询 （差分）\"></a>2. 区间修改，单点查询 （差分）</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[maxn], C[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x; x -= lowbit(x))</span><br><span class=\"line\">        res += C[x];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; x &lt;= n; x += lowbit(x))</span><br><span class=\"line\">        C[x] += v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        a[i] -= a[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        add(i, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r, v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; op;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; v;</span><br><span class=\"line\">            add(l, v);</span><br><span class=\"line\">            add(r + <span class=\"number\">1</span>, -v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; v;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; sum(v) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-区间修改，区间查询\"><a href=\"#3-区间修改，区间查询\" class=\"headerlink\" title=\"3. 区间修改，区间查询\"></a>3. 区间修改，区间查询</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delta[i] 表示 a[i], a[i + 1] .... a[n]  都要加上一个数delta[i]</span></span><br><span class=\"line\"><span class=\"comment\">//树状数组 C1用于维护delta[i], 树状数组C2维护 i * delta[i]</span></span><br><span class=\"line\"><span class=\"comment\">//前缀和 sum[i] = (i + 1) sum_delta[i] - sum_i*delta[i] </span></span><br><span class=\"line\"></span><br><span class=\"line\">LL C1[maxn], C2[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &amp; -x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, LL v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class=\"line\">        C1[i] += v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class=\"line\">        C2[i] += v * pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i; i -= lowbit(i)) &#123;</span><br><span class=\"line\">        res += (pos + <span class=\"number\">1</span>) * C1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pos; i; i -= lowbit(i)) &#123;</span><br><span class=\"line\">        res -= C2[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r;</span><br><span class=\"line\">    LL v;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; v;</span><br><span class=\"line\">        add(i, v);</span><br><span class=\"line\">        add(i + <span class=\"number\">1</span>, -v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; v;</span><br><span class=\"line\">            add(l, v);</span><br><span class=\"line\">            add(r + <span class=\"number\">1</span>, -v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; sum(r) - sum(l - <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h2><h3 id=\"1-区间加法，-区间求和\"><a href=\"#1-区间加法，-区间求和\" class=\"headerlink\" title=\"1. 区间加法， 区间求和\"></a>1. 区间加法， 区间求和</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegmentTree</span> &#123;</span></span><br><span class=\"line\">    LL sumv[maxn * <span class=\"number\">4</span>], addv[maxn * <span class=\"number\">4</span>]; <span class=\"comment\">//原数组大小的四倍</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        sumv[o] = sumv[lc] + sumv[rc];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span> </span>&#123; <span class=\"comment\">//标记下传</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L+R&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        addv[lc] += addv[o];</span><br><span class=\"line\">        sumv[lc] += addv[o] *( M-L +<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        addv[rc] += addv[o];</span><br><span class=\"line\">        sumv[rc] += addv[o] *(R-M);</span><br><span class=\"line\"></span><br><span class=\"line\">        addv[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L == R) &#123;</span><br><span class=\"line\">            sumv[o] = v[L];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        build(lc, L, M);</span><br><span class=\"line\">        build(rc, M + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">        pushdown(o,L,R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        LL sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= M) sum += query(lc,L,M,l,r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &gt; M) sum += query(rc,M+<span class=\"number\">1</span>,R,l,r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,LL x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= L &amp;&amp; r &gt;= R)&#123;</span><br><span class=\"line\">            addv[o] += x;</span><br><span class=\"line\">            sumv[o] += (R-L+<span class=\"number\">1</span>) * x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(o,L,R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L+R&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= M) update(lc,L,M,l,r,x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &gt; M ) update(rc,M+<span class=\"number\">1</span>,R,l,r,x);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; T;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-区间加法，-乘法，-区间求和\"><a href=\"#2-区间加法，-乘法，-区间求和\" class=\"headerlink\" title=\"2. 区间加法， 乘法， 区间求和\"></a>2. 区间加法， 乘法， 区间求和</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegmentTree</span> &#123;</span></span><br><span class=\"line\">    LL sumv[maxn], addv[maxn], mulv[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        sumv[o] = sumv[lc] + sumv[rc];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mulv[o] != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            mulv[lc] *= mulv[o];</span><br><span class=\"line\">            addv[lc] *= mulv[o];</span><br><span class=\"line\">            sumv[lc] *= mulv[o];</span><br><span class=\"line\"></span><br><span class=\"line\">            mulv[rc] *= mulv[o];</span><br><span class=\"line\">            addv[rc] *= mulv[o];</span><br><span class=\"line\">            sumv[rc] *= mulv[o];</span><br><span class=\"line\"></span><br><span class=\"line\">            mulv[o] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addv[o]) &#123;</span><br><span class=\"line\">            addv[lc] += addv[o];</span><br><span class=\"line\">            sumv[lc] += addv[o] * (M - L + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            addv[rc] += addv[o];</span><br><span class=\"line\">            sumv[rc] += addv[o] * (R - M);</span><br><span class=\"line\"></span><br><span class=\"line\">            addv[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        addv[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        mulv[o] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L == R) &#123;</span><br><span class=\"line\">            sumv[o] = v[L];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        build(lc, L, M);</span><br><span class=\"line\">        build(rc, M + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">        pushdown(o, L, R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        LL sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= M) sum += query(lc, L, M, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; M) sum += query(rc, M + <span class=\"number\">1</span>, R, l, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_add</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) &#123;</span><br><span class=\"line\">            addv[o] += x;</span><br><span class=\"line\">            sumv[o] += x * (R - L + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(o, L, R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= M) update_add(lc, L, M, l, r, x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; M) update_add(rc, M + <span class=\"number\">1</span>, R, l, r, x);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_mul</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= L &amp;&amp; r &gt;= R) &#123;</span><br><span class=\"line\">            mulv[o] *= x;</span><br><span class=\"line\">            addv[o] *= x;</span><br><span class=\"line\">            sumv[o] *= x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pushdown(o, L, R);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= M) update_mul(lc, L, M, l, r, x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; M) update_mul(rc, M + <span class=\"number\">1</span>, R, l, r, x);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; T;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><h2 id=\"数论\"><a href=\"#数论\" class=\"headerlink\" title=\"数论\"></a>数论</h2><h3 id=\"Baby-Step-Giant-Step算法\"><a href=\"#Baby-Step-Giant-Step算法\" class=\"headerlink\" title=\"Baby Step Giant Step算法\"></a>Baby Step Giant Step算法</h3><p>Baby Step, Giant Step算法:<br>求解不定方程 $a^x = b  (mod  p) \\quad (a,p互质)$<br>设$x = it - j  ( 1 \\le i \\le t,  0 \\le j \\le t ) \\quad (t ^ 2 \\ge p)  $<br>注意$i$不能从0开始，否则会产生负数解<br>j必须取到t， 否则可能漏解 $x = 0$<br>$a^{i<em>t} = b</em>a^j  (mod  p)$<br>先枚举右边并存到哈希表，然后枚举左边的值，并在哈希表中查找解。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LL <span class=\"title\">bsgs</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    b %= p;</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;LL, LL&gt; hash;</span><br><span class=\"line\">    LL t = <span class=\"built_in\">sqrt</span>(p) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    LL x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL j = <span class=\"number\">0</span>; j &lt; t; j++) &#123;</span><br><span class=\"line\">        LL val = b * x % p;</span><br><span class=\"line\">        hash[val] = j;</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hash[b * x % p] = t;</span><br><span class=\"line\">    a = x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (LL i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash.count(x)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i * t - hash[x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"扩展BSGS\"><a href=\"#扩展BSGS\" class=\"headerlink\" title=\"扩展BSGS\"></a>扩展BSGS</h3><p>题目同上， 但不保证 a p互质  </p>\n<p>$a^x = b  mod  p$</p>\n<ol>\n<li>先判断 $x = 0$ 是不是解, 是则直接返回</li>\n<li>设 $d = gcd(a, p)$，如果$b \\nmid d$,则无解，否则$\\frac{a}{d}a^{x - 1} = \\frac{b}{d}  mod  \\frac{p}{d}$</li>\n<li>$a^{x - 1} = \\frac{b}{d} (\\frac{a}{d})^{-1}  mod  \\frac{p}{d}$，递归求解  </li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL INF = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">exgcd</span><span class=\"params\">(LL a, LL b, LL&amp; x, LL&amp; y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LL d = exgcd(b, a % b, y, x);</span><br><span class=\"line\">        y -= a / b * x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">bsgs</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    b %= p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;LL, LL&gt; hash;</span><br><span class=\"line\">    LL x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    LL t = <span class=\"built_in\">sqrt</span>(p) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; t; j++) &#123;</span><br><span class=\"line\">        hash[x * b % p] = j;</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hash[x * b % p] = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    a = x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash.count(x)) <span class=\"keyword\">return</span> i * t - hash[x];</span><br><span class=\"line\">        x = x * a % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -INF;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">exbsgs</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> % p == b % p) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL x, y, d;</span><br><span class=\"line\">    d = exgcd(a, p, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bsgs(a, b, p);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b % d) <span class=\"keyword\">return</span> -INF;</span><br><span class=\"line\">        p /= d;</span><br><span class=\"line\">        <span class=\"comment\">//a / d 模 p的逆元</span></span><br><span class=\"line\">        exgcd(a / d, p, x, y);</span><br><span class=\"line\">        x = (x % p + p) % p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + exbsgs(a, b / d * x % p, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LL a, p, b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; p &gt;&gt; b, a || p || b) &#123;</span><br><span class=\"line\">        LL res = exbsgs(a, b, p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;No Solution&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; res &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多项式卷积\"><a href=\"#多项式卷积\" class=\"headerlink\" title=\"多项式卷积\"></a>多项式卷积</h2><h3 id=\"快速傅里叶变换FFT\"><a href=\"#快速傅里叶变换FFT\" class=\"headerlink\" title=\"快速傅里叶变换FFT\"></a>快速傅里叶变换FFT</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">300000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex() &#123;</span><br><span class=\"line\">        x = y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y) : x(x), y(y) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(x + b.x, y + b.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(x - b.x, y - b.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(x * b.x - y * b.y, x * b.y + y * b.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; a[maxn], b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, N, l;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex* A, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rev[i] &lt; i)</span><br><span class=\"line\">            swap(A[i], A[rev[i]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>; len &lt;= N; len &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = len &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span> * pi / len), type * <span class=\"built_in\">sin</span>(<span class=\"number\">2</span> * pi / len))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j += len) &#123;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">                Complex u = A[j + i];</span><br><span class=\"line\">                Complex v = A[j + i + m];</span><br><span class=\"line\"></span><br><span class=\"line\">                A[j + i] = u + w * v;</span><br><span class=\"line\">                A[j + i + m] = u - w * v;</span><br><span class=\"line\"></span><br><span class=\"line\">                w = w * wn;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>, &amp;a[i].x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>, &amp;b[i].x);</span><br><span class=\"line\">    N = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (N &lt; n + m + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        N &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        l++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; (l - <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        a[i] = a[i] * b[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a, N, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, (<span class=\"keyword\">int</span>)(a[i].x / N + <span class=\"number\">0.5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速数论变换-NTT\"><a href=\"#快速数论变换-NTT\" class=\"headerlink\" title=\"快速数论变换 NTT\"></a>快速数论变换 NTT</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LL P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL g = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">300000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, N, l;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[maxn], b[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">pow_mod</span><span class=\"params\">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class=\"line\">    LL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(LL* A, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rev[i] &lt; i)</span><br><span class=\"line\">            swap(A[i], A[rev[i]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>; len &lt;= N; len &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = len / <span class=\"number\">2</span>;</span><br><span class=\"line\">        LL wn = pow_mod(g, (P - <span class=\"number\">1</span>) / len, P);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            wn = pow_mod(wn, P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j += len) &#123;</span><br><span class=\"line\">            LL w = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">                LL u = A[j + i];</span><br><span class=\"line\">                LL v = A[j + i + m];</span><br><span class=\"line\"></span><br><span class=\"line\">                A[j + i] = (u + w * v % P) % P;</span><br><span class=\"line\">                A[j + i + m] = (u - w * v % P + P) % P;</span><br><span class=\"line\"></span><br><span class=\"line\">                w = w * wn % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, a + i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, b + i);</span><br><span class=\"line\"></span><br><span class=\"line\">    N = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (N &lt; n + m + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        N &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        l++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; (l - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fft(a, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b, N, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        a[i] = a[i] * b[i] % P;</span><br><span class=\"line\"></span><br><span class=\"line\">    fft(a, N, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    LL aN = pow_mod(N, P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, a[i] * aN % P);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多项式求逆\"><a href=\"#多项式求逆\" class=\"headerlink\" title=\"多项式求逆\"></a>多项式求逆</h3><p>如果$F(x) * G(x) \\equiv 1  mod  x^n $ (系数对998255435取模)，则称多项式$G(x)$是多项式$F(x)$的逆。  </p>\n<p>如果$F(x)<em>H(x) \\equiv 1  mod  x^{t}$<br>$G(x) = 2H(x) - F(x) </em> H^2(x)$<br>则$F(x)<em>G(x) \\equiv 1  mod  x^{2</em>t}$<br>从$t = 1$开始向上递推， 直到$t$不小于$n$  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    n = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        F[i] = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    G[<span class=\"number\">0</span>] = pow_mod(F[<span class=\"number\">0</span>], P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//G[x] * F[x] = 1 (mod x^t)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t &lt; n) &#123;</span><br><span class=\"line\">        t &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (N &lt;= t) &#123;</span><br><span class=\"line\">            N &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">            rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; (l - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++)</span><br><span class=\"line\">            T[i] = F[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t; i &lt; N; i++)</span><br><span class=\"line\">            T[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ntt(G, N, <span class=\"number\">1</span>);</span><br><span class=\"line\">        ntt(T, N, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            G[i] = (<span class=\"number\">2</span> * G[i] % P - (T[i] * G[i] % P) * G[i] % P + P) % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ntt(G, N, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        LL aN = pow_mod(N, P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            G[i] = G[i] * aN % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = t; i &lt; N; i++)</span><br><span class=\"line\">            G[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, G[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><h2 id=\"莫队\"><a href=\"#莫队\" class=\"headerlink\" title=\"莫队\"></a>莫队</h2><h3 id=\"普通莫队\"><a href=\"#普通莫队\" class=\"headerlink\" title=\"普通莫队\"></a>普通莫队</h3><p>题目: HH的项链<br>查询:区间[l, r]是有多少种不同的颜色<br>莫队排序:<br>先考虑左端点所在块编号<br>再考虑右端点编号</p>\n<p>块长度 $len = \\sqrt{n^2 / m}$<br>时间复杂度 $O(\\sqrt{n^2 / m})$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">50000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm = <span class=\"number\">200000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxs = <span class=\"number\">1000000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[maxs];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[color[i]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        res++;</span><br><span class=\"line\">    cnt[color[i]]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[color[i]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        res--;</span><br><span class=\"line\">    cnt[color[i]]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (get(l) == get(phs.l)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r &lt; phs.r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(l) &lt; get(phs.l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; q[maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    n = read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        color[i] = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    m = read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        q[i].id = i;</span><br><span class=\"line\">        q[i].l = read();</span><br><span class=\"line\">        q[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>((<span class=\"keyword\">double</span>) n * n / m);</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(q + <span class=\"number\">1</span>, q + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= m; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; q[k].l)</span><br><span class=\"line\">            del(i++, res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; q[k].l)</span><br><span class=\"line\">            add(--i, res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; q[k].r)</span><br><span class=\"line\">            add(++j, res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; q[k].r)</span><br><span class=\"line\">            del(j--, res);</span><br><span class=\"line\">        ans[q[k].id] = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"带修改的莫队\"><a href=\"#带修改的莫队\" class=\"headerlink\" title=\"带修改的莫队\"></a>带修改的莫队</h3><p>题目: 数颜色 Luogu P3939<br>按每次修改操作划分时间戳<br>排序:  </p>\n<ol>\n<li>左端点块编号</li>\n<li>右端点块编号</li>\n<li>时间戳</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">1000000</span> + <span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r, t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> la = get(l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ra = get(r);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lb = get(phs.l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rb = get(phs.r);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ra != rb) <span class=\"keyword\">return</span> ra &lt; rb;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t &lt; phs.t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Replace</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col;</span><br><span class=\"line\">&#125; rp[<span class=\"number\">1010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[v] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        res++;</span><br><span class=\"line\">    cnt[v]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt[v] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        res--;</span><br><span class=\"line\">    cnt[v]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, color + i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cq = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ct = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d%d&quot;</span>, op, &amp;l, &amp;r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*op == <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            cq++;</span><br><span class=\"line\">            query[cq] = &#123;cq, l, r, ct&#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            rp[++ct] = &#123;l, r&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len = <span class=\"built_in\">pow</span>(n * ct, <span class=\"number\">1.f</span> / <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + cq + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= cq; k++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = query[k].id;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = query[k].l;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = query[k].r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; l)</span><br><span class=\"line\">            add(color[--i], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; l)</span><br><span class=\"line\">            del(color[i++], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; r)</span><br><span class=\"line\">            add(color[++j], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; r)</span><br><span class=\"line\">            del(color[j--], res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &lt; query[k].t) &#123;</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rp[t].pos &gt;= l &amp;&amp; rp[t].pos &lt;= r) &#123;</span><br><span class=\"line\">                del(color[rp[t].pos], res);</span><br><span class=\"line\">                add(rp[t].col, res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(rp[t].col, color[rp[t].pos]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &gt; query[k].t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rp[t].pos &gt;= l &amp;&amp; rp[t].pos &lt;= r) &#123;</span><br><span class=\"line\">                del(color[rp[t].pos], res);</span><br><span class=\"line\">                add(rp[t].col, res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(rp[t].col, color[rp[t].pos]);</span><br><span class=\"line\">            t--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[id] = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= cq; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"带回滚的莫队\"><a href=\"#带回滚的莫队\" class=\"headerlink\" title=\"带回滚的莫队\"></a>带回滚的莫队</h3><p>题目: 历史研究 luogu AT1219<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; temp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[maxn];</span><br><span class=\"line\">LL ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> la = get(l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lb = get(phs.l);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r &lt; phs.r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, LL&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    cnt[x]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((LL)temp[x] * cnt[x] &gt; res)</span><br><span class=\"line\">        res = (LL)temp[x] * cnt[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">readIn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    n = readIn();</span><br><span class=\"line\">    m = readIn();</span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        color[i] = readIn();</span><br><span class=\"line\">        temp.push_back(color[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//离散化</span></span><br><span class=\"line\">    sort(temp.begin(), temp.end());</span><br><span class=\"line\">    temp.erase(unique(temp.begin(), temp.end()), temp.end());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        color[i] = lower_bound(temp.begin(), temp.end(), color[i]) - temp.begin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        query[i].id = i;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; query[i].l &gt;&gt; query[i].r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>; x &lt;= m;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = x;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//块号</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> block = get(query[x].l);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//块的右端点</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = (len - <span class=\"number\">1</span>) + block * len;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (y &lt;= m &amp;&amp; query[y].l &lt;= right)</span><br><span class=\"line\">            y++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &lt; y &amp;&amp; query[x].r &lt;= right) &#123;</span><br><span class=\"line\">            LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = query[x].l; i &lt;= query[x].r; i++)</span><br><span class=\"line\">                add(color[i], res);</span><br><span class=\"line\">            ans[query[x].id] = res;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = query[x].l; i &lt;= query[x].r; i++)</span><br><span class=\"line\">                cnt[color[i]]--;</span><br><span class=\"line\"></span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = right;</span><br><span class=\"line\">        LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &lt; y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (r &lt; query[x].r) &#123;</span><br><span class=\"line\">                add(color[++r], res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            LL backup = res;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = right; i &gt;= query[x].l; i--)</span><br><span class=\"line\">                add(color[i], res);</span><br><span class=\"line\"></span><br><span class=\"line\">            ans[query[x].id] = res;</span><br><span class=\"line\"></span><br><span class=\"line\">            res = backup;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = right; i &gt;= query[x].l; i--)</span><br><span class=\"line\">                cnt[color[i]]--;</span><br><span class=\"line\"></span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(cnt));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"树上莫队\"><a href=\"#树上莫队\" class=\"headerlink\" title=\"树上莫队\"></a>树上莫队</h3><p>题目:<br>查询树上(u -&gt; v) 路径上不同权值的个数<br>做法:<br>转化为dfs序上的区间问题，然后莫队  </p>\n<p>first[u], last[u] 分别为u在dfs序上前后两次出现的位置，<br>刚(u -&gt; v) (保证u在dfs序中的第一次出现先于v) 可转化为:</p>\n<ol>\n<li>如果lca(u, v) == u: first[u] ~ first[v]中只出现一次的节点</li>\n<li>如果lca(u, v) != u: last[u] ~ first[v]中只出现一次的节点 + lca</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> color[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> to[maxn], fir[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> nxt[maxn], idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//莫队</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[maxn], vis[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r, p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Query&amp; phs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> la = get(l);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lb = get(phs.l);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r &lt; phs.r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">    to[idx] = v;</span><br><span class=\"line\">    nxt[idx] = fir[u];</span><br><span class=\"line\">    fir[u] = idx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//LCA</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[maxn], st[maxn][<span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//欧拉序列</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> seq[maxn], top;</span><br><span class=\"line\"><span class=\"keyword\">int</span> first[maxn], last[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> father)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    seq[++top] = u;</span><br><span class=\"line\">    first[u] = top;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> e = fir[u], v = to[e]; e; e = nxt[e], v = to[e])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v != father) &#123;</span><br><span class=\"line\">            dep[v] = dep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            st[v][<span class=\"number\">0</span>] = u;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">15</span>; k++)</span><br><span class=\"line\">                st[v][k] = st[st[v][k - <span class=\"number\">1</span>]][k - <span class=\"number\">1</span>];</span><br><span class=\"line\">            dfs(v, u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    seq[++top] = u;</span><br><span class=\"line\">    last[u] = top;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[a] &lt; dep[b])</span><br><span class=\"line\">        swap(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">15</span>; k &gt;= <span class=\"number\">0</span>; k--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dep[st[a][k]] &gt;= dep[b])</span><br><span class=\"line\">            a = st[a][k];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">15</span>; k &gt;= <span class=\"number\">0</span>; k--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (st[a][k] != st[b][k]) &#123;</span><br><span class=\"line\">            a = st[a][k];</span><br><span class=\"line\">            b = st[b][k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> st[a][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span>&amp; res)</span> </span>&#123;</span><br><span class=\"line\">    vis[x] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vis[x]) &#123;</span><br><span class=\"line\">        cnt[color[x]]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt[color[x]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            res++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cnt[color[x]]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt[color[x]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            res--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, color + i);</span><br><span class=\"line\">        nums.push_back(color[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//离散化</span></span><br><span class=\"line\">    sort(nums.begin(), nums.end());</span><br><span class=\"line\">    nums.erase(unique(nums.begin(), nums.end()), nums.end());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        color[i] = lower_bound(nums.begin(), nums.end(), color[i]) - nums.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读入树的边</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        add_edge(a, b);</span><br><span class=\"line\">        add_edge(b, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求欧拉序列并初始化st表</span></span><br><span class=\"line\">    dep[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读入询问并排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first[a] &gt; first[b])</span><br><span class=\"line\">            swap(a, b);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lca = LCA(a, b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lca == a) &#123;</span><br><span class=\"line\">            query[i] = &#123;i, first[a], first[b], <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            query[i] = &#123;i, last[a], first[b], lca&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>(top) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= m; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = query[k].id, l = query[k].l, r = query[k].r, p = query[k].p;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; r)</span><br><span class=\"line\">            add(seq[++j], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; r)</span><br><span class=\"line\">            add(seq[j--], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; l)</span><br><span class=\"line\">            add(seq[--i], res);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; l)</span><br><span class=\"line\">            add(seq[i++], res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p)</span><br><span class=\"line\">            add(p, res);</span><br><span class=\"line\">        ans[id] = res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p)</span><br><span class=\"line\">            add(p, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二次离线莫队\"><a href=\"#二次离线莫队\" class=\"headerlink\" title=\"二次离线莫队\"></a>二次离线莫队</h3><p>题目: Luogu P4887<br>查询区间[l, r]中满足a[i] xor a[j]的二进制表示中恰好有k个1的对数。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">100000</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> w[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r;</span><br><span class=\"line\">    LL res;</span><br><span class=\"line\">&#125; query[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Range</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id, l, r, t;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;Range&gt; range[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, k, len;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f[i] 1 ~ i 中与 w[i + 1] 配对的个数</span></span><br><span class=\"line\"><span class=\"comment\">//g[x]前i个数中， 与x配对的个数</span></span><br><span class=\"line\"><span class=\"comment\">//f[i] = g[w[i + 1]]</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn], g[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">readIn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> Query&amp; a, <span class=\"keyword\">const</span> Query&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> la = get(a.l);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lb = get(b.l);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (la != lb) <span class=\"keyword\">return</span> la &lt; lb;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.r &lt; b.r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_count</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"comment\">//x二进制表示中1的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x)</span><br><span class=\"line\">        res += (x &amp; <span class=\"number\">1</span>), x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LL ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    n = readIn();</span><br><span class=\"line\">    m = readIn();</span><br><span class=\"line\">    k = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        w[i] = readIn();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        query[i].id = i;</span><br><span class=\"line\">        query[i].l = readIn();</span><br><span class=\"line\">        query[i].r = readIn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = <span class=\"built_in\">sqrt</span>(n) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(query + <span class=\"number\">1</span>, query + <span class=\"number\">1</span> + m, cmp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">14</span>); i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (get_count(i) == k)</span><br><span class=\"line\">            nums.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t : nums)</span><br><span class=\"line\">            g[w[i] ^ t]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        f[i] = g[w[i + <span class=\"number\">1</span>]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, L = <span class=\"number\">1</span>, R = <span class=\"number\">0</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = query[i].l, r = query[i].r;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt; r)</span><br><span class=\"line\">            range[L - <span class=\"number\">1</span>].push_back(&#123;i, R + <span class=\"number\">1</span>, r, <span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R &lt; r)</span><br><span class=\"line\">            query[i].res += f[R], R++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &gt; r)</span><br><span class=\"line\">            range[L - <span class=\"number\">1</span>].push_back(&#123;i, r + <span class=\"number\">1</span>, R, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R &gt; r)</span><br><span class=\"line\">            query[i].res -= f[R - <span class=\"number\">1</span>], R--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt; l)</span><br><span class=\"line\">            range[R].push_back(&#123;i, L, l - <span class=\"number\">1</span>, <span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L &lt; l)</span><br><span class=\"line\">            query[i].res += f[L - <span class=\"number\">1</span>] + !k, L++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &gt; l)</span><br><span class=\"line\">            range[R].push_back(&#123;i, l, L - <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L &gt; l)</span><br><span class=\"line\">            query[i].res -= f[L - <span class=\"number\">2</span>] + !k, L--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(g, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(g));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t : nums)</span><br><span class=\"line\">            g[w[i] ^ t]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Range&amp; rg : range[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> id = rg.id, l = rg.l, r = rg.r;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = l; x &lt;= r; x++)</span><br><span class=\"line\">                query[id].res += (LL)rg.t * g[w[x]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= m; i++)</span><br><span class=\"line\">        query[i].res += query[i - <span class=\"number\">1</span>].res;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        ans[query[i].id] = query[i].res;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}