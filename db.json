{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/FFT学习笔记.md","hash":"10fe581e7f41edec8db314845850cff54667c42c","modified":1611810327310},{"_id":"source/_posts/test.md","hash":"90eb6057fd8059201be01f0f80e9a25331a78591","modified":1611810206518},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"ecf89875000820cdf9e266037299ea0bc502f17d","modified":1611808330488},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"public/2021/01/28/test/index.html","hash":"38ded40d9d4982edb27fc543bc838ad1ca36cf12","modified":1611810338240},{"_id":"public/archives/index.html","hash":"e78d19fdf86f55c5127f54733964cbac8378dd2c","modified":1611810437364},{"_id":"public/archives/2021/index.html","hash":"765be4ed9177813e015930eadc0428de203da448","modified":1611810437364},{"_id":"public/archives/2021/01/index.html","hash":"ae65d4df02150956356766c2d45bf89d0608cafe","modified":1611810437364},{"_id":"public/2021/01/28/FFT学习笔记/index.html","hash":"d44636c18790965440acf232bbb39847c709832f","modified":1611810437364},{"_id":"public/index.html","hash":"aa9f7787de2d746cb4523c574a7de6c8aff19c9d","modified":1611810437364},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1611810338240},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1611810338240},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1611810338240},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1611810338240},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1611810338240},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1611810338240},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1611810338240},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1611810338240},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1611810338240},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1611810338240},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1611810338240},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1611810338240}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FFT学习笔记","mathjax":true,"date":"2021-01-28T05:04:48.000Z","_content":"\n# 多项式\n\n### 系数表达\n$$A(x) = \\sum_{i=0}^{n-1}a_ix^i$$  \n### 点值表达\n$$ \\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\} $$\n\n# 算法概括\nFFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。  \n主要过程为：\n1. 计算原有两个多项式在单位复数根下的点值。（DFT）\n2. 将两个多项式的点值相乘。得到乘积的点值。\n3. 将点值还原为系数表达。（IDFT）\n\n# 单位复数根\n\n### $n$次单位复数根\n$$w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1$$\n\n### 单位根的性质\n\n#### 消去定理\n$$w_{2n}^{2k} = w_n^k $$\n#### 折半定理\n$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。\n\n#### 其它\n$$w_n^{k+n/2} = -w_n^k  $$\n$$w_n^{k+n} = w_n^{k}  $$\n\n\n# 离散傅利叶变换（DFT）\n设多项式$$A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}$$\n他的所有的偶数次项系数组成新多项式  \n$$A_0(x) = a_0 + a_2x + a_4x^2 + ... $$\n$$A_1(x) = a_1 + a_3x + a_4x^2 + ... $$\n则显然有$$A(x) = A_0(x^2)+xA_1(x^2) $$\n$$A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k}) $$ \n\n$$A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k}) $$\n\n利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，\n递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。\n总时间复杂度为$O(nlogn)$\n\n## 伪代码\n\n### 递归实现\n``` \nDFT(A,n) //A为系数数组，n为项数，且n为2的整数次幂（可在）\nif n = 1\n    return\n\nm = n/2\nfor i = 0 to m\n    A0[i] = A[2*i]\n    A1[i] = A[2*i+1]\n\nDFT(A0,n)\nDFT(A1,n)\n\nw = 1\nwn = cos(2pi/n) + i*sin(2pi/n)\nfor i = 0 to m-1\n    A[i] = A0[i] + w*A1[i]\n    A[i+m] = A0[i] - w*A1[i]\n    w = w*wn\nreturn\n```\n\n### 迭代实现  \n将系数数组排成$log_2n$次奇偶分离操作后的顺序  \n这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列\n每个数翻转后的数可以递推求出。\nC++代码:\n``` cpp\n\nstruct Complex{}//实现复数类，此外省略\n\n//1. rev 的计算 （放在main函数中）\nfor(int i = 0;i<n;i++)\n    rev[i] = (rev[i>>1]>>1) | ((i&1) >> l-1)\n\nvoid DFT(Complex *A,int n ){\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = a[j+i];\n                Complex v = a[j+i+m];\n                a[j+i] = u + w*v;\n                a[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n```\n\n# 离散傅利叶逆变换（IDFT）\n\n将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。\n代码可以与DFT合并 \n\n``` cpp\nvoid FFT(Complex *A,int n ,int type){\n    //type = 1表示DFT\n    //type = -1 表示IDFT\n\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n\n```\n\n\n# 完整代码\n``` cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 10000000+100;\nconst double pi = acos(-1);\n\n//实现复数类\nstruct Complex{\n    double r,v;//实部和虚部\n    Complex(){\n        r = v = 0;\n    }\n    Complex(double a,double b){\n        r = a; v = b;\n    }\n    \n    Complex operator+(const Complex &p) const{\n        return Complex(r+p.r,v+p.v);\n    }\n    Complex operator-(const Complex &p) const{\n        return Complex(r-p.r,v-p.v);\n    }\n    Complex operator*(const Complex &p) const{\n        return Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); \n    }\n    \n};\n\nComplex a[maxn],b[maxn];\n\nint rev[maxn];\n\n//DFT和IDFT\nvoid fft(Complex * A,int n,int type){\n    \n    for(int i = 0;i<n;i++)\n        if(rev[i] < i ) swap(A[i],A[rev[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){//the length of doing \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){\n            int m = len>>1;\n            \n            Complex w(1,0);\n            \n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;\n                w = w*wn; \n            }\n            \n        }\n    }\n}\n\n//读入优化\ninline int read(){\n    int x = 0;\n    char c =getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0' && c<='9' ){\n        x = x*10 + c-'0';\n        c = getchar();\n    }\n    return x;\n    \n}\n\nint main(){\n    int n,m;\n    n =  read();\n    m = read();\n\n    for(int i = 0;i<=n;i++){\n        a[i].r = read();\n    }\n    \n    for(int i = 0;i<=m;i++){\n        b[i].r = read();\n    }\n    \n    \n    //将项数补齐到2的整数次幂\n    \n    int N = 1;\n    int l = 0;\n    while(N<=n+m) N <<= 1,l++;\n    \n    //求rev\n    for(int i =0;i<N;i++)\n        rev[i] = (rev[i>>1]>>1) | ((i&1) << (l-1) );\n    \n    fft(a,N,1);\n    fft(b,N,1);\n    \n    for(int i = 0;i<N;i++)\n        a[i] = a[i]*b[i];\n    fft(a,N,-1);\n    \n    for(int i =0;i<=n+m;i++)\n        printf(\"%d \",(int)(a[i].r/N+0.5));//+0.5实现四舍五入\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n\n\n","source":"_posts/FFT学习笔记.md","raw":"---\ntitle: FFT学习笔记\nmathjax: true\ndate: 2021-01-28 13:04:48\ntags:\n---\n\n# 多项式\n\n### 系数表达\n$$A(x) = \\sum_{i=0}^{n-1}a_ix^i$$  \n### 点值表达\n$$ \\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\} $$\n\n# 算法概括\nFFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。  \n主要过程为：\n1. 计算原有两个多项式在单位复数根下的点值。（DFT）\n2. 将两个多项式的点值相乘。得到乘积的点值。\n3. 将点值还原为系数表达。（IDFT）\n\n# 单位复数根\n\n### $n$次单位复数根\n$$w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1$$\n\n### 单位根的性质\n\n#### 消去定理\n$$w_{2n}^{2k} = w_n^k $$\n#### 折半定理\n$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。\n\n#### 其它\n$$w_n^{k+n/2} = -w_n^k  $$\n$$w_n^{k+n} = w_n^{k}  $$\n\n\n# 离散傅利叶变换（DFT）\n设多项式$$A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}$$\n他的所有的偶数次项系数组成新多项式  \n$$A_0(x) = a_0 + a_2x + a_4x^2 + ... $$\n$$A_1(x) = a_1 + a_3x + a_4x^2 + ... $$\n则显然有$$A(x) = A_0(x^2)+xA_1(x^2) $$\n$$A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k}) $$ \n\n$$A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k}) $$\n\n利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，\n递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。\n总时间复杂度为$O(nlogn)$\n\n## 伪代码\n\n### 递归实现\n``` \nDFT(A,n) //A为系数数组，n为项数，且n为2的整数次幂（可在）\nif n = 1\n    return\n\nm = n/2\nfor i = 0 to m\n    A0[i] = A[2*i]\n    A1[i] = A[2*i+1]\n\nDFT(A0,n)\nDFT(A1,n)\n\nw = 1\nwn = cos(2pi/n) + i*sin(2pi/n)\nfor i = 0 to m-1\n    A[i] = A0[i] + w*A1[i]\n    A[i+m] = A0[i] - w*A1[i]\n    w = w*wn\nreturn\n```\n\n### 迭代实现  \n将系数数组排成$log_2n$次奇偶分离操作后的顺序  \n这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列\n每个数翻转后的数可以递推求出。\nC++代码:\n``` cpp\n\nstruct Complex{}//实现复数类，此外省略\n\n//1. rev 的计算 （放在main函数中）\nfor(int i = 0;i<n;i++)\n    rev[i] = (rev[i>>1]>>1) | ((i&1) >> l-1)\n\nvoid DFT(Complex *A,int n ){\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = a[j+i];\n                Complex v = a[j+i+m];\n                a[j+i] = u + w*v;\n                a[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n```\n\n# 离散傅利叶逆变换（IDFT）\n\n将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。\n代码可以与DFT合并 \n\n``` cpp\nvoid FFT(Complex *A,int n ,int type){\n    //type = 1表示DFT\n    //type = -1 表示IDFT\n\n    for(int i = 0;i<n;i++)\n        if(i<rev[i]) swap(A[i],A[r[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){ \n        //从短到长枚举要外理的长度，相当于从递归的底层到顶层\n        \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){//枚举要外理的部分的长度\n            int m = len>>1;\n            Complex w(1,0);\n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;//蝴蝶操作\n                w = w*wn; \n            }\n        }\n    }\n}\n\n```\n\n\n# 完整代码\n``` cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 10000000+100;\nconst double pi = acos(-1);\n\n//实现复数类\nstruct Complex{\n    double r,v;//实部和虚部\n    Complex(){\n        r = v = 0;\n    }\n    Complex(double a,double b){\n        r = a; v = b;\n    }\n    \n    Complex operator+(const Complex &p) const{\n        return Complex(r+p.r,v+p.v);\n    }\n    Complex operator-(const Complex &p) const{\n        return Complex(r-p.r,v-p.v);\n    }\n    Complex operator*(const Complex &p) const{\n        return Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); \n    }\n    \n};\n\nComplex a[maxn],b[maxn];\n\nint rev[maxn];\n\n//DFT和IDFT\nvoid fft(Complex * A,int n,int type){\n    \n    for(int i = 0;i<n;i++)\n        if(rev[i] < i ) swap(A[i],A[rev[i]]);\n    \n    for(int len = 2;len <= n;len <<= 1){//the length of doing \n        Complex wn(cos(2*pi/len), type*sin(2*pi/len) );\n        for(int j = 0;j<n;j+=len){\n            int m = len>>1;\n            \n            Complex w(1,0);\n            \n            for(int i = 0;i<m;i++){\n                Complex u = A[j+i];\n                Complex v = A[j+i+m];\n                A[j+i] = u + w*v;\n                A[j+i+m] = u-w*v;\n                w = w*wn; \n            }\n            \n        }\n    }\n}\n\n//读入优化\ninline int read(){\n    int x = 0;\n    char c =getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0' && c<='9' ){\n        x = x*10 + c-'0';\n        c = getchar();\n    }\n    return x;\n    \n}\n\nint main(){\n    int n,m;\n    n =  read();\n    m = read();\n\n    for(int i = 0;i<=n;i++){\n        a[i].r = read();\n    }\n    \n    for(int i = 0;i<=m;i++){\n        b[i].r = read();\n    }\n    \n    \n    //将项数补齐到2的整数次幂\n    \n    int N = 1;\n    int l = 0;\n    while(N<=n+m) N <<= 1,l++;\n    \n    //求rev\n    for(int i =0;i<N;i++)\n        rev[i] = (rev[i>>1]>>1) | ((i&1) << (l-1) );\n    \n    fft(a,N,1);\n    fft(b,N,1);\n    \n    for(int i = 0;i<N;i++)\n        a[i] = a[i]*b[i];\n    fft(a,N,-1);\n    \n    for(int i =0;i<=n+m;i++)\n        printf(\"%d \",(int)(a[i].r/N+0.5));//+0.5实现四舍五入\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n\n\n","slug":"FFT学习笔记","published":1,"updated":"2021-01-28T05:05:27.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkge9coo00005cwn167sa3pr","content":"<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h3 id=\"系数表达\"><a href=\"#系数表达\" class=\"headerlink\" title=\"系数表达\"></a>系数表达</h3><script type=\"math/tex; mode=display\">A(x) = \\sum_{i=0}^{n-1}a_ix^i</script><h3 id=\"点值表达\"><a href=\"#点值表达\" class=\"headerlink\" title=\"点值表达\"></a>点值表达</h3><script type=\"math/tex; mode=display\">\\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\}</script><h1 id=\"算法概括\"><a href=\"#算法概括\" class=\"headerlink\" title=\"算法概括\"></a>算法概括</h1><p>FFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。<br>主要过程为：</p>\n<ol>\n<li>计算原有两个多项式在单位复数根下的点值。（DFT）</li>\n<li>将两个多项式的点值相乘。得到乘积的点值。</li>\n<li>将点值还原为系数表达。（IDFT）</li>\n</ol>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h3 id=\"n-次单位复数根\"><a href=\"#n-次单位复数根\" class=\"headerlink\" title=\"$n$次单位复数根\"></a>$n$次单位复数根</h3><script type=\"math/tex; mode=display\">w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1</script><h3 id=\"单位根的性质\"><a href=\"#单位根的性质\" class=\"headerlink\" title=\"单位根的性质\"></a>单位根的性质</h3><h4 id=\"消去定理\"><a href=\"#消去定理\" class=\"headerlink\" title=\"消去定理\"></a>消去定理</h4><script type=\"math/tex; mode=display\">w_{2n}^{2k} = w_n^k</script><h4 id=\"折半定理\"><a href=\"#折半定理\" class=\"headerlink\" title=\"折半定理\"></a>折半定理</h4><p>$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。</p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><script type=\"math/tex; mode=display\">w_n^{k+n/2} = -w_n^k</script><script type=\"math/tex; mode=display\">w_n^{k+n} = w_n^{k}</script><h1 id=\"离散傅利叶变换（DFT）\"><a href=\"#离散傅利叶变换（DFT）\" class=\"headerlink\" title=\"离散傅利叶变换（DFT）\"></a>离散傅利叶变换（DFT）</h1><p>设多项式<script type=\"math/tex\">A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}</script><br>他的所有的偶数次项系数组成新多项式  </p>\n<script type=\"math/tex; mode=display\">A_0(x) = a_0 + a_2x + a_4x^2 + ...</script><script type=\"math/tex; mode=display\">A_1(x) = a_1 + a_3x + a_4x^2 + ...</script><p>则显然有<script type=\"math/tex\">A(x) = A_0(x^2)+xA_1(x^2)</script></p>\n<script type=\"math/tex; mode=display\">A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k})</script><script type=\"math/tex; mode=display\">A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k})</script><p>利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，<br>递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。<br>总时间复杂度为$O(nlogn)$</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DFT(A,n) &#x2F;&#x2F;A为系数数组，n为项数，且n为2的整数次幂（可在）</span><br><span class=\"line\">if n &#x3D; 1</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">m &#x3D; n&#x2F;2</span><br><span class=\"line\">for i &#x3D; 0 to m</span><br><span class=\"line\">    A0[i] &#x3D; A[2*i]</span><br><span class=\"line\">    A1[i] &#x3D; A[2*i+1]</span><br><span class=\"line\"></span><br><span class=\"line\">DFT(A0,n)</span><br><span class=\"line\">DFT(A1,n)</span><br><span class=\"line\"></span><br><span class=\"line\">w &#x3D; 1</span><br><span class=\"line\">wn &#x3D; cos(2pi&#x2F;n) + i*sin(2pi&#x2F;n)</span><br><span class=\"line\">for i &#x3D; 0 to m-1</span><br><span class=\"line\">    A[i] &#x3D; A0[i] + w*A1[i]</span><br><span class=\"line\">    A[i+m] &#x3D; A0[i] - w*A1[i]</span><br><span class=\"line\">    w &#x3D; w*wn</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h3><p>将系数数组排成$log_2n$次奇偶分离操作后的顺序<br>这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列<br>每个数翻转后的数可以递推求出。<br>C++代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span>&#125;<span class=\"comment\">//实现复数类，此外省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. rev 的计算 （放在main函数中）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &gt;&gt; l<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> DFT(Complex *A,<span class=\"keyword\">int</span> n )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = a[j+i];</span><br><span class=\"line\">                Complex v = a[j+i+m];</span><br><span class=\"line\">                a[j+i] = u + w*v;</span><br><span class=\"line\">                a[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"离散傅利叶逆变换（IDFT）\"><a href=\"#离散傅利叶逆变换（IDFT）\" class=\"headerlink\" title=\"离散傅利叶逆变换（IDFT）\"></a>离散傅利叶逆变换（IDFT）</h1><p>将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。<br>代码可以与DFT合并 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex *A,<span class=\"keyword\">int</span> n ,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//type = 1表示DFT</span></span><br><span class=\"line\">    <span class=\"comment\">//type = -1 表示IDFT</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000000</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现复数类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r,v;<span class=\"comment\">//实部和虚部</span></span><br><span class=\"line\">    Complex()&#123;</span><br><span class=\"line\">        r = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> a,<span class=\"keyword\">double</span> b)&#123;</span><br><span class=\"line\">        r = a; v = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r+p.r,v+p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r-p.r,v-p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DFT和IDFT</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex * A,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rev[i] &lt; i ) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123;<span class=\"comment\">//the length of doing </span></span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;</span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读入优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c =getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>) c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class=\"string\">&#x27;9&#x27;</span> )&#123;</span><br><span class=\"line\">        x = x*<span class=\"number\">10</span> + c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n =  read();</span><br><span class=\"line\">    m = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        b[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将项数补齐到2的整数次幂</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(N&lt;=n+m) N &lt;&lt;= <span class=\"number\">1</span>,l++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//求rev</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (l<span class=\"number\">-1</span>) );</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        a[i] = a[i]*b[i];</span><br><span class=\"line\">    fft(a,N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;=n+m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,(<span class=\"keyword\">int</span>)(a[i].r/N+<span class=\"number\">0.5</span>));<span class=\"comment\">//+0.5实现四舍五入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h3 id=\"系数表达\"><a href=\"#系数表达\" class=\"headerlink\" title=\"系数表达\"></a>系数表达</h3><script type=\"math/tex; mode=display\">A(x) = \\sum_{i=0}^{n-1}a_ix^i</script><h3 id=\"点值表达\"><a href=\"#点值表达\" class=\"headerlink\" title=\"点值表达\"></a>点值表达</h3><script type=\"math/tex; mode=display\">\\{(x_0,y_0), (x_1,y_1),(x_2,y_2),...,(x_n-1,y_n-1) \\}</script><h1 id=\"算法概括\"><a href=\"#算法概括\" class=\"headerlink\" title=\"算法概括\"></a>算法概括</h1><p>FFT可以在$O(nlogn)$的时间复杂度内计算两个一元多项式的乘积。<br>主要过程为：</p>\n<ol>\n<li>计算原有两个多项式在单位复数根下的点值。（DFT）</li>\n<li>将两个多项式的点值相乘。得到乘积的点值。</li>\n<li>将点值还原为系数表达。（IDFT）</li>\n</ol>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h3 id=\"n-次单位复数根\"><a href=\"#n-次单位复数根\" class=\"headerlink\" title=\"$n$次单位复数根\"></a>$n$次单位复数根</h3><script type=\"math/tex; mode=display\">w_n^k = e^{i\\frac{2\\pi k}{n}}= cos(\\frac{2\\pi k}{n})+isin(\\frac{2\\pi k}{n})\\quad k=0,1,2...,n-1</script><h3 id=\"单位根的性质\"><a href=\"#单位根的性质\" class=\"headerlink\" title=\"单位根的性质\"></a>单位根的性质</h3><h4 id=\"消去定理\"><a href=\"#消去定理\" class=\"headerlink\" title=\"消去定理\"></a>消去定理</h4><script type=\"math/tex; mode=display\">w_{2n}^{2k} = w_n^k</script><h4 id=\"折半定理\"><a href=\"#折半定理\" class=\"headerlink\" title=\"折半定理\"></a>折半定理</h4><p>$n$为偶数时,$n$个$n$次单位根的集合就是$n/2$个$n/2$次单位根的集合。</p>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><script type=\"math/tex; mode=display\">w_n^{k+n/2} = -w_n^k</script><script type=\"math/tex; mode=display\">w_n^{k+n} = w_n^{k}</script><h1 id=\"离散傅利叶变换（DFT）\"><a href=\"#离散傅利叶变换（DFT）\" class=\"headerlink\" title=\"离散傅利叶变换（DFT）\"></a>离散傅利叶变换（DFT）</h1><p>设多项式<script type=\"math/tex\">A(x) = a_0+a_1x+a_2x^2+a_3x^3+...+a_{n-1}x^{n-1}</script><br>他的所有的偶数次项系数组成新多项式  </p>\n<script type=\"math/tex; mode=display\">A_0(x) = a_0 + a_2x + a_4x^2 + ...</script><script type=\"math/tex; mode=display\">A_1(x) = a_1 + a_3x + a_4x^2 + ...</script><p>则显然有<script type=\"math/tex\">A(x) = A_0(x^2)+xA_1(x^2)</script></p>\n<script type=\"math/tex; mode=display\">A(w_n^k) = A_0(w_n^{2k})+w_n^kA_1(w_n^{2k})= A_0(w_{n/2}^{k})+w_n^kA_1(w_{n/2}^{k})</script><script type=\"math/tex; mode=display\">A(w_n^{k+n/2}) = A_0(w_n^{2k+n})+w_n^kA_1(w_n^{2k+n})= A_0(w_{n/2}^{k})-w_n^kA_1(w_{n/2}^{k})</script><p>利用分治思想，将$A(x)$的奇数项和偶数项分别拆出一个新多多项式，<br>递归计算两个新多项式的点值后，可在$O(n)$时间内求出$A(x)$的点值。<br>总时间复杂度为$O(nlogn)$</p>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DFT(A,n) &#x2F;&#x2F;A为系数数组，n为项数，且n为2的整数次幂（可在）</span><br><span class=\"line\">if n &#x3D; 1</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">m &#x3D; n&#x2F;2</span><br><span class=\"line\">for i &#x3D; 0 to m</span><br><span class=\"line\">    A0[i] &#x3D; A[2*i]</span><br><span class=\"line\">    A1[i] &#x3D; A[2*i+1]</span><br><span class=\"line\"></span><br><span class=\"line\">DFT(A0,n)</span><br><span class=\"line\">DFT(A1,n)</span><br><span class=\"line\"></span><br><span class=\"line\">w &#x3D; 1</span><br><span class=\"line\">wn &#x3D; cos(2pi&#x2F;n) + i*sin(2pi&#x2F;n)</span><br><span class=\"line\">for i &#x3D; 0 to m-1</span><br><span class=\"line\">    A[i] &#x3D; A0[i] + w*A1[i]</span><br><span class=\"line\">    A[i+m] &#x3D; A0[i] - w*A1[i]</span><br><span class=\"line\">    w &#x3D; w*wn</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h3><p>将系数数组排成$log_2n$次奇偶分离操作后的顺序<br>这将顺序每个数的二进制秋翻转后即为0~n-1从小到大的排列<br>每个数翻转后的数可以递推求出。<br>C++代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span>&#125;<span class=\"comment\">//实现复数类，此外省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. rev 的计算 （放在main函数中）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &gt;&gt; l<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> DFT(Complex *A,<span class=\"keyword\">int</span> n )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = a[j+i];</span><br><span class=\"line\">                Complex v = a[j+i+m];</span><br><span class=\"line\">                a[j+i] = u + w*v;</span><br><span class=\"line\">                a[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"离散傅利叶逆变换（IDFT）\"><a href=\"#离散傅利叶逆变换（IDFT）\" class=\"headerlink\" title=\"离散傅利叶逆变换（IDFT）\"></a>离散傅利叶逆变换（IDFT）</h1><p>将单位根的枚举顺序倒过来，进行一次类似DFT操作，将最后得到的每个项点值除以$n$即得到每一项系数。<br>代码可以与DFT合并 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex *A,<span class=\"keyword\">int</span> n ,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//type = 1表示DFT</span></span><br><span class=\"line\">    <span class=\"comment\">//type = -1 表示IDFT</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;rev[i]) swap(A[i],A[r[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//从短到长枚举要外理的长度，相当于从递归的底层到顶层</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;<span class=\"comment\">//枚举要外理的部分的长度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;<span class=\"comment\">//蝴蝶操作</span></span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">10000000</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现复数类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> r,v;<span class=\"comment\">//实部和虚部</span></span><br><span class=\"line\">    Complex()&#123;</span><br><span class=\"line\">        r = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> a,<span class=\"keyword\">double</span> b)&#123;</span><br><span class=\"line\">        r = a; v = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r+p.r,v+p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r-p.r,v-p.v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex &amp;p) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Complex(r*p.r-v*p.v ,r*p.v + v*p.r ); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DFT和IDFT</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fft</span><span class=\"params\">(Complex * A,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> type)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rev[i] &lt; i ) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>;len &lt;= n;len &lt;&lt;= <span class=\"number\">1</span>)&#123;<span class=\"comment\">//the length of doing </span></span><br><span class=\"line\">        <span class=\"function\">Complex <span class=\"title\">wn</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/len), type*<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*pi/len) )</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;n;j+=len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> m = len&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                Complex u = A[j+i];</span><br><span class=\"line\">                Complex v = A[j+i+m];</span><br><span class=\"line\">                A[j+i] = u + w*v;</span><br><span class=\"line\">                A[j+i+m] = u-w*v;</span><br><span class=\"line\">                w = w*wn; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读入优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c =getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&lt;<span class=\"string\">&#x27;0&#x27;</span>||c&gt;<span class=\"string\">&#x27;9&#x27;</span>) c = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c&gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class=\"string\">&#x27;9&#x27;</span> )&#123;</span><br><span class=\"line\">        x = x*<span class=\"number\">10</span> + c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n =  read();</span><br><span class=\"line\">    m = read();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        b[i].r = read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将项数补齐到2的整数次幂</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(N&lt;=n+m) N &lt;&lt;= <span class=\"number\">1</span>,l++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//求rev</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (l<span class=\"number\">-1</span>) );</span><br><span class=\"line\">    </span><br><span class=\"line\">    fft(a,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    fft(b,N,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        a[i] = a[i]*b[i];</span><br><span class=\"line\">    fft(a,N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i&lt;=n+m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,(<span class=\"keyword\">int</span>)(a[i].r/N+<span class=\"number\">0.5</span>));<span class=\"comment\">//+0.5实现四舍五入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}